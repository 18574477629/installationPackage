<?xml version="1.0" encoding="UTF-8"?>
<javascript>
    <class type="miniprogram-api-typings.exports" superclass="None">
        <methods>
            <method name="clearInterval">
                <parameters>
                    <parameter name="intervalID" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/timer/clearInterval.html"&gt;clearInterval(number intervalID)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消由 setInterval 设置的定时器。&lt;/p&gt;
</description>
            </method>
            <method name="setInterval">
                <parameters>
                    <parameter name="callback" type="Function"/>
                    <parameter name="delay" type="Number"/>
                    <parameter name="rest" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/timer/setInterval.html"&gt;number setInterval(function callback, number delay, any rest)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设定一个定时器。按照指定的周期（以毫秒计）来执行注册的回调函数&lt;/p&gt;
</description>
            </method>
            <method name="clearTimeout">
                <parameters>
                    <parameter name="timeoutID" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/timer/clearTimeout.html"&gt;clearTimeout(number timeoutID)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消由 setTimeout 设置的定时器。&lt;/p&gt;
</description>
            </method>
            <method name="setTimeout">
                <parameters>
                    <parameter name="callback" type="Function"/>
                    <parameter name="delay" type="Number"/>
                    <parameter name="rest" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/timer/setTimeout.html"&gt;number setTimeout(function callback, number delay, any rest)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设定一个定时器。在定时到期以后执行注册的回调函数&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="WechatMiniprogram" type="WechatMiniprogram" scope="static">
                <description></description>
            </property>
            <property name="App" type="App" scope="instance">
                <description></description>
            </property>
            <property name="getApp" type="getApp" scope="instance">
                <description></description>
            </property>
            <property name="Page" type="Page" scope="instance">
                <description>&lt;p&gt;注册小程序中的一个页面。接受一个 &lt;code&gt;Object&lt;/code&gt; 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。&lt;/p&gt;
</description>
            </property>
            <property name="getCurrentPages" type="getCurrentPages" scope="instance">
                <description>&lt;p&gt;获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要尝试修改页面栈，会导致路由以及页面状态错误。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不要在 &lt;code&gt;App.onLaunch&lt;/code&gt; 的时候调用 &lt;code&gt;getCurrentPages()&lt;/code&gt;，此时 &lt;code&gt;page&lt;/code&gt; 还没有生成。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="console" type="console" scope="instance">
                <description></description>
            </property>
            <property name="wx" type="wx" scope="instance">
                <description></description>
            </property>
            <property name="IAPIError" type="IAPIError" scope="static">
                <description>&lt;p&gt;Common interfaces and types&lt;/p&gt;
</description>
            </property>
            <property name="IAPIParam" type="IAPIParam" scope="static">
                <description></description>
            </property>
            <property name="IAPISuccessParam" type="IAPISuccessParam" scope="static">
                <description></description>
            </property>
            <property name="IInitCloudConfig" type="IInitCloudConfig" scope="static">
                <description></description>
            </property>
            <property name="ICloudConfig" type="ICloudConfig" scope="static">
                <description></description>
            </property>
            <property name="IICloudAPI" type="IICloudAPI" scope="static">
                <description></description>
            </property>
            <property name="ICloudService" type="ICloudService" scope="static">
                <description></description>
            </property>
            <property name="ICloudServices" type="ICloudServices" scope="static">
                <description></description>
            </property>
            <property name="ICloudMetaData" type="ICloudMetaData" scope="static">
                <description></description>
            </property>
            <property name="InternalSymbol" type="InternalSymbol" scope="static">
                <description></description>
            </property>
            <property name="AnyObject" type="AnyObject" scope="static">
                <description></description>
            </property>
            <property name="WxCloud" type="WxCloud" scope="static">
                <description>&lt;p&gt;extend wx with cloud&lt;/p&gt;
</description>
            </property>
            <property name="ICloud" type="ICloud" scope="static">
                <description></description>
            </property>
            <property name="DB" type="DB" scope="static">
                <description></description>
            </property>
            <property name="Component" type="Component" scope="instance">
                <description>&lt;p&gt;Component构造器可用于定义组件，调用Component构造器时可以指定组件的属性、数据、方法等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;this.data&lt;/code&gt; 可以获取内部数据和属性值，但不要直接修改它们，应使用 &lt;code&gt;setData&lt;/code&gt; 修改。&lt;/li&gt;
&lt;li&gt;生命周期函数无法在组件方法中通过 &lt;code&gt;this&lt;/code&gt; 访问到。&lt;/li&gt;
&lt;li&gt;属性名应避免以 data 开头，即不要命名成 &lt;code&gt;dataXyz&lt;/code&gt; 这样的形式，因为在 WXML 中， &lt;code&gt;data-xyz=&amp;quot;&amp;quot;&lt;/code&gt; 会被作为节点 dataset 来处理，而不是组件属性。&lt;/li&gt;
&lt;li&gt;在一个组件的定义和使用时，组件的属性名和 data 字段相互间都不能冲突（尽管它们位于不同的定义段中）。&lt;/li&gt;
&lt;li&gt;从基础库 &lt;code&gt;2.0.9&lt;/code&gt; 开始，对象类型的属性和 data 字段中可以包含函数类型的子字段，即可以通过对象类型的属性字段来传递函数。低于这一版本的基础库不支持这一特性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bug&lt;/code&gt; : 对于 type 为 Object 或 Array 的属性，如果通过该组件自身的 &lt;code&gt;this.setData&lt;/code&gt; 来改变属性值的一个子字段，则依旧会触发属性 observer ，且 observer 接收到的 &lt;code&gt;newVal&lt;/code&gt; 是变化的那个子字段的值， &lt;code&gt;oldVal&lt;/code&gt; 为空， &lt;code&gt;changedPath&lt;/code&gt; 包含子字段的字段名相关信息。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="Behavior" type="Behavior" scope="instance">
                <description>&lt;p&gt;注册一个 &lt;code&gt;behavior&lt;/code&gt;，接受一个 &lt;code&gt;Object&lt;/code&gt; 类型的参数。&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WechatMiniprogram" superclass="None">
        <methods/>
        <properties>
            <property name="App" type="App" scope="static">
                <description></description>
            </property>
            <property name="Page" type="Page" scope="static">
                <description></description>
            </property>
            <property name="AccessFailCallbackResult" type="AccessFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="AccessOption" type="AccessOption" scope="static">
                <description></description>
            </property>
            <property name="AccountInfo" type="AccountInfo" scope="static">
                <description>&lt;p&gt;帐号信息&lt;/p&gt;
</description>
            </property>
            <property name="AddCardOption" type="AddCardOption" scope="static">
                <description></description>
            </property>
            <property name="AddCardRequestInfo" type="AddCardRequestInfo" scope="static">
                <description>&lt;p&gt;需要添加的卡券列表&lt;/p&gt;
</description>
            </property>
            <property name="AddCardResponseInfo" type="AddCardResponseInfo" scope="static">
                <description>&lt;p&gt;卡券添加结果列表&lt;/p&gt;
</description>
            </property>
            <property name="AddCardSuccessCallbackResult" type="AddCardSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="AddPhoneContactOption" type="AddPhoneContactOption" scope="static">
                <description></description>
            </property>
            <property name="AnimationOption" type="AnimationOption" scope="static">
                <description>&lt;p&gt;动画效果&lt;/p&gt;
</description>
            </property>
            <property name="AppendFileFailCallbackResult" type="AppendFileFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="AppendFileOption" type="AppendFileOption" scope="static">
                <description></description>
            </property>
            <property name="AuthSetting" type="AuthSetting" scope="static">
                <description>&lt;p&gt;用户授权设置信息，详情参考&lt;a href="(open-ability/authorize)"&gt;权限&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="AuthorizeOption" type="AuthorizeOption" scope="static">
                <description></description>
            </property>
            <property name="BLECharacteristic" type="BLECharacteristic" scope="static">
                <description>&lt;p&gt;设备特征值列表&lt;/p&gt;
</description>
            </property>
            <property name="BLEService" type="BLEService" scope="static">
                <description>&lt;p&gt;设备服务列表&lt;/p&gt;
</description>
            </property>
            <property name="BackgroundAudioManager" type="BackgroundAudioManager" scope="static">
                <description></description>
            </property>
            <property name="BluetoothDeviceInfo" type="BluetoothDeviceInfo" scope="static">
                <description>&lt;p&gt;搜索到的设备列表&lt;/p&gt;
</description>
            </property>
            <property name="BoundingClientRectCallbackResult" type="BoundingClientRectCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="BoundingClientRectResult" type="BoundingClientRectResult" scope="static">
                <description>&lt;p&gt;目标边界&lt;/p&gt;
</description>
            </property>
            <property name="CallbackBlueToothDevice" type="CallbackBlueToothDevice" scope="static">
                <description>&lt;p&gt;新搜索到的设备列表&lt;/p&gt;
</description>
            </property>
            <property name="CameraContextStartRecordOption" type="CameraContextStartRecordOption" scope="static">
                <description></description>
            </property>
            <property name="CameraContextStopRecordOption" type="CameraContextStopRecordOption" scope="static">
                <description></description>
            </property>
            <property name="CameraFrameListenerStartOption" type="CameraFrameListenerStartOption" scope="static">
                <description></description>
            </property>
            <property name="CameraFrameListenerStopOption" type="CameraFrameListenerStopOption" scope="static">
                <description></description>
            </property>
            <property name="CanvasContext" type="CanvasContext" scope="static">
                <description></description>
            </property>
            <property name="CanvasGetImageDataOption" type="CanvasGetImageDataOption" scope="static">
                <description></description>
            </property>
            <property name="CanvasGetImageDataSuccessCallbackResult" type="CanvasGetImageDataSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="CanvasPutImageDataOption" type="CanvasPutImageDataOption" scope="static">
                <description></description>
            </property>
            <property name="CanvasToTempFilePathOption" type="CanvasToTempFilePathOption" scope="static">
                <description></description>
            </property>
            <property name="CanvasToTempFilePathSuccessCallbackResult" type="CanvasToTempFilePathSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="CheckIsSoterEnrolledInDeviceOption" type="CheckIsSoterEnrolledInDeviceOption" scope="static">
                <description></description>
            </property>
            <property name="CheckIsSoterEnrolledInDeviceSuccessCallbackResult" type="CheckIsSoterEnrolledInDeviceSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="CheckIsSupportSoterAuthenticationOption" type="CheckIsSupportSoterAuthenticationOption" scope="static">
                <description></description>
            </property>
            <property name="CheckIsSupportSoterAuthenticationSuccessCallbackResult" type="CheckIsSupportSoterAuthenticationSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="CheckSessionOption" type="CheckSessionOption" scope="static">
                <description></description>
            </property>
            <property name="ChooseAddressOption" type="ChooseAddressOption" scope="static">
                <description></description>
            </property>
            <property name="ChooseAddressSuccessCallbackResult" type="ChooseAddressSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ChooseFile" type="ChooseFile" scope="static">
                <description>&lt;p&gt;返回选择的文件的本地临时文件对象数组&lt;/p&gt;
</description>
            </property>
            <property name="ChooseImageOption" type="ChooseImageOption" scope="static">
                <description></description>
            </property>
            <property name="ChooseImageSuccessCallbackResult" type="ChooseImageSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ChooseInvoiceOption" type="ChooseInvoiceOption" scope="static">
                <description></description>
            </property>
            <property name="ChooseInvoiceSuccessCallbackResult" type="ChooseInvoiceSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ChooseInvoiceTitleOption" type="ChooseInvoiceTitleOption" scope="static">
                <description></description>
            </property>
            <property name="ChooseInvoiceTitleSuccessCallbackResult" type="ChooseInvoiceTitleSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ChooseLocationOption" type="ChooseLocationOption" scope="static">
                <description></description>
            </property>
            <property name="ChooseLocationSuccessCallbackResult" type="ChooseLocationSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ChooseMessageFileOption" type="ChooseMessageFileOption" scope="static">
                <description></description>
            </property>
            <property name="ChooseMessageFileSuccessCallbackResult" type="ChooseMessageFileSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ChooseVideoOption" type="ChooseVideoOption" scope="static">
                <description></description>
            </property>
            <property name="ChooseVideoSuccessCallbackResult" type="ChooseVideoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ClearOption" type="ClearOption" scope="static">
                <description></description>
            </property>
            <property name="ClearStorageOption" type="ClearStorageOption" scope="static">
                <description></description>
            </property>
            <property name="CloseBLEConnectionOption" type="CloseBLEConnectionOption" scope="static">
                <description></description>
            </property>
            <property name="CloseBluetoothAdapterOption" type="CloseBluetoothAdapterOption" scope="static">
                <description></description>
            </property>
            <property name="CloseOption" type="CloseOption" scope="static">
                <description></description>
            </property>
            <property name="CloseSocketOption" type="CloseSocketOption" scope="static">
                <description></description>
            </property>
            <property name="Color" type="Color" scope="static">
                <description>&lt;p&gt;颜色。可以用以下几种方式来表示 canvas 中使用的颜色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RGB 颜色： 如 &lt;code&gt;&amp;#39;rgb(255, 0, 0)&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RGBA 颜色：如 &lt;code&gt;&amp;#39;rgba(255, 0, 0, 0.3)&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;16 进制颜色： 如 &lt;code&gt;&amp;#39;#FF0000&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;预定义的颜色： 如 &lt;code&gt;&amp;#39;red&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中预定义颜色有以下148个：
&lt;em&gt;注意*&lt;/em&gt;: Color Name 大小写不敏感&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Color Name&lt;/th&gt;
&lt;th&gt;HEX&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;AliceBlue&lt;/td&gt;
&lt;td&gt;#F0F8FF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AntiqueWhite&lt;/td&gt;
&lt;td&gt;#FAEBD7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aqua&lt;/td&gt;
&lt;td&gt;#00FFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aquamarine&lt;/td&gt;
&lt;td&gt;#7FFFD4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Azure&lt;/td&gt;
&lt;td&gt;#F0FFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Beige&lt;/td&gt;
&lt;td&gt;#F5F5DC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bisque&lt;/td&gt;
&lt;td&gt;#FFE4C4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Black&lt;/td&gt;
&lt;td&gt;#000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlanchedAlmond&lt;/td&gt;
&lt;td&gt;#FFEBCD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Blue&lt;/td&gt;
&lt;td&gt;#0000FF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlueViolet&lt;/td&gt;
&lt;td&gt;#8A2BE2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Brown&lt;/td&gt;
&lt;td&gt;#A52A2A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BurlyWood&lt;/td&gt;
&lt;td&gt;#DEB887&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CadetBlue&lt;/td&gt;
&lt;td&gt;#5F9EA0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chartreuse&lt;/td&gt;
&lt;td&gt;#7FFF00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chocolate&lt;/td&gt;
&lt;td&gt;#D2691E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coral&lt;/td&gt;
&lt;td&gt;#FF7F50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CornflowerBlue&lt;/td&gt;
&lt;td&gt;#6495ED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cornsilk&lt;/td&gt;
&lt;td&gt;#FFF8DC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Crimson&lt;/td&gt;
&lt;td&gt;#DC143C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cyan&lt;/td&gt;
&lt;td&gt;#00FFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkBlue&lt;/td&gt;
&lt;td&gt;#00008B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkCyan&lt;/td&gt;
&lt;td&gt;#008B8B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkGoldenRod&lt;/td&gt;
&lt;td&gt;#B8860B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkGray&lt;/td&gt;
&lt;td&gt;#A9A9A9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkGrey&lt;/td&gt;
&lt;td&gt;#A9A9A9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkGreen&lt;/td&gt;
&lt;td&gt;#006400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkKhaki&lt;/td&gt;
&lt;td&gt;#BDB76B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkMagenta&lt;/td&gt;
&lt;td&gt;#8B008B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkOliveGreen&lt;/td&gt;
&lt;td&gt;#556B2F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkOrange&lt;/td&gt;
&lt;td&gt;#FF8C00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkOrchid&lt;/td&gt;
&lt;td&gt;#9932CC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkRed&lt;/td&gt;
&lt;td&gt;#8B0000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkSalmon&lt;/td&gt;
&lt;td&gt;#E9967A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkSeaGreen&lt;/td&gt;
&lt;td&gt;#8FBC8F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkSlateBlue&lt;/td&gt;
&lt;td&gt;#483D8B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkSlateGray&lt;/td&gt;
&lt;td&gt;#2F4F4F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkSlateGrey&lt;/td&gt;
&lt;td&gt;#2F4F4F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkTurquoise&lt;/td&gt;
&lt;td&gt;#00CED1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DarkViolet&lt;/td&gt;
&lt;td&gt;#9400D3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeepPink&lt;/td&gt;
&lt;td&gt;#FF1493&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeepSkyBlue&lt;/td&gt;
&lt;td&gt;#00BFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DimGray&lt;/td&gt;
&lt;td&gt;#696969&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DimGrey&lt;/td&gt;
&lt;td&gt;#696969&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DodgerBlue&lt;/td&gt;
&lt;td&gt;#1E90FF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FireBrick&lt;/td&gt;
&lt;td&gt;#B22222&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FloralWhite&lt;/td&gt;
&lt;td&gt;#FFFAF0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ForestGreen&lt;/td&gt;
&lt;td&gt;#228B22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fuchsia&lt;/td&gt;
&lt;td&gt;#FF00FF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gainsboro&lt;/td&gt;
&lt;td&gt;#DCDCDC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GhostWhite&lt;/td&gt;
&lt;td&gt;#F8F8FF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gold&lt;/td&gt;
&lt;td&gt;#FFD700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GoldenRod&lt;/td&gt;
&lt;td&gt;#DAA520&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gray&lt;/td&gt;
&lt;td&gt;#808080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grey&lt;/td&gt;
&lt;td&gt;#808080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Green&lt;/td&gt;
&lt;td&gt;#008000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GreenYellow&lt;/td&gt;
&lt;td&gt;#ADFF2F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HoneyDew&lt;/td&gt;
&lt;td&gt;#F0FFF0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HotPink&lt;/td&gt;
&lt;td&gt;#FF69B4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IndianRed&lt;/td&gt;
&lt;td&gt;#CD5C5C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Indigo&lt;/td&gt;
&lt;td&gt;#4B0082&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ivory&lt;/td&gt;
&lt;td&gt;#FFFFF0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Khaki&lt;/td&gt;
&lt;td&gt;#F0E68C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lavender&lt;/td&gt;
&lt;td&gt;#E6E6FA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LavenderBlush&lt;/td&gt;
&lt;td&gt;#FFF0F5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LawnGreen&lt;/td&gt;
&lt;td&gt;#7CFC00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LemonChiffon&lt;/td&gt;
&lt;td&gt;#FFFACD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightBlue&lt;/td&gt;
&lt;td&gt;#ADD8E6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightCoral&lt;/td&gt;
&lt;td&gt;#F08080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightCyan&lt;/td&gt;
&lt;td&gt;#E0FFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightGoldenRodYellow&lt;/td&gt;
&lt;td&gt;#FAFAD2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightGray&lt;/td&gt;
&lt;td&gt;#D3D3D3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightGrey&lt;/td&gt;
&lt;td&gt;#D3D3D3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightGreen&lt;/td&gt;
&lt;td&gt;#90EE90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightPink&lt;/td&gt;
&lt;td&gt;#FFB6C1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightSalmon&lt;/td&gt;
&lt;td&gt;#FFA07A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightSeaGreen&lt;/td&gt;
&lt;td&gt;#20B2AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightSkyBlue&lt;/td&gt;
&lt;td&gt;#87CEFA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightSlateGray&lt;/td&gt;
&lt;td&gt;#778899&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightSlateGrey&lt;/td&gt;
&lt;td&gt;#778899&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightSteelBlue&lt;/td&gt;
&lt;td&gt;#B0C4DE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LightYellow&lt;/td&gt;
&lt;td&gt;#FFFFE0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lime&lt;/td&gt;
&lt;td&gt;#00FF00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LimeGreen&lt;/td&gt;
&lt;td&gt;#32CD32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linen&lt;/td&gt;
&lt;td&gt;#FAF0E6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Magenta&lt;/td&gt;
&lt;td&gt;#FF00FF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Maroon&lt;/td&gt;
&lt;td&gt;#800000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumAquaMarine&lt;/td&gt;
&lt;td&gt;#66CDAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumBlue&lt;/td&gt;
&lt;td&gt;#0000CD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumOrchid&lt;/td&gt;
&lt;td&gt;#BA55D3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumPurple&lt;/td&gt;
&lt;td&gt;#9370DB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumSeaGreen&lt;/td&gt;
&lt;td&gt;#3CB371&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumSlateBlue&lt;/td&gt;
&lt;td&gt;#7B68EE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumSpringGreen&lt;/td&gt;
&lt;td&gt;#00FA9A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumTurquoise&lt;/td&gt;
&lt;td&gt;#48D1CC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MediumVioletRed&lt;/td&gt;
&lt;td&gt;#C71585&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MidnightBlue&lt;/td&gt;
&lt;td&gt;#191970&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MintCream&lt;/td&gt;
&lt;td&gt;#F5FFFA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MistyRose&lt;/td&gt;
&lt;td&gt;#FFE4E1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Moccasin&lt;/td&gt;
&lt;td&gt;#FFE4B5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NavajoWhite&lt;/td&gt;
&lt;td&gt;#FFDEAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Navy&lt;/td&gt;
&lt;td&gt;#000080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OldLace&lt;/td&gt;
&lt;td&gt;#FDF5E6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Olive&lt;/td&gt;
&lt;td&gt;#808000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OliveDrab&lt;/td&gt;
&lt;td&gt;#6B8E23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orange&lt;/td&gt;
&lt;td&gt;#FFA500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OrangeRed&lt;/td&gt;
&lt;td&gt;#FF4500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orchid&lt;/td&gt;
&lt;td&gt;#DA70D6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PaleGoldenRod&lt;/td&gt;
&lt;td&gt;#EEE8AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PaleGreen&lt;/td&gt;
&lt;td&gt;#98FB98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PaleTurquoise&lt;/td&gt;
&lt;td&gt;#AFEEEE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PaleVioletRed&lt;/td&gt;
&lt;td&gt;#DB7093&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PapayaWhip&lt;/td&gt;
&lt;td&gt;#FFEFD5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PeachPuff&lt;/td&gt;
&lt;td&gt;#FFDAB9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peru&lt;/td&gt;
&lt;td&gt;#CD853F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pink&lt;/td&gt;
&lt;td&gt;#FFC0CB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Plum&lt;/td&gt;
&lt;td&gt;#DDA0DD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PowderBlue&lt;/td&gt;
&lt;td&gt;#B0E0E6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Purple&lt;/td&gt;
&lt;td&gt;#800080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RebeccaPurple&lt;/td&gt;
&lt;td&gt;#663399&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Red&lt;/td&gt;
&lt;td&gt;#FF0000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RosyBrown&lt;/td&gt;
&lt;td&gt;#BC8F8F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RoyalBlue&lt;/td&gt;
&lt;td&gt;#4169E1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SaddleBrown&lt;/td&gt;
&lt;td&gt;#8B4513&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Salmon&lt;/td&gt;
&lt;td&gt;#FA8072&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SandyBrown&lt;/td&gt;
&lt;td&gt;#F4A460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SeaGreen&lt;/td&gt;
&lt;td&gt;#2E8B57&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SeaShell&lt;/td&gt;
&lt;td&gt;#FFF5EE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sienna&lt;/td&gt;
&lt;td&gt;#A0522D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Silver&lt;/td&gt;
&lt;td&gt;#C0C0C0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SkyBlue&lt;/td&gt;
&lt;td&gt;#87CEEB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SlateBlue&lt;/td&gt;
&lt;td&gt;#6A5ACD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SlateGray&lt;/td&gt;
&lt;td&gt;#708090&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SlateGrey&lt;/td&gt;
&lt;td&gt;#708090&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Snow&lt;/td&gt;
&lt;td&gt;#FFFAFA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SpringGreen&lt;/td&gt;
&lt;td&gt;#00FF7F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SteelBlue&lt;/td&gt;
&lt;td&gt;#4682B4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tan&lt;/td&gt;
&lt;td&gt;#D2B48C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Teal&lt;/td&gt;
&lt;td&gt;#008080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thistle&lt;/td&gt;
&lt;td&gt;#D8BFD8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tomato&lt;/td&gt;
&lt;td&gt;#FF6347&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Turquoise&lt;/td&gt;
&lt;td&gt;#40E0D0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Violet&lt;/td&gt;
&lt;td&gt;#EE82EE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wheat&lt;/td&gt;
&lt;td&gt;#F5DEB3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;White&lt;/td&gt;
&lt;td&gt;#FFFFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WhiteSmoke&lt;/td&gt;
&lt;td&gt;#F5F5F5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Yellow&lt;/td&gt;
&lt;td&gt;#FFFF00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YellowGreen&lt;/td&gt;
&lt;td&gt;#9ACD32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
            <property name="CompressImageOption" type="CompressImageOption" scope="static">
                <description></description>
            </property>
            <property name="CompressImageSuccessCallbackResult" type="CompressImageSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ConnectSocketOption" type="ConnectSocketOption" scope="static">
                <description></description>
            </property>
            <property name="ConnectWifiOption" type="ConnectWifiOption" scope="static">
                <description></description>
            </property>
            <property name="ContextCallbackResult" type="ContextCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="CopyFileFailCallbackResult" type="CopyFileFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="CopyFileOption" type="CopyFileOption" scope="static">
                <description></description>
            </property>
            <property name="CreateAnimationOption" type="CreateAnimationOption" scope="static">
                <description></description>
            </property>
            <property name="CreateBLEConnectionOption" type="CreateBLEConnectionOption" scope="static">
                <description></description>
            </property>
            <property name="CreateIntersectionObserverOption" type="CreateIntersectionObserverOption" scope="static">
                <description>&lt;p&gt;选项&lt;/p&gt;
</description>
            </property>
            <property name="CreateInterstitialAdOption" type="CreateInterstitialAdOption" scope="static">
                <description></description>
            </property>
            <property name="CreateRewardedVideoAdOption" type="CreateRewardedVideoAdOption" scope="static">
                <description></description>
            </property>
            <property name="Danmu" type="Danmu" scope="static">
                <description>&lt;p&gt;弹幕内容&lt;/p&gt;
</description>
            </property>
            <property name="DescOption" type="DescOption" scope="static">
                <description>&lt;p&gt;可选的字体描述符&lt;/p&gt;
</description>
            </property>
            <property name="DestinationOption" type="DestinationOption" scope="static">
                <description>&lt;p&gt;指定 marker 移动到的目标点&lt;/p&gt;
</description>
            </property>
            <property name="DownloadFileOption" type="DownloadFileOption" scope="static">
                <description></description>
            </property>
            <property name="DownloadFileSuccessCallbackResult" type="DownloadFileSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="DownloadTaskOnHeadersReceivedCallbackResult" type="DownloadTaskOnHeadersReceivedCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="DownloadTaskOnProgressUpdateCallbackResult" type="DownloadTaskOnProgressUpdateCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ExitFullScreenOption" type="ExitFullScreenOption" scope="static">
                <description></description>
            </property>
            <property name="ExtInfo" type="ExtInfo" scope="static">
                <description></description>
            </property>
            <property name="Fields" type="Fields" scope="static">
                <description></description>
            </property>
            <property name="FileSystemManagerGetFileInfoOption" type="FileSystemManagerGetFileInfoOption" scope="static">
                <description></description>
            </property>
            <property name="FileSystemManagerGetFileInfoSuccessCallbackResult" type="FileSystemManagerGetFileInfoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="FileSystemManagerGetSavedFileListOption" type="FileSystemManagerGetSavedFileListOption" scope="static">
                <description></description>
            </property>
            <property name="FileSystemManagerGetSavedFileListSuccessCallbackResult" type="FileSystemManagerGetSavedFileListSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="FileSystemManagerGetSavedFileListSuccessCallbackResultFileItem" type="FileSystemManagerGetSavedFileListSuccessCallbackResultFileItem" scope="static">
                <description>&lt;p&gt;文件数组&lt;/p&gt;
</description>
            </property>
            <property name="FileSystemManagerRemoveSavedFileOption" type="FileSystemManagerRemoveSavedFileOption" scope="static">
                <description></description>
            </property>
            <property name="FileSystemManagerSaveFileOption" type="FileSystemManagerSaveFileOption" scope="static">
                <description></description>
            </property>
            <property name="FileSystemManagerSaveFileSuccessCallbackResult" type="FileSystemManagerSaveFileSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetAvailableAudioSourcesOption" type="GetAvailableAudioSourcesOption" scope="static">
                <description></description>
            </property>
            <property name="GetAvailableAudioSourcesSuccessCallbackResult" type="GetAvailableAudioSourcesSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetBLEDeviceCharacteristicsOption" type="GetBLEDeviceCharacteristicsOption" scope="static">
                <description></description>
            </property>
            <property name="GetBLEDeviceCharacteristicsSuccessCallbackResult" type="GetBLEDeviceCharacteristicsSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetBLEDeviceServicesOption" type="GetBLEDeviceServicesOption" scope="static">
                <description></description>
            </property>
            <property name="GetBLEDeviceServicesSuccessCallbackResult" type="GetBLEDeviceServicesSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetBackgroundAudioPlayerStateOption" type="GetBackgroundAudioPlayerStateOption" scope="static">
                <description></description>
            </property>
            <property name="GetBackgroundAudioPlayerStateSuccessCallbackResult" type="GetBackgroundAudioPlayerStateSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetBackgroundFetchDataOption" type="GetBackgroundFetchDataOption" scope="static">
                <description></description>
            </property>
            <property name="GetBackgroundFetchTokenOption" type="GetBackgroundFetchTokenOption" scope="static">
                <description></description>
            </property>
            <property name="GetBatteryInfoOption" type="GetBatteryInfoOption" scope="static">
                <description></description>
            </property>
            <property name="GetBatteryInfoSuccessCallbackResult" type="GetBatteryInfoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetBatteryInfoSyncResult" type="GetBatteryInfoSyncResult" scope="static">
                <description></description>
            </property>
            <property name="GetBeaconsOption" type="GetBeaconsOption" scope="static">
                <description></description>
            </property>
            <property name="GetBeaconsSuccessCallbackResult" type="GetBeaconsSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetBluetoothAdapterStateOption" type="GetBluetoothAdapterStateOption" scope="static">
                <description></description>
            </property>
            <property name="GetBluetoothAdapterStateSuccessCallbackResult" type="GetBluetoothAdapterStateSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetBluetoothDevicesOption" type="GetBluetoothDevicesOption" scope="static">
                <description></description>
            </property>
            <property name="GetBluetoothDevicesSuccessCallbackResult" type="GetBluetoothDevicesSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetCenterLocationOption" type="GetCenterLocationOption" scope="static">
                <description></description>
            </property>
            <property name="GetCenterLocationSuccessCallbackResult" type="GetCenterLocationSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetClipboardDataOption" type="GetClipboardDataOption" scope="static">
                <description></description>
            </property>
            <property name="GetClipboardDataSuccessCallbackOption" type="GetClipboardDataSuccessCallbackOption" scope="static">
                <description></description>
            </property>
            <property name="GetConnectedBluetoothDevicesOption" type="GetConnectedBluetoothDevicesOption" scope="static">
                <description></description>
            </property>
            <property name="GetConnectedBluetoothDevicesSuccessCallbackResult" type="GetConnectedBluetoothDevicesSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetConnectedWifiOption" type="GetConnectedWifiOption" scope="static">
                <description></description>
            </property>
            <property name="GetConnectedWifiSuccessCallbackResult" type="GetConnectedWifiSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetContentsOption" type="GetContentsOption" scope="static">
                <description></description>
            </property>
            <property name="GetExtConfigOption" type="GetExtConfigOption" scope="static">
                <description></description>
            </property>
            <property name="GetExtConfigSuccessCallbackResult" type="GetExtConfigSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetFileInfoFailCallbackResult" type="GetFileInfoFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetHCEStateOption" type="GetHCEStateOption" scope="static">
                <description></description>
            </property>
            <property name="GetImageInfoOption" type="GetImageInfoOption" scope="static">
                <description></description>
            </property>
            <property name="GetImageInfoSuccessCallbackResult" type="GetImageInfoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetLocationOption" type="GetLocationOption" scope="static">
                <description></description>
            </property>
            <property name="GetLocationSuccessCallbackResult" type="GetLocationSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetLogManagerOption" type="GetLogManagerOption" scope="static">
                <description></description>
            </property>
            <property name="GetNetworkTypeOption" type="GetNetworkTypeOption" scope="static">
                <description></description>
            </property>
            <property name="GetNetworkTypeSuccessCallbackResult" type="GetNetworkTypeSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetRegionOption" type="GetRegionOption" scope="static">
                <description></description>
            </property>
            <property name="GetRegionSuccessCallbackResult" type="GetRegionSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetRotateOption" type="GetRotateOption" scope="static">
                <description></description>
            </property>
            <property name="GetRotateSuccessCallbackResult" type="GetRotateSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetSavedFileInfoOption" type="GetSavedFileInfoOption" scope="static">
                <description></description>
            </property>
            <property name="GetSavedFileInfoSuccessCallbackResult" type="GetSavedFileInfoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetScaleOption" type="GetScaleOption" scope="static">
                <description></description>
            </property>
            <property name="GetScaleSuccessCallbackResult" type="GetScaleSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetScreenBrightnessOption" type="GetScreenBrightnessOption" scope="static">
                <description></description>
            </property>
            <property name="GetScreenBrightnessSuccessCallbackOption" type="GetScreenBrightnessSuccessCallbackOption" scope="static">
                <description></description>
            </property>
            <property name="GetSettingOption" type="GetSettingOption" scope="static">
                <description></description>
            </property>
            <property name="GetSettingSuccessCallbackResult" type="GetSettingSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetShareInfoOption" type="GetShareInfoOption" scope="static">
                <description></description>
            </property>
            <property name="GetShareInfoSuccessCallbackResult" type="GetShareInfoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetSkewOption" type="GetSkewOption" scope="static">
                <description></description>
            </property>
            <property name="GetSkewSuccessCallbackResult" type="GetSkewSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetStorageInfoOption" type="GetStorageInfoOption" scope="static">
                <description></description>
            </property>
            <property name="GetStorageInfoSuccessCallbackOption" type="GetStorageInfoSuccessCallbackOption" scope="static">
                <description></description>
            </property>
            <property name="GetStorageInfoSyncOption" type="GetStorageInfoSyncOption" scope="static">
                <description></description>
            </property>
            <property name="GetStorageOption" type="GetStorageOption" scope="static">
                <description></description>
            </property>
            <property name="GetStorageSuccessCallbackResult" type="GetStorageSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetSystemInfoOption" type="GetSystemInfoOption" scope="static">
                <description></description>
            </property>
            <property name="GetSystemInfoSuccessCallbackResult" type="GetSystemInfoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetSystemInfoSyncResult" type="GetSystemInfoSyncResult" scope="static">
                <description></description>
            </property>
            <property name="GetSystemInfoSyncResultSafeAreaResult" type="GetSystemInfoSyncResultSafeAreaResult" scope="static">
                <description>&lt;p&gt;在竖屏正方向下的安全区域&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="GetUserInfoOption" type="GetUserInfoOption" scope="static">
                <description></description>
            </property>
            <property name="GetUserInfoSuccessCallbackResult" type="GetUserInfoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetWeRunDataOption" type="GetWeRunDataOption" scope="static">
                <description></description>
            </property>
            <property name="GetWeRunDataSuccessCallbackResult" type="GetWeRunDataSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="GetWifiListOption" type="GetWifiListOption" scope="static">
                <description></description>
            </property>
            <property name="HideLoadingOption" type="HideLoadingOption" scope="static">
                <description></description>
            </property>
            <property name="HideNavigationBarLoadingOption" type="HideNavigationBarLoadingOption" scope="static">
                <description></description>
            </property>
            <property name="HideShareMenuOption" type="HideShareMenuOption" scope="static">
                <description></description>
            </property>
            <property name="HideTabBarOption" type="HideTabBarOption" scope="static">
                <description></description>
            </property>
            <property name="HideTabBarRedDotOption" type="HideTabBarRedDotOption" scope="static">
                <description></description>
            </property>
            <property name="HideToastOption" type="HideToastOption" scope="static">
                <description></description>
            </property>
            <property name="IBeaconInfo" type="IBeaconInfo" scope="static">
                <description></description>
            </property>
            <property name="Image" type="Image" scope="static">
                <description>&lt;p&gt;图片对象&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="ImageFile" type="ImageFile" scope="static">
                <description>&lt;p&gt;图片的本地临时文件列表&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="IncludePointsOption" type="IncludePointsOption" scope="static">
                <description></description>
            </property>
            <property name="InnerAudioContext" type="InnerAudioContext" scope="static">
                <description></description>
            </property>
            <property name="InnerAudioContextOnErrorCallbackResult" type="InnerAudioContextOnErrorCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="InsertDividerOption" type="InsertDividerOption" scope="static">
                <description></description>
            </property>
            <property name="InsertImageOption" type="InsertImageOption" scope="static">
                <description></description>
            </property>
            <property name="InsertTextOption" type="InsertTextOption" scope="static">
                <description></description>
            </property>
            <property name="IntersectionRectResult" type="IntersectionRectResult" scope="static">
                <description>&lt;p&gt;相交区域的边界&lt;/p&gt;
</description>
            </property>
            <property name="InterstitialAdOnErrorCallbackResult" type="InterstitialAdOnErrorCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="LaunchOptionsApp" type="LaunchOptionsApp" scope="static">
                <description>&lt;p&gt;启动参数&lt;/p&gt;
</description>
            </property>
            <property name="LaunchOptionsAppReferrerInfo" type="LaunchOptionsAppReferrerInfo" scope="static">
                <description>&lt;p&gt;来源信息。从另一个小程序、公众号或 App 进入小程序时返回。否则返回 &lt;code&gt;{}&lt;/code&gt;。(参见后文注意)&lt;/p&gt;
</description>
            </property>
            <property name="LivePlayerContextPauseOption" type="LivePlayerContextPauseOption" scope="static">
                <description></description>
            </property>
            <property name="LivePlayerContextRequestFullScreenOption" type="LivePlayerContextRequestFullScreenOption" scope="static">
                <description></description>
            </property>
            <property name="LivePlayerContextResumeOption" type="LivePlayerContextResumeOption" scope="static">
                <description></description>
            </property>
            <property name="LivePlayerContextSnapshotOption" type="LivePlayerContextSnapshotOption" scope="static">
                <description></description>
            </property>
            <property name="LivePlayerContextStopOption" type="LivePlayerContextStopOption" scope="static">
                <description></description>
            </property>
            <property name="LivePusherContextPauseOption" type="LivePusherContextPauseOption" scope="static">
                <description></description>
            </property>
            <property name="LivePusherContextResumeOption" type="LivePusherContextResumeOption" scope="static">
                <description></description>
            </property>
            <property name="LivePusherContextSnapshotOption" type="LivePusherContextSnapshotOption" scope="static">
                <description></description>
            </property>
            <property name="LivePusherContextStartOption" type="LivePusherContextStartOption" scope="static">
                <description></description>
            </property>
            <property name="LivePusherContextStopOption" type="LivePusherContextStopOption" scope="static">
                <description></description>
            </property>
            <property name="LoadFontFaceCompleteCallbackResult" type="LoadFontFaceCompleteCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="LoadFontFaceFailCallbackResult" type="LoadFontFaceFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="LoadFontFaceOption" type="LoadFontFaceOption" scope="static">
                <description></description>
            </property>
            <property name="LoadFontFaceSuccessCallbackResult" type="LoadFontFaceSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="LoginOption" type="LoginOption" scope="static">
                <description></description>
            </property>
            <property name="LoginSuccessCallbackResult" type="LoginSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="MakePhoneCallOption" type="MakePhoneCallOption" scope="static">
                <description></description>
            </property>
            <property name="MapPostion" type="MapPostion" scope="static">
                <description>&lt;p&gt;要显示在可视区域内的坐标点列表&lt;/p&gt;
</description>
            </property>
            <property name="MiniProgram" type="MiniProgram" scope="static">
                <description>&lt;p&gt;小程序帐号信息&lt;/p&gt;
</description>
            </property>
            <property name="MkdirFailCallbackResult" type="MkdirFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="MkdirOption" type="MkdirOption" scope="static">
                <description></description>
            </property>
            <property name="MoveToLocationOption" type="MoveToLocationOption" scope="static">
                <description></description>
            </property>
            <property name="MuteOption" type="MuteOption" scope="static">
                <description></description>
            </property>
            <property name="NavigateBackMiniProgramOption" type="NavigateBackMiniProgramOption" scope="static">
                <description></description>
            </property>
            <property name="NavigateBackOption" type="NavigateBackOption" scope="static">
                <description></description>
            </property>
            <property name="NavigateToMiniProgramOption" type="NavigateToMiniProgramOption" scope="static">
                <description></description>
            </property>
            <property name="NavigateToOption" type="NavigateToOption" scope="static">
                <description></description>
            </property>
            <property name="NodeCallbackResult" type="NodeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="NotifyBLECharacteristicValueChangeOption" type="NotifyBLECharacteristicValueChangeOption" scope="static">
                <description></description>
            </property>
            <property name="ObserveCallbackResult" type="ObserveCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnAccelerometerChangeCallbackResult" type="OnAccelerometerChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnAppShowCallbackResult" type="OnAppShowCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnBLECharacteristicValueChangeCallbackResult" type="OnBLECharacteristicValueChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnBLEConnectionStateChangeCallbackResult" type="OnBLEConnectionStateChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnBackgroundFetchDataOption" type="OnBackgroundFetchDataOption" scope="static">
                <description></description>
            </property>
            <property name="OnBeaconServiceChangeCallbackResult" type="OnBeaconServiceChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnBeaconUpdateCallbackResult" type="OnBeaconUpdateCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnBluetoothAdapterStateChangeCallbackResult" type="OnBluetoothAdapterStateChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnCameraFrameCallbackResult" type="OnCameraFrameCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnCheckForUpdateCallbackResult" type="OnCheckForUpdateCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnCloseCallbackResult" type="OnCloseCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnCompassChangeCallbackResult" type="OnCompassChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnDeviceMotionChangeCallbackResult" type="OnDeviceMotionChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnFrameRecordedCallbackResult" type="OnFrameRecordedCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnGetWifiListCallbackResult" type="OnGetWifiListCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnGyroscopeChangeCallbackResult" type="OnGyroscopeChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnHCEMessageCallbackResult" type="OnHCEMessageCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnLocalServiceFoundCallbackResult" type="OnLocalServiceFoundCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnLocalServiceLostCallbackResult" type="OnLocalServiceLostCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnLocalServiceResolveFailCallbackResult" type="OnLocalServiceResolveFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnLocationChangeCallbackResult" type="OnLocationChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnMemoryWarningCallbackResult" type="OnMemoryWarningCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnNetworkStatusChangeCallbackResult" type="OnNetworkStatusChangeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnOpenCallbackResult" type="OnOpenCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnPageNotFoundCallbackResult" type="OnPageNotFoundCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnSocketMessageCallbackResult" type="OnSocketMessageCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnSocketOpenCallbackResult" type="OnSocketOpenCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnStopCallbackResult" type="OnStopCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnWifiConnectedCallbackResult" type="OnWifiConnectedCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OnWindowResizeCallbackResult" type="OnWindowResizeCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="OpenBluetoothAdapterOption" type="OpenBluetoothAdapterOption" scope="static">
                <description></description>
            </property>
            <property name="OpenCardOption" type="OpenCardOption" scope="static">
                <description></description>
            </property>
            <property name="OpenCardRequestInfo" type="OpenCardRequestInfo" scope="static">
                <description>&lt;p&gt;需要打开的卡券列表&lt;/p&gt;
</description>
            </property>
            <property name="OpenDocumentOption" type="OpenDocumentOption" scope="static">
                <description></description>
            </property>
            <property name="OpenLocationOption" type="OpenLocationOption" scope="static">
                <description></description>
            </property>
            <property name="OpenSettingOption" type="OpenSettingOption" scope="static">
                <description></description>
            </property>
            <property name="OpenSettingSuccessCallbackResult" type="OpenSettingSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="PageScrollToOption" type="PageScrollToOption" scope="static">
                <description></description>
            </property>
            <property name="PauseBGMOption" type="PauseBGMOption" scope="static">
                <description></description>
            </property>
            <property name="PauseBackgroundAudioOption" type="PauseBackgroundAudioOption" scope="static">
                <description></description>
            </property>
            <property name="PauseVoiceOption" type="PauseVoiceOption" scope="static">
                <description></description>
            </property>
            <property name="PlayBGMOption" type="PlayBGMOption" scope="static">
                <description></description>
            </property>
            <property name="PlayBackgroundAudioOption" type="PlayBackgroundAudioOption" scope="static">
                <description></description>
            </property>
            <property name="PlayOption" type="PlayOption" scope="static">
                <description></description>
            </property>
            <property name="PlayVoiceOption" type="PlayVoiceOption" scope="static">
                <description></description>
            </property>
            <property name="Plugin" type="Plugin" scope="static">
                <description>&lt;p&gt;插件帐号信息（仅在插件中调用时包含这一项）&lt;/p&gt;
</description>
            </property>
            <property name="PreviewImageOption" type="PreviewImageOption" scope="static">
                <description></description>
            </property>
            <property name="Properties" type="Properties" scope="static">
                <description>&lt;p&gt;该特征值支持的操作类型&lt;/p&gt;
</description>
            </property>
            <property name="ReLaunchOption" type="ReLaunchOption" scope="static">
                <description></description>
            </property>
            <property name="ReadBLECharacteristicValueOption" type="ReadBLECharacteristicValueOption" scope="static">
                <description></description>
            </property>
            <property name="ReadFileFailCallbackResult" type="ReadFileFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ReadFileOption" type="ReadFileOption" scope="static">
                <description></description>
            </property>
            <property name="ReadFileSuccessCallbackResult" type="ReadFileSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ReaddirFailCallbackResult" type="ReaddirFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ReaddirOption" type="ReaddirOption" scope="static">
                <description></description>
            </property>
            <property name="ReaddirSuccessCallbackResult" type="ReaddirSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="RecorderManagerOnErrorCallbackResult" type="RecorderManagerOnErrorCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="RecorderManagerStartOption" type="RecorderManagerStartOption" scope="static">
                <description></description>
            </property>
            <property name="Rect" type="Rect" scope="static">
                <description>&lt;p&gt;菜单按钮的布局位置信息&lt;/p&gt;
</description>
            </property>
            <property name="RedirectToOption" type="RedirectToOption" scope="static">
                <description></description>
            </property>
            <property name="RedoOption" type="RedoOption" scope="static">
                <description></description>
            </property>
            <property name="RelativeRectResult" type="RelativeRectResult" scope="static">
                <description>&lt;p&gt;参照区域的边界&lt;/p&gt;
</description>
            </property>
            <property name="RelativeToMargins" type="RelativeToMargins" scope="static">
                <description>&lt;p&gt;用来扩展（或收缩）参照节点布局区域的边界&lt;/p&gt;
</description>
            </property>
            <property name="RelativeToViewportMargins" type="RelativeToViewportMargins" scope="static">
                <description>&lt;p&gt;用来扩展（或收缩）参照节点布局区域的边界&lt;/p&gt;
</description>
            </property>
            <property name="RemoteInfo" type="RemoteInfo" scope="static">
                <description>&lt;p&gt;消息来源的结构化信息&lt;/p&gt;
</description>
            </property>
            <property name="RemoveFormatOption" type="RemoveFormatOption" scope="static">
                <description></description>
            </property>
            <property name="RemoveSavedFileFailCallbackResult" type="RemoveSavedFileFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="RemoveStorageOption" type="RemoveStorageOption" scope="static">
                <description></description>
            </property>
            <property name="RemoveTabBarBadgeOption" type="RemoveTabBarBadgeOption" scope="static">
                <description></description>
            </property>
            <property name="RenameFailCallbackResult" type="RenameFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="RenameOption" type="RenameOption" scope="static">
                <description></description>
            </property>
            <property name="RenderingContext" type="RenderingContext" scope="static">
                <description>&lt;p&gt;Canvas 绘图上下文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Canvas.getContext(&amp;#39;webgl&amp;#39;) 或 OffscreenCanvas.getContext(&amp;#39;webgl&amp;#39;) 接口可以获取 WebGLRenderingContext 对象，实现了 &lt;a href="https://www.khronos.org/registry/webgl/specs/latest/1.0/"&gt;WebGL 1.0&lt;/a&gt; 定义的所有属性、方法、常量。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="RequestOption" type="RequestOption" scope="static">
                <description></description>
            </property>
            <property name="RequestPaymentOption" type="RequestPaymentOption" scope="static">
                <description></description>
            </property>
            <property name="RequestSuccessCallbackResult" type="RequestSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="RequestTaskOnHeadersReceivedCallbackResult" type="RequestTaskOnHeadersReceivedCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ResultBlueToothDevice" type="ResultBlueToothDevice" scope="static">
                <description>&lt;p&gt;uuid 对应的的已连接设备列表&lt;/p&gt;
</description>
            </property>
            <property name="ResultReferrerInfo" type="ResultReferrerInfo" scope="static">
                <description>&lt;p&gt;来源信息。从另一个小程序、公众号或 App 进入小程序时返回。否则返回 &lt;code&gt;{}&lt;/code&gt;。(参见后文注意)&lt;/p&gt;
</description>
            </property>
            <property name="ResumeBGMOption" type="ResumeBGMOption" scope="static">
                <description></description>
            </property>
            <property name="RewardedVideoAdOnErrorCallbackResult" type="RewardedVideoAdOnErrorCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="RmdirFailCallbackResult" type="RmdirFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="RmdirOption" type="RmdirOption" scope="static">
                <description></description>
            </property>
            <property name="SafeAreaResult" type="SafeAreaResult" scope="static">
                <description>&lt;p&gt;在竖屏正方向下的安全区域&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="SaveFileFailCallbackResult" type="SaveFileFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="SaveImageToPhotosAlbumOption" type="SaveImageToPhotosAlbumOption" scope="static">
                <description></description>
            </property>
            <property name="SaveVideoToPhotosAlbumOption" type="SaveVideoToPhotosAlbumOption" scope="static">
                <description></description>
            </property>
            <property name="ScanCodeOption" type="ScanCodeOption" scope="static">
                <description></description>
            </property>
            <property name="ScanCodeSuccessCallbackResult" type="ScanCodeSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ScrollOffsetCallbackResult" type="ScrollOffsetCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="SeekBackgroundAudioOption" type="SeekBackgroundAudioOption" scope="static">
                <description></description>
            </property>
            <property name="SendHCEMessageOption" type="SendHCEMessageOption" scope="static">
                <description></description>
            </property>
            <property name="SendSocketMessageOption" type="SendSocketMessageOption" scope="static">
                <description></description>
            </property>
            <property name="SetBGMVolumeOption" type="SetBGMVolumeOption" scope="static">
                <description></description>
            </property>
            <property name="SetBackgroundColorOption" type="SetBackgroundColorOption" scope="static">
                <description></description>
            </property>
            <property name="SetBackgroundFetchTokenOption" type="SetBackgroundFetchTokenOption" scope="static">
                <description></description>
            </property>
            <property name="SetBackgroundTextStyleOption" type="SetBackgroundTextStyleOption" scope="static">
                <description></description>
            </property>
            <property name="SetClipboardDataOption" type="SetClipboardDataOption" scope="static">
                <description></description>
            </property>
            <property name="SetContentsOption" type="SetContentsOption" scope="static">
                <description></description>
            </property>
            <property name="SetEnableDebugOption" type="SetEnableDebugOption" scope="static">
                <description></description>
            </property>
            <property name="SetInnerAudioOption" type="SetInnerAudioOption" scope="static">
                <description></description>
            </property>
            <property name="SetKeepScreenOnOption" type="SetKeepScreenOnOption" scope="static">
                <description></description>
            </property>
            <property name="SetNavigationBarColorOption" type="SetNavigationBarColorOption" scope="static">
                <description></description>
            </property>
            <property name="SetNavigationBarTitleOption" type="SetNavigationBarTitleOption" scope="static">
                <description></description>
            </property>
            <property name="SetScreenBrightnessOption" type="SetScreenBrightnessOption" scope="static">
                <description></description>
            </property>
            <property name="SetStorageOption" type="SetStorageOption" scope="static">
                <description></description>
            </property>
            <property name="SetTabBarBadgeOption" type="SetTabBarBadgeOption" scope="static">
                <description></description>
            </property>
            <property name="SetTabBarItemOption" type="SetTabBarItemOption" scope="static">
                <description></description>
            </property>
            <property name="SetTabBarStyleOption" type="SetTabBarStyleOption" scope="static">
                <description></description>
            </property>
            <property name="SetTopBarTextOption" type="SetTopBarTextOption" scope="static">
                <description></description>
            </property>
            <property name="SetWifiListOption" type="SetWifiListOption" scope="static">
                <description></description>
            </property>
            <property name="ShowActionSheetOption" type="ShowActionSheetOption" scope="static">
                <description></description>
            </property>
            <property name="ShowActionSheetSuccessCallbackResult" type="ShowActionSheetSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ShowLoadingOption" type="ShowLoadingOption" scope="static">
                <description></description>
            </property>
            <property name="ShowModalOption" type="ShowModalOption" scope="static">
                <description></description>
            </property>
            <property name="ShowModalSuccessCallbackResult" type="ShowModalSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="ShowNavigationBarLoadingOption" type="ShowNavigationBarLoadingOption" scope="static">
                <description></description>
            </property>
            <property name="ShowShareMenuOption" type="ShowShareMenuOption" scope="static">
                <description></description>
            </property>
            <property name="ShowTabBarOption" type="ShowTabBarOption" scope="static">
                <description></description>
            </property>
            <property name="ShowTabBarRedDotOption" type="ShowTabBarRedDotOption" scope="static">
                <description></description>
            </property>
            <property name="ShowToastOption" type="ShowToastOption" scope="static">
                <description></description>
            </property>
            <property name="Size" type="Size" scope="static">
                <description></description>
            </property>
            <property name="SnapshotSuccessCallbackResult" type="SnapshotSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="SocketTaskOnErrorCallbackResult" type="SocketTaskOnErrorCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="SocketTaskOnMessageCallbackResult" type="SocketTaskOnMessageCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="SocketTaskSendOption" type="SocketTaskSendOption" scope="static">
                <description></description>
            </property>
            <property name="StartAccelerometerOption" type="StartAccelerometerOption" scope="static">
                <description></description>
            </property>
            <property name="StartBeaconDiscoveryOption" type="StartBeaconDiscoveryOption" scope="static">
                <description></description>
            </property>
            <property name="StartBluetoothDevicesDiscoveryOption" type="StartBluetoothDevicesDiscoveryOption" scope="static">
                <description></description>
            </property>
            <property name="StartCompassOption" type="StartCompassOption" scope="static">
                <description></description>
            </property>
            <property name="StartDeviceMotionListeningOption" type="StartDeviceMotionListeningOption" scope="static">
                <description></description>
            </property>
            <property name="StartGyroscopeOption" type="StartGyroscopeOption" scope="static">
                <description></description>
            </property>
            <property name="StartHCEOption" type="StartHCEOption" scope="static">
                <description></description>
            </property>
            <property name="StartLocalServiceDiscoveryFailCallbackResult" type="StartLocalServiceDiscoveryFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="StartLocalServiceDiscoveryOption" type="StartLocalServiceDiscoveryOption" scope="static">
                <description></description>
            </property>
            <property name="StartLocationUpdateBackgroundOption" type="StartLocationUpdateBackgroundOption" scope="static">
                <description></description>
            </property>
            <property name="StartLocationUpdateOption" type="StartLocationUpdateOption" scope="static">
                <description></description>
            </property>
            <property name="StartPreviewOption" type="StartPreviewOption" scope="static">
                <description></description>
            </property>
            <property name="StartPullDownRefreshOption" type="StartPullDownRefreshOption" scope="static">
                <description></description>
            </property>
            <property name="StartRecordSuccessCallbackResult" type="StartRecordSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="StartRecordTimeoutCallbackResult" type="StartRecordTimeoutCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="StartSoterAuthenticationOption" type="StartSoterAuthenticationOption" scope="static">
                <description></description>
            </property>
            <property name="StartSoterAuthenticationSuccessCallbackResult" type="StartSoterAuthenticationSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="StartWifiOption" type="StartWifiOption" scope="static">
                <description></description>
            </property>
            <property name="StatFailCallbackResult" type="StatFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="StatOption" type="StatOption" scope="static">
                <description></description>
            </property>
            <property name="StatSuccessCallbackResult" type="StatSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="Stats" type="Stats" scope="static">
                <description></description>
            </property>
            <property name="StepOption" type="StepOption" scope="static">
                <description></description>
            </property>
            <property name="StopAccelerometerOption" type="StopAccelerometerOption" scope="static">
                <description></description>
            </property>
            <property name="StopBGMOption" type="StopBGMOption" scope="static">
                <description></description>
            </property>
            <property name="StopBackgroundAudioOption" type="StopBackgroundAudioOption" scope="static">
                <description></description>
            </property>
            <property name="StopBeaconDiscoveryOption" type="StopBeaconDiscoveryOption" scope="static">
                <description></description>
            </property>
            <property name="StopBluetoothDevicesDiscoveryOption" type="StopBluetoothDevicesDiscoveryOption" scope="static">
                <description></description>
            </property>
            <property name="StopCompassOption" type="StopCompassOption" scope="static">
                <description></description>
            </property>
            <property name="StopDeviceMotionListeningOption" type="StopDeviceMotionListeningOption" scope="static">
                <description></description>
            </property>
            <property name="StopGyroscopeOption" type="StopGyroscopeOption" scope="static">
                <description></description>
            </property>
            <property name="StopHCEOption" type="StopHCEOption" scope="static">
                <description></description>
            </property>
            <property name="StopLocalServiceDiscoveryFailCallbackResult" type="StopLocalServiceDiscoveryFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="StopLocalServiceDiscoveryOption" type="StopLocalServiceDiscoveryOption" scope="static">
                <description></description>
            </property>
            <property name="StopLocationUpdateOption" type="StopLocationUpdateOption" scope="static">
                <description></description>
            </property>
            <property name="StopPreviewOption" type="StopPreviewOption" scope="static">
                <description></description>
            </property>
            <property name="StopPullDownRefreshOption" type="StopPullDownRefreshOption" scope="static">
                <description></description>
            </property>
            <property name="StopRecordSuccessCallbackResult" type="StopRecordSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="StopVoiceOption" type="StopVoiceOption" scope="static">
                <description></description>
            </property>
            <property name="StopWifiOption" type="StopWifiOption" scope="static">
                <description></description>
            </property>
            <property name="SwitchCameraOption" type="SwitchCameraOption" scope="static">
                <description></description>
            </property>
            <property name="SwitchTabOption" type="SwitchTabOption" scope="static">
                <description></description>
            </property>
            <property name="TakePhotoOption" type="TakePhotoOption" scope="static">
                <description></description>
            </property>
            <property name="TakePhotoSuccessCallbackResult" type="TakePhotoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="TextMetrics" type="TextMetrics" scope="static">
                <description></description>
            </property>
            <property name="ToggleTorchOption" type="ToggleTorchOption" scope="static">
                <description></description>
            </property>
            <property name="TranslateMarkerOption" type="TranslateMarkerOption" scope="static">
                <description></description>
            </property>
            <property name="UDPSocketOnErrorCallbackResult" type="UDPSocketOnErrorCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="UDPSocketOnMessageCallbackResult" type="UDPSocketOnMessageCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="UDPSocketSendOption" type="UDPSocketSendOption" scope="static">
                <description></description>
            </property>
            <property name="UndoOption" type="UndoOption" scope="static">
                <description></description>
            </property>
            <property name="UnlinkFailCallbackResult" type="UnlinkFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="UnlinkOption" type="UnlinkOption" scope="static">
                <description></description>
            </property>
            <property name="UnzipFailCallbackResult" type="UnzipFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="UnzipOption" type="UnzipOption" scope="static">
                <description></description>
            </property>
            <property name="UpdatableMessageFrontEndParameter" type="UpdatableMessageFrontEndParameter" scope="static">
                <description>&lt;p&gt;参数列表&lt;/p&gt;
</description>
            </property>
            <property name="UpdatableMessageFrontEndTemplateInfo" type="UpdatableMessageFrontEndTemplateInfo" scope="static">
                <description>&lt;p&gt;动态消息的模板信息&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="UpdateShareMenuOption" type="UpdateShareMenuOption" scope="static">
                <description></description>
            </property>
            <property name="UploadFileOption" type="UploadFileOption" scope="static">
                <description></description>
            </property>
            <property name="UploadFileSuccessCallbackResult" type="UploadFileSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="UploadTaskOnHeadersReceivedCallbackResult" type="UploadTaskOnHeadersReceivedCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="UploadTaskOnProgressUpdateCallbackResult" type="UploadTaskOnProgressUpdateCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="UserInfo" type="UserInfo" scope="static">
                <description>&lt;p&gt;用户信息&lt;/p&gt;
</description>
            </property>
            <property name="VibrateLongOption" type="VibrateLongOption" scope="static">
                <description></description>
            </property>
            <property name="VibrateShortOption" type="VibrateShortOption" scope="static">
                <description></description>
            </property>
            <property name="VideoContextRequestFullScreenOption" type="VideoContextRequestFullScreenOption" scope="static">
                <description></description>
            </property>
            <property name="WifiData" type="WifiData" scope="static">
                <description>&lt;p&gt;提供预设的 Wi-Fi 信息列表&lt;/p&gt;
</description>
            </property>
            <property name="WifiInfo" type="WifiInfo" scope="static">
                <description>&lt;p&gt;Wifi 信息&lt;/p&gt;
</description>
            </property>
            <property name="WorkerOnMessageCallbackResult" type="WorkerOnMessageCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="WriteBLECharacteristicValueOption" type="WriteBLECharacteristicValueOption" scope="static">
                <description></description>
            </property>
            <property name="WriteFileFailCallbackResult" type="WriteFileFailCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="WriteFileOption" type="WriteFileOption" scope="static">
                <description></description>
            </property>
            <property name="WxGetFileInfoOption" type="WxGetFileInfoOption" scope="static">
                <description></description>
            </property>
            <property name="WxGetFileInfoSuccessCallbackResult" type="WxGetFileInfoSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="WxGetSavedFileListOption" type="WxGetSavedFileListOption" scope="static">
                <description></description>
            </property>
            <property name="WxGetSavedFileListSuccessCallbackResult" type="WxGetSavedFileListSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="WxGetSavedFileListSuccessCallbackResultFileItem" type="WxGetSavedFileListSuccessCallbackResultFileItem" scope="static">
                <description>&lt;p&gt;文件数组，每一项是一个 FileItem&lt;/p&gt;
</description>
            </property>
            <property name="WxRemoveSavedFileOption" type="WxRemoveSavedFileOption" scope="static">
                <description></description>
            </property>
            <property name="WxSaveFileOption" type="WxSaveFileOption" scope="static">
                <description></description>
            </property>
            <property name="WxSaveFileSuccessCallbackResult" type="WxSaveFileSuccessCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="WxStartRecordOption" type="WxStartRecordOption" scope="static">
                <description></description>
            </property>
            <property name="WxStopRecordOption" type="WxStopRecordOption" scope="static">
                <description></description>
            </property>
            <property name="Animation" type="Animation" scope="static">
                <description></description>
            </property>
            <property name="AudioContext" type="AudioContext" scope="static">
                <description></description>
            </property>
            <property name="BackgroundAudioError" type="BackgroundAudioError" scope="static">
                <description></description>
            </property>
            <property name="BluetoothError" type="BluetoothError" scope="static">
                <description></description>
            </property>
            <property name="CameraContext" type="CameraContext" scope="static">
                <description></description>
            </property>
            <property name="CameraFrameListener" type="CameraFrameListener" scope="static">
                <description></description>
            </property>
            <property name="Canvas" type="Canvas" scope="static">
                <description></description>
            </property>
            <property name="CanvasGradient" type="CanvasGradient" scope="static">
                <description></description>
            </property>
            <property name="Console" type="Console" scope="static">
                <description></description>
            </property>
            <property name="DownloadTask" type="DownloadTask" scope="static">
                <description></description>
            </property>
            <property name="EditorContext" type="EditorContext" scope="static">
                <description></description>
            </property>
            <property name="FileSystemManager" type="FileSystemManager" scope="static">
                <description></description>
            </property>
            <property name="GeneralCallbackResult" type="GeneralCallbackResult" scope="static">
                <description></description>
            </property>
            <property name="IBeaconError" type="IBeaconError" scope="static">
                <description></description>
            </property>
            <property name="IntersectionObserver" type="IntersectionObserver" scope="static">
                <description></description>
            </property>
            <property name="InterstitialAd" type="InterstitialAd" scope="static">
                <description></description>
            </property>
            <property name="LivePlayerContext" type="LivePlayerContext" scope="static">
                <description></description>
            </property>
            <property name="LivePusherContext" type="LivePusherContext" scope="static">
                <description></description>
            </property>
            <property name="LogManager" type="LogManager" scope="static">
                <description></description>
            </property>
            <property name="MapContext" type="MapContext" scope="static">
                <description></description>
            </property>
            <property name="NFCError" type="NFCError" scope="static">
                <description></description>
            </property>
            <property name="NodesRef" type="NodesRef" scope="static">
                <description></description>
            </property>
            <property name="OffscreenCanvas" type="OffscreenCanvas" scope="static">
                <description></description>
            </property>
            <property name="RealtimeLogManager" type="RealtimeLogManager" scope="static">
                <description></description>
            </property>
            <property name="RecorderManager" type="RecorderManager" scope="static">
                <description></description>
            </property>
            <property name="RequestTask" type="RequestTask" scope="static">
                <description></description>
            </property>
            <property name="RewardedVideoAd" type="RewardedVideoAd" scope="static">
                <description></description>
            </property>
            <property name="SelectorQuery" type="SelectorQuery" scope="static">
                <description></description>
            </property>
            <property name="SocketTask" type="SocketTask" scope="static">
                <description></description>
            </property>
            <property name="UDPSocket" type="UDPSocket" scope="static">
                <description></description>
            </property>
            <property name="UpdateManager" type="UpdateManager" scope="static">
                <description></description>
            </property>
            <property name="UploadTask" type="UploadTask" scope="static">
                <description></description>
            </property>
            <property name="VideoContext" type="VideoContext" scope="static">
                <description></description>
            </property>
            <property name="WifiError" type="WifiError" scope="static">
                <description></description>
            </property>
            <property name="Worker" type="Worker" scope="static">
                <description></description>
            </property>
            <property name="Wx" type="Wx" scope="static">
                <description></description>
            </property>
            <property name="Component" type="Component" scope="static">
                <description></description>
            </property>
            <property name="Behavior" type="Behavior" scope="static">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="App" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="ReferrerInfo" superclass="None">
        <methods/>
        <properties>
            <property name="appId" type="String">
                <description>&lt;p&gt;来源小程序或公众号或App的 appId&lt;/p&gt;
&lt;p&gt;以下场景支持返回 referrerInfo.appId：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1020（公众号 profile 页相关小程序列表）： appId&lt;/li&gt;
&lt;li&gt;1035（公众号自定义菜单）：来源公众号 appId&lt;/li&gt;
&lt;li&gt;1036（App 分享消息卡片）：来源应用 appId&lt;/li&gt;
&lt;li&gt;1037（小程序打开小程序）：来源小程序 appId&lt;/li&gt;
&lt;li&gt;1038（从另一个小程序返回）：来源小程序 appId&lt;/li&gt;
&lt;li&gt;1043（公众号模板消息）：来源公众号 appId&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="extraData" type="Object">
                <description>&lt;p&gt;来源小程序传过来的数据，scene=1037或1038时支持&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LaunchShowOption" superclass="None">
        <methods/>
        <properties>
            <property name="path" type="String">
                <description>&lt;p&gt;打开小程序的路径&lt;/p&gt;
</description>
            </property>
            <property name="query" type="IAnyObject">
                <description>&lt;p&gt;打开小程序的query&lt;/p&gt;
</description>
            </property>
            <property name="scene" type="SceneValues">
                <description>&lt;p&gt;打开小程序的场景值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1001：发现栏小程序主入口，「最近使用」列表（基础库2.2.4版本起包含「我的小程序」列表）&lt;/li&gt;
&lt;li&gt;1005：微信首页顶部搜索框的搜索结果页&lt;/li&gt;
&lt;li&gt;1006：发现栏小程序主入口搜索框的搜索结果页&lt;/li&gt;
&lt;li&gt;1007：单人聊天会话中的小程序消息卡片&lt;/li&gt;
&lt;li&gt;1008：群聊会话中的小程序消息卡片&lt;/li&gt;
&lt;li&gt;1011：扫描二维码&lt;/li&gt;
&lt;li&gt;1012：长按图片识别二维码&lt;/li&gt;
&lt;li&gt;1013：扫描手机相册中选取的二维码&lt;/li&gt;
&lt;li&gt;1014：小程序模板消息&lt;/li&gt;
&lt;li&gt;1017：前往小程序体验版的入口页&lt;/li&gt;
&lt;li&gt;1019：微信钱包（微信客户端7.0.0版本改为支付入口）&lt;/li&gt;
&lt;li&gt;1020：公众号 profile 页相关小程序列表&lt;/li&gt;
&lt;li&gt;1023：安卓系统桌面图标&lt;/li&gt;
&lt;li&gt;1024：小程序 profile 页&lt;/li&gt;
&lt;li&gt;1025：扫描一维码&lt;/li&gt;
&lt;li&gt;1026：发现栏小程序主入口，「附近的小程序」列表&lt;/li&gt;
&lt;li&gt;1027：微信首页顶部搜索框搜索结果页「使用过的小程序」列表&lt;/li&gt;
&lt;li&gt;1028：我的卡包&lt;/li&gt;
&lt;li&gt;1029：小程序中的卡券详情页&lt;/li&gt;
&lt;li&gt;1030：自动化测试下打开小程序&lt;/li&gt;
&lt;li&gt;1031：长按图片识别一维码&lt;/li&gt;
&lt;li&gt;1032：扫描手机相册中选取的一维码&lt;/li&gt;
&lt;li&gt;1034：微信支付完成页&lt;/li&gt;
&lt;li&gt;1035：公众号自定义菜单&lt;/li&gt;
&lt;li&gt;1036：App 分享消息卡片&lt;/li&gt;
&lt;li&gt;1037：小程序打开小程序&lt;/li&gt;
&lt;li&gt;1038：从另一个小程序返回&lt;/li&gt;
&lt;li&gt;1039：摇电视&lt;/li&gt;
&lt;li&gt;1042：添加好友搜索框的搜索结果页&lt;/li&gt;
&lt;li&gt;1043：公众号模板消息&lt;/li&gt;
&lt;li&gt;1044：带 shareTicket 的小程序消息卡片 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share.html"&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1045：朋友圈广告&lt;/li&gt;
&lt;li&gt;1046：朋友圈广告详情页&lt;/li&gt;
&lt;li&gt;1047：扫描小程序码&lt;/li&gt;
&lt;li&gt;1048：长按图片识别小程序码&lt;/li&gt;
&lt;li&gt;1049：扫描手机相册中选取的小程序码&lt;/li&gt;
&lt;li&gt;1052：卡券的适用门店列表&lt;/li&gt;
&lt;li&gt;1053：搜一搜的结果页&lt;/li&gt;
&lt;li&gt;1056：聊天顶部音乐播放器右上角菜单&lt;/li&gt;
&lt;li&gt;1057：钱包中的银行卡详情页&lt;/li&gt;
&lt;li&gt;1058：公众号文章&lt;/li&gt;
&lt;li&gt;1059：体验版小程序绑定邀请页&lt;/li&gt;
&lt;li&gt;1064：微信首页连Wi-Fi状态栏&lt;/li&gt;
&lt;li&gt;1067：公众号文章广告&lt;/li&gt;
&lt;li&gt;1069：移动应用&lt;/li&gt;
&lt;li&gt;1071：钱包中的银行卡列表页&lt;/li&gt;
&lt;li&gt;1072：二维码收款页面&lt;/li&gt;
&lt;li&gt;1073：客服消息列表下发的小程序消息卡片&lt;/li&gt;
&lt;li&gt;1074：公众号会话下发的小程序消息卡片&lt;/li&gt;
&lt;li&gt;1077：摇周边&lt;/li&gt;
&lt;li&gt;1078：微信连Wi-Fi成功提示页&lt;/li&gt;
&lt;li&gt;1079：微信游戏中心&lt;/li&gt;
&lt;li&gt;1081：客服消息下发的文字链&lt;/li&gt;
&lt;li&gt;1082：公众号会话下发的文字链&lt;/li&gt;
&lt;li&gt;1084：朋友圈广告原生页&lt;/li&gt;
&lt;li&gt;1089：微信聊天主界面下拉，「最近使用」栏（基础库2.2.4版本起包含「我的小程序」栏）&lt;/li&gt;
&lt;li&gt;1090：长按小程序右上角菜单唤出最近使用历史&lt;/li&gt;
&lt;li&gt;1091：公众号文章商品卡片&lt;/li&gt;
&lt;li&gt;1092：城市服务入口&lt;/li&gt;
&lt;li&gt;1095：小程序广告组件&lt;/li&gt;
&lt;li&gt;1096：聊天记录&lt;/li&gt;
&lt;li&gt;1097：微信支付签约页&lt;/li&gt;
&lt;li&gt;1099：页面内嵌插件&lt;/li&gt;
&lt;li&gt;1102：公众号 profile 页服务预览&lt;/li&gt;
&lt;li&gt;1124：扫“一物一码”打开小程序&lt;/li&gt;
&lt;li&gt;1125：长按图片识别“一物一码”&lt;/li&gt;
&lt;li&gt;1126：扫描手机相册中选取的“一物一码”&lt;/li&gt;
&lt;li&gt;1129：微信爬虫访问 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html"&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="shareTicket" type="String">
                <description>&lt;p&gt;shareTicket，详见 &lt;a href="(%E8%BD%AC%E5%8F%91#%E8%8E%B7%E5%8F%96%E6%9B%B4%E5%A4%9A%E8%BD%AC%E5%8F%91%E4%BF%A1%E6%81%AF)"&gt;获取更多转发信息&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="referrerInfo" type="ReferrerInfo">
                <description>&lt;p&gt;当场景为由从另一个小程序或公众号或App打开时，返回此字段&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PageNotFoundOption" superclass="None">
        <methods/>
        <properties>
            <property name="path" type="String">
                <description>&lt;p&gt;不存在页面的路径&lt;/p&gt;
</description>
            </property>
            <property name="query" type="IAnyObject">
                <description>&lt;p&gt;打开不存在页面的 query&lt;/p&gt;
</description>
            </property>
            <property name="isEntryPage" type="Boolean">
                <description>&lt;p&gt;是否本次启动的首个页面（例如从分享等入口进来，首个页面是开发者配置的分享页面）&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Option" superclass="None">
        <methods>
            <method name="onLaunch">
                <parameters>
                    <parameter name="options" type="LaunchShowOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;生命周期回调—监听小程序初始化&lt;/p&gt;
&lt;p&gt;小程序初始化完成时触发，全局只触发一次。&lt;/p&gt;
</description>
            </method>
            <method name="onShow">
                <parameters>
                    <parameter name="options" type="LaunchShowOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;生命周期回调—监听小程序显示&lt;/p&gt;
&lt;p&gt;小程序启动，或从后台进入前台显示时&lt;/p&gt;
</description>
            </method>
            <method name="onHide">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;生命周期回调—监听小程序隐藏&lt;/p&gt;
&lt;p&gt;小程序从前台进入后台时&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="error" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;错误监听函数&lt;/p&gt;
&lt;p&gt;小程序发生脚本错误，或者 api&lt;/p&gt;
</description>
            </method>
            <method name="onPageNotFound">
                <parameters>
                    <parameter name="options" type="PageNotFoundOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;页面不存在监听函数&lt;/p&gt;
&lt;p&gt;小程序要打开的页面不存在时触发，会带上页面信息回调该函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果开发者没有添加 &lt;code&gt;onPageNotFound&lt;/code&gt; 监听，当跳转页面不存在时，将推入微信客户端原生的页面不存在提示页面。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;onPageNotFound&lt;/code&gt; 回调中又重定向到另一个不存在的页面，将推入微信客户端原生的页面不存在提示页面，并且不再回调 &lt;code&gt;onPageNotFound&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最低基础库： 1.9.90&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="Constructor" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="GetAppOption" superclass="None">
        <methods/>
        <properties>
            <property name="allowDefault" type="Boolean">
                <description>&lt;p&gt;在 &lt;code&gt;App&lt;/code&gt; 未定义时返回默认实现。当App被调用时，默认实现中定义的属性会被覆盖合并到App中。一般用于独立分包&lt;/p&gt;
&lt;p&gt;最低基础库： 2.2.4&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetApp" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="Page" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="ILifetime" superclass="None">
        <methods>
            <method name="onLoad">
                <parameters>
                    <parameter name="query" type="Record"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;生命周期回调—监听页面加载&lt;/p&gt;
&lt;p&gt;页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。&lt;/p&gt;
</description>
            </method>
            <method name="onShow">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;生命周期回调—监听页面显示&lt;/p&gt;
&lt;p&gt;页面显示/切入前台时触发。&lt;/p&gt;
</description>
            </method>
            <method name="onReady">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;生命周期回调—监听页面初次渲染完成&lt;/p&gt;
&lt;p&gt;页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。&lt;/p&gt;
&lt;p&gt;注意：对界面内容进行设置的 API 如&lt;code&gt;wx.setNavigationBarTitle&lt;/code&gt;，请在&lt;code&gt;onReady&lt;/code&gt;之后进行。&lt;/p&gt;
</description>
            </method>
            <method name="onHide">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;生命周期回调—监听页面隐藏&lt;/p&gt;
&lt;p&gt;页面隐藏/切入后台时触发。 如 &lt;code&gt;navigateTo&lt;/code&gt; 或底部 &lt;code&gt;tab&lt;/code&gt; 切换到其他页面，小程序切入后台等。&lt;/p&gt;
</description>
            </method>
            <method name="onUnload">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;生命周期回调—监听页面卸载&lt;/p&gt;
&lt;p&gt;页面卸载时触发。如&lt;code&gt;redirectTo&lt;/code&gt;或&lt;code&gt;navigateBack&lt;/code&gt;到其他页面时。&lt;/p&gt;
</description>
            </method>
            <method name="onPullDownRefresh">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;监听用户下拉动作&lt;/p&gt;
&lt;p&gt;监听用户下拉刷新事件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要在&lt;code&gt;app.json&lt;/code&gt;的&lt;code&gt;window&lt;/code&gt;选项中或页面配置中开启&lt;code&gt;enablePullDownRefresh&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;可以通过&lt;code&gt;wx.startPullDownRefresh&lt;/code&gt;触发下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。&lt;/li&gt;
&lt;li&gt;当处理完数据刷新后，&lt;code&gt;wx.stopPullDownRefresh&lt;/code&gt;可以停止当前页面的下拉刷新。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="onReachBottom">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;页面上拉触底事件的处理函数&lt;/p&gt;
&lt;p&gt;监听用户上拉触底事件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以在&lt;code&gt;app.json&lt;/code&gt;的&lt;code&gt;window&lt;/code&gt;选项中或页面配置中设置触发距离&lt;code&gt;onReachBottomDistance&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在触发距离内滑动期间，本事件只会被触发一次。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="onShareAppMessage">
                <parameters>
                    <parameter name="options" type="IShareAppMessageOption"/>
                </parameters>
                <return-types>
                    <return-type type="ICustomShareContent"/>
                </return-types>
                <description>&lt;p&gt;用户点击右上角转发&lt;/p&gt;
&lt;p&gt;监听用户点击页面内转发按钮（&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 组件 &lt;code&gt;open-type=&amp;quot;share&amp;quot;&lt;/code&gt;）或右上角菜单“转发”按钮的行为，并自定义转发内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此事件需要 return 一个 Object，用于自定义转发内容&lt;/p&gt;
</description>
            </method>
            <method name="onPageScroll">
                <parameters>
                    <parameter name="options" type="IPageScrollOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;页面滚动触发事件的处理函数&lt;/p&gt;
&lt;p&gt;监听用户滑动页面事件。&lt;/p&gt;
</description>
            </method>
            <method name="onTabItemTap">
                <parameters>
                    <parameter name="options" type="ITabItemTapOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;当前是 tab 页时，点击 tab 时触发，最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onResize">
                <parameters>
                    <parameter name="options" type="IResizeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;窗口尺寸改变时触发，最低基础库：&lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="InstanceProperties" superclass="None">
        <methods/>
        <properties>
            <property name="is" type="String">
                <description>&lt;p&gt;组件的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="id" type="String">
                <description>&lt;p&gt;节点id&lt;/p&gt;
</description>
            </property>
            <property name="dataset" type="Record">
                <description>&lt;p&gt;节点dataset&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Data" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="D">
                <description>&lt;p&gt;组件的内部数据，和 &lt;code&gt;properties&lt;/code&gt; 一同用于组件的模板渲染&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ICustomShareContent" superclass="None">
        <methods/>
        <properties>
            <property name="title" type="String">
                <description>&lt;p&gt;转发标题。默认值：当前小程序名称&lt;/p&gt;
</description>
            </property>
            <property name="path" type="String">
                <description>&lt;p&gt;转发路径，必须是以 / 开头的完整路径。默认值：当前页面 path&lt;/p&gt;
</description>
            </property>
            <property name="imageUrl" type="String">
                <description>&lt;p&gt;自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径。支持PNG及JPG。显示图片长宽比是 5:4，最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;。默认值：使用默认截图&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="IPageScrollOption" superclass="None">
        <methods/>
        <properties>
            <property name="scrollTop" type="Number">
                <description>&lt;p&gt;页面在垂直方向已滚动的距离（单位px）&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="IShareAppMessageOption" superclass="None">
        <methods/>
        <properties>
            <property name="from" type="None">
                <description>&lt;p&gt;转发事件来源。&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;button&lt;/code&gt;：页面内转发按钮；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt;：右上角转发菜单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.4&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="target" type="Object">
                <description>&lt;p&gt;如果 &lt;code&gt;from&lt;/code&gt; 值是 &lt;code&gt;button&lt;/code&gt;，则 &lt;code&gt;target&lt;/code&gt; 是触发这次转发事件的 &lt;code&gt;button&lt;/code&gt;，否则为 &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.4&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="webViewUrl" type="String">
                <description>&lt;p&gt;页面中包含&lt;code&gt;&amp;lt;web-view&amp;gt;&lt;/code&gt;组件时，返回当前&lt;code&gt;&amp;lt;web-view&amp;gt;&lt;/code&gt;的url&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.4&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ITabItemTapOption" superclass="None">
        <methods/>
        <properties>
            <property name="index" type="String">
                <description>&lt;p&gt;被点击tabItem的序号，从0开始，最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="pagePath" type="String">
                <description>&lt;p&gt;被点击tabItem的页面路径，最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="text" type="String">
                <description>&lt;p&gt;被点击tabItem的按钮文字，最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="IResizeOption" superclass="None">
        <methods/>
        <properties>
            <property name="size" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="getCurrentPages" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="AccessFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail no such file or directory ${path}&amp;#39;: 文件/目录不存在;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AccessOption" superclass="None">
        <methods/>
        <properties>
            <property name="path" type="String">
                <description>&lt;p&gt;要判断是否存在的文件/目录路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="AccessCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="AccessFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="AccessSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AccountInfo" superclass="None">
        <methods/>
        <properties>
            <property name="miniProgram" type="MiniProgram">
                <description>&lt;p&gt;小程序帐号信息&lt;/p&gt;
</description>
            </property>
            <property name="plugin" type="Plugin">
                <description>&lt;p&gt;插件帐号信息（仅在插件中调用时包含这一项）&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AddCardOption" superclass="None">
        <methods/>
        <properties>
            <property name="cardList" type="None">
                <description>&lt;p&gt;需要添加的卡券列表&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="AddCardCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="AddCardFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="AddCardSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AddCardRequestInfo" superclass="None">
        <methods/>
        <properties>
            <property name="cardExt" type="String">
                <description>&lt;p&gt;卡券的扩展参数。需将 CardExt 对象 JSON 序列化为&lt;strong&gt;字符串&lt;/strong&gt;传入
&lt;strong&gt;CardExt 对象&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;必填&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;code&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;用户领取的 code，仅自定义 code 模式的卡券须填写，非自定义 code 模式卡券不可填写，&lt;a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1451025056"&gt;详情&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openid&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;指定领取者的 openid，只有该用户能领取。 bind_openid 字段为 true 的卡券必须填写，bind_openid 字段为 false 不可填写。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;时间戳，东八区时间,UTC+8，单位为秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nonce_str&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;随机字符串，由开发者设置传入，加强安全性（若不填写可能被重放请求）。随机字符串，不长于 32 位。推荐使用大小写字母和数字，不同添加请求的 nonce_str 须动态生成，若重复将会导致领取失败。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fixed_begintimestamp&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;卡券在第三方系统的实际领取时间，为东八区时间戳（UTC+8,精确到秒）。当卡券的有效期类为 DATE_TYPE_FIX_TERM 时专用，标识卡券的实际生效时间，用于解决商户系统内起始时间和领取微信卡券时间不同步的问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;outer_str&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;领取渠道参数，用于标识本次领取的渠道值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signature&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;签名，商户将接口列表中的参数按照指定方式进行签名,签名方式使用 SHA1，具体签名方案参见：&lt;a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1499332673_Unm7V"&gt;卡券签名&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
            <property name="cardId" type="String">
                <description>&lt;p&gt;卡券 ID&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AddCardResponseInfo" superclass="None">
        <methods/>
        <properties>
            <property name="cardExt" type="String">
                <description>&lt;p&gt;卡券的扩展参数，结构请参考下文&lt;/p&gt;
</description>
            </property>
            <property name="cardId" type="String">
                <description>&lt;p&gt;用户领取到卡券的 ID&lt;/p&gt;
</description>
            </property>
            <property name="code" type="String">
                <description>&lt;p&gt;加密 code，为用户领取到卡券的code加密后的字符串，解密请参照：&lt;a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1499332673_Unm7V"&gt;code 解码接口&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="isSuccess" type="Boolean">
                <description>&lt;p&gt;是否成功&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AddCardSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="cardList" type="None">
                <description>&lt;p&gt;卡券添加结果列表&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="AddPhoneContactOption" superclass="None">
        <methods/>
        <properties>
            <property name="firstName" type="String">
                <description>&lt;p&gt;名字&lt;/p&gt;
</description>
            </property>
            <property name="addressCity" type="String">
                <description>&lt;p&gt;联系地址城市&lt;/p&gt;
</description>
            </property>
            <property name="addressCountry" type="String">
                <description>&lt;p&gt;联系地址国家&lt;/p&gt;
</description>
            </property>
            <property name="addressPostalCode" type="String">
                <description>&lt;p&gt;联系地址邮政编码&lt;/p&gt;
</description>
            </property>
            <property name="addressState" type="String">
                <description>&lt;p&gt;联系地址省份&lt;/p&gt;
</description>
            </property>
            <property name="addressStreet" type="String">
                <description>&lt;p&gt;联系地址街道&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="AddPhoneContactCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="email" type="String">
                <description>&lt;p&gt;电子邮件&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="AddPhoneContactFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="homeAddressCity" type="String">
                <description>&lt;p&gt;住宅地址城市&lt;/p&gt;
</description>
            </property>
            <property name="homeAddressCountry" type="String">
                <description>&lt;p&gt;住宅地址国家&lt;/p&gt;
</description>
            </property>
            <property name="homeAddressPostalCode" type="String">
                <description>&lt;p&gt;住宅地址邮政编码&lt;/p&gt;
</description>
            </property>
            <property name="homeAddressState" type="String">
                <description>&lt;p&gt;住宅地址省份&lt;/p&gt;
</description>
            </property>
            <property name="homeAddressStreet" type="String">
                <description>&lt;p&gt;住宅地址街道&lt;/p&gt;
</description>
            </property>
            <property name="homeFaxNumber" type="String">
                <description>&lt;p&gt;住宅传真&lt;/p&gt;
</description>
            </property>
            <property name="homePhoneNumber" type="String">
                <description>&lt;p&gt;住宅电话&lt;/p&gt;
</description>
            </property>
            <property name="hostNumber" type="String">
                <description>&lt;p&gt;公司电话&lt;/p&gt;
</description>
            </property>
            <property name="lastName" type="String">
                <description>&lt;p&gt;姓氏&lt;/p&gt;
</description>
            </property>
            <property name="middleName" type="String">
                <description>&lt;p&gt;中间名&lt;/p&gt;
</description>
            </property>
            <property name="mobilePhoneNumber" type="String">
                <description>&lt;p&gt;手机号&lt;/p&gt;
</description>
            </property>
            <property name="nickName" type="String">
                <description>&lt;p&gt;昵称&lt;/p&gt;
</description>
            </property>
            <property name="organization" type="String">
                <description>&lt;p&gt;公司&lt;/p&gt;
</description>
            </property>
            <property name="photoFilePath" type="String">
                <description>&lt;p&gt;头像本地文件路径&lt;/p&gt;
</description>
            </property>
            <property name="remark" type="String">
                <description>&lt;p&gt;备注&lt;/p&gt;
</description>
            </property>
            <property name="success" type="AddPhoneContactSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="title" type="String">
                <description>&lt;p&gt;职位&lt;/p&gt;
</description>
            </property>
            <property name="url" type="String">
                <description>&lt;p&gt;网站&lt;/p&gt;
</description>
            </property>
            <property name="weChatNumber" type="String">
                <description>&lt;p&gt;微信号&lt;/p&gt;
</description>
            </property>
            <property name="workAddressCity" type="String">
                <description>&lt;p&gt;工作地址城市&lt;/p&gt;
</description>
            </property>
            <property name="workAddressCountry" type="String">
                <description>&lt;p&gt;工作地址国家&lt;/p&gt;
</description>
            </property>
            <property name="workAddressPostalCode" type="String">
                <description>&lt;p&gt;工作地址邮政编码&lt;/p&gt;
</description>
            </property>
            <property name="workAddressState" type="String">
                <description>&lt;p&gt;工作地址省份&lt;/p&gt;
</description>
            </property>
            <property name="workAddressStreet" type="String">
                <description>&lt;p&gt;工作地址街道&lt;/p&gt;
</description>
            </property>
            <property name="workFaxNumber" type="String">
                <description>&lt;p&gt;工作传真&lt;/p&gt;
</description>
            </property>
            <property name="workPhoneNumber" type="String">
                <description>&lt;p&gt;工作电话&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AnimationOption" superclass="None">
        <methods/>
        <properties>
            <property name="duration" type="Number">
                <description>&lt;p&gt;动画变化时间，单位 ms&lt;/p&gt;
</description>
            </property>
            <property name="timingFunc" type="None">
                <description>&lt;p&gt;动画变化方式&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;linear&amp;#39;: 动画从头到尾的速度是相同的;&lt;/li&gt;
&lt;li&gt;&amp;#39;easeIn&amp;#39;: 动画以低速开始;&lt;/li&gt;
&lt;li&gt;&amp;#39;easeOut&amp;#39;: 动画以低速结束;&lt;/li&gt;
&lt;li&gt;&amp;#39;easeInOut&amp;#39;: 动画以低速开始和结束;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AppendFileFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail no such file or directory, open ${filePath}&amp;#39;: 指定的 filePath 文件不存在;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail illegal operation on a directory, open &amp;quot;${filePath}&amp;quot;&amp;#39;: 指定的 filePath 是一个已经存在的目录;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail permission denied, open ${dirPath}&amp;#39;: 指定的 filePath 路径没有写权限;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail sdcard not mounted&amp;#39;: 指定的 filePath 是一个已经存在的目录;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AppendFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description>&lt;p&gt;要追加的文本或二进制数据&lt;/p&gt;
</description>
            </property>
            <property name="filePath" type="String">
                <description>&lt;p&gt;要追加内容的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="AppendFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="encoding" type="None">
                <description>&lt;p&gt;指定写入文件的字符编码&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;ascii&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;base64&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;binary&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;hex&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;ucs2&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;ucs-2&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf16le&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf-16le&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf-8&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf8&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;latin1&amp;#39;: ;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="fail" type="AppendFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="AppendFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AuthSetting" superclass="None">
        <methods/>
        <properties>
            <property name="scope.address" type="Boolean">
                <description>&lt;p&gt;是否授权通讯地址，对应接口 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/address/wx.chooseAddress.html"&gt;wx.chooseAddress&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="scope.camera" type="Boolean">
                <description>&lt;p&gt;是否授权摄像头，对应&lt;a href="(camera)"&gt;&lt;a href="(camera)"&gt;camera&lt;/a&gt;&lt;/a&gt; 组件&lt;/p&gt;
</description>
            </property>
            <property name="scope.invoice" type="Boolean">
                <description>&lt;p&gt;是否授权获取发票，对应接口 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoice.html"&gt;wx.chooseInvoice&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="scope.invoiceTitle" type="Boolean">
                <description>&lt;p&gt;是否授权发票抬头，对应接口 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoiceTitle.html"&gt;wx.chooseInvoiceTitle&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="scope.record" type="Boolean">
                <description>&lt;p&gt;是否授权录音功能，对应接口 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.startRecord.html"&gt;wx.startRecord&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="scope.userInfo" type="Boolean">
                <description>&lt;p&gt;是否授权用户信息，对应接口 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html"&gt;wx.getUserInfo&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="scope.userLocation" type="Boolean">
                <description>&lt;p&gt;是否授权地理位置，对应接口 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getLocation.html"&gt;wx.getLocation&lt;/a&gt;, &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html"&gt;wx.chooseLocation&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="scope.werun" type="Boolean">
                <description>&lt;p&gt;是否授权微信运动步数，对应接口 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/werun/wx.getWeRunData.html"&gt;wx.getWeRunData&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="scope.writePhotosAlbum" type="Boolean">
                <description>&lt;p&gt;是否授权保存到相册 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html"&gt;wx.saveImageToPhotosAlbum&lt;/a&gt;, &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.saveVideoToPhotosAlbum.html"&gt;wx.saveVideoToPhotosAlbum&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="AuthorizeOption" superclass="None">
        <methods/>
        <properties>
            <property name="scope" type="String">
                <description>&lt;p&gt;需要获取权限的 scope，详见 &lt;a href="(authorize#scope-%E5%88%97%E8%A1%A8)"&gt;scope 列表&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="AuthorizeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="AuthorizeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="AuthorizeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="BLECharacteristic" superclass="None">
        <methods/>
        <properties>
            <property name="properties" type="Properties">
                <description>&lt;p&gt;该特征值支持的操作类型&lt;/p&gt;
</description>
            </property>
            <property name="uuid" type="String">
                <description>&lt;p&gt;蓝牙设备特征值的 uuid&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="BLEService" superclass="None">
        <methods/>
        <properties>
            <property name="isPrimary" type="Boolean">
                <description>&lt;p&gt;该服务是否为主服务&lt;/p&gt;
</description>
            </property>
            <property name="uuid" type="String">
                <description>&lt;p&gt;蓝牙设备服务的 uuid&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="BackgroundAudioManager" superclass="None">
        <methods>
            <method name="onCanplay">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnCanplayCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onCanplay.html"&gt;BackgroundAudioManager.onCanplay(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频进入可播放状态事件。 但不保证后面可以流畅播放&lt;/p&gt;
</description>
            </method>
            <method name="onEnded">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnEndedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onEnded.html"&gt;BackgroundAudioManager.onEnded(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频自然播放结束事件&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onError.html"&gt;BackgroundAudioManager.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频播放错误事件&lt;/p&gt;
</description>
            </method>
            <method name="onNext">
                <parameters>
                    <parameter name="callback" type="OnNextCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onNext.html"&gt;BackgroundAudioManager.onNext(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听用户在系统音乐播放面板点击下一曲事件（仅iOS）&lt;/p&gt;
</description>
            </method>
            <method name="onPause">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnPauseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onPause.html"&gt;BackgroundAudioManager.onPause(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频暂停事件&lt;/p&gt;
</description>
            </method>
            <method name="onPlay">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnPlayCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onPlay.html"&gt;BackgroundAudioManager.onPlay(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频播放事件&lt;/p&gt;
</description>
            </method>
            <method name="onPrev">
                <parameters>
                    <parameter name="callback" type="OnPrevCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onPrev.html"&gt;BackgroundAudioManager.onPrev(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听用户在系统音乐播放面板点击上一曲事件（仅iOS）&lt;/p&gt;
</description>
            </method>
            <method name="onSeeked">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnSeekedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onSeeked.html"&gt;BackgroundAudioManager.onSeeked(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频完成跳转操作事件&lt;/p&gt;
</description>
            </method>
            <method name="onSeeking">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnSeekingCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onSeeking.html"&gt;BackgroundAudioManager.onSeeking(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频开始跳转操作事件&lt;/p&gt;
</description>
            </method>
            <method name="onStop">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onStop.html"&gt;BackgroundAudioManager.onStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频停止事件&lt;/p&gt;
</description>
            </method>
            <method name="onTimeUpdate">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnTimeUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onTimeUpdate.html"&gt;BackgroundAudioManager.onTimeUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听背景音频播放进度更新事件，只有小程序在前台时会回调。&lt;/p&gt;
</description>
            </method>
            <method name="onWaiting">
                <parameters>
                    <parameter name="callback" type="BackgroundAudioManagerOnWaitingCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.onWaiting.html"&gt;BackgroundAudioManager.onWaiting(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频加载中事件。当音频因为数据不足，需要停下来加载时会触发&lt;/p&gt;
</description>
            </method>
            <method name="pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.pause.html"&gt;BackgroundAudioManager.pause()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停音乐&lt;/p&gt;
</description>
            </method>
            <method name="play">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.play.html"&gt;BackgroundAudioManager.play()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;播放音乐&lt;/p&gt;
</description>
            </method>
            <method name="seek">
                <parameters>
                    <parameter name="currentTime" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.seek.html"&gt;BackgroundAudioManager.seek(number currentTime)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跳转到指定位置&lt;/p&gt;
</description>
            </method>
            <method name="stop">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.stop.html"&gt;BackgroundAudioManager.stop()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止音乐&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="buffered" type="Number">
                <description>&lt;p&gt;音频已缓冲的时间，仅保证当前播放时间点到此时间点内容已缓冲。（只读）&lt;/p&gt;
</description>
            </property>
            <property name="coverImgUrl" type="String">
                <description>&lt;p&gt;封面图 URL，用于做原生音频播放器背景图。原生音频播放器中的分享功能，分享出去的卡片配图及背景也将使用该图。&lt;/p&gt;
</description>
            </property>
            <property name="currentTime" type="Number">
                <description>&lt;p&gt;当前音频的播放位置（单位：s），只有在有合法 src 时返回。（只读）&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;当前音频的长度（单位：s），只有在有合法 src 时返回。（只读）&lt;/p&gt;
</description>
            </property>
            <property name="epname" type="String">
                <description>&lt;p&gt;专辑名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。&lt;/p&gt;
</description>
            </property>
            <property name="paused" type="Boolean">
                <description>&lt;p&gt;当前是否暂停或停止。（只读）&lt;/p&gt;
</description>
            </property>
            <property name="protocol" type="String">
                <description>&lt;p&gt;音频协议。默认值为 &amp;#39;http&amp;#39;，设置 &amp;#39;hls&amp;#39; 可以支持播放 HLS 协议的直播音频。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.94&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="singer" type="String">
                <description>&lt;p&gt;歌手名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。&lt;/p&gt;
</description>
            </property>
            <property name="src" type="String">
                <description>&lt;p&gt;音频的数据源（{% version(&amp;#39;2.2.3&amp;#39;) %} 开始支持云文件ID）。默认为空字符串，&lt;strong&gt;当设置了新的 src 时，会自动开始播放&lt;/strong&gt;，目前支持的格式有 m4a, aac, mp3, wav。&lt;/p&gt;
</description>
            </property>
            <property name="startTime" type="Number">
                <description>&lt;p&gt;音频开始播放的位置（单位：s）。&lt;/p&gt;
</description>
            </property>
            <property name="title" type="String">
                <description>&lt;p&gt;音频标题，用于原生音频播放器音频标题（必填）。原生音频播放器中的分享功能，分享出去的卡片标题，也将使用该值。&lt;/p&gt;
</description>
            </property>
            <property name="webUrl" type="String">
                <description>&lt;p&gt;页面链接，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="BluetoothDeviceInfo" superclass="None">
        <methods/>
        <properties>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;用于区分设备的 id&lt;/p&gt;
</description>
            </property>
            <property name="name" type="String">
                <description>&lt;p&gt;蓝牙设备名称，某些设备可能没有&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="BoundingClientRectCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;节点的下边界坐标&lt;/p&gt;
</description>
            </property>
            <property name="dataset" type="IAnyObject">
                <description>&lt;p&gt;节点的 dataset&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;节点的高度&lt;/p&gt;
</description>
            </property>
            <property name="id" type="String">
                <description>&lt;p&gt;节点的 ID&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;节点的左边界坐标&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;节点的右边界坐标&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;节点的上边界坐标&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;节点的宽度&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="BoundingClientRectResult" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;下边界&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;左边界&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;右边界&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;上边界&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CallbackBlueToothDevice" superclass="None">
        <methods/>
        <properties>
            <property name="RSSI" type="Number">
                <description>&lt;p&gt;当前蓝牙设备的信号强度&lt;/p&gt;
</description>
            </property>
            <property name="advertisData" type="ArrayBuffer">
                <description>&lt;p&gt;当前蓝牙设备的广播数据段中的 ManufacturerData 数据段。&lt;/p&gt;
</description>
            </property>
            <property name="advertisServiceUUIDs" type="None">
                <description>&lt;p&gt;当前蓝牙设备的广播数据段中的 ServiceUUIDs 数据段&lt;/p&gt;
</description>
            </property>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;用于区分设备的 id&lt;/p&gt;
</description>
            </property>
            <property name="localName" type="String">
                <description>&lt;p&gt;当前蓝牙设备的广播数据段中的 LocalName 数据段&lt;/p&gt;
</description>
            </property>
            <property name="name" type="String">
                <description>&lt;p&gt;蓝牙设备名称，某些设备可能没有&lt;/p&gt;
</description>
            </property>
            <property name="serviceData" type="IAnyObject">
                <description>&lt;p&gt;当前蓝牙设备的广播数据段中的 ServiceData 数据段&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CameraContextStartRecordOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="CameraContextStartRecordCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CameraContextStartRecordFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CameraContextStartRecordSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="timeoutCallback" type="StartRecordTimeoutCallback">
                <description>&lt;p&gt;超过30s或页面 &lt;code&gt;onHide&lt;/code&gt; 时会结束录像&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CameraContextStopRecordOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="CameraContextStopRecordCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CameraContextStopRecordFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CameraContextStopRecordSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CameraFrameListenerStartOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="CameraFrameListenerStartCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CameraFrameListenerStartFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CameraFrameListenerStartSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CameraFrameListenerStopOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="CameraFrameListenerStopCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CameraFrameListenerStopFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CameraFrameListenerStopSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CanvasContext" superclass="None">
        <methods>
            <method name="arc">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="r" type="Number"/>
                    <parameter name="sAngle" type="Number"/>
                    <parameter name="eAngle" type="Number"/>
                    <parameter name="counterclockwise" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.arc.html"&gt;CanvasContext.arc(number x, number y, number r, number sAngle, number eAngle, boolean counterclockwise)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一条弧线。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个圆可以指定起始弧度为 0，终止弧度为 2 * Math.PI。&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;stroke&lt;/code&gt; 或者 &lt;code&gt;fill&lt;/code&gt; 方法来在 &lt;code&gt;canvas&lt;/code&gt; 中画弧线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

// Draw coordinates
ctx.arc(100, 75, 50, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;#EEEEEE&amp;#39;)
ctx.fill()

ctx.beginPath()
ctx.moveTo(40, 75)
ctx.lineTo(160, 75)
ctx.moveTo(100, 15)
ctx.lineTo(100, 135)
ctx.setStrokeStyle(&amp;#39;#AAAAAA&amp;#39;)
ctx.stroke()

ctx.setFontSize(12)
ctx.setFillStyle(&amp;#39;black&amp;#39;)
ctx.fillText(&amp;#39;0&amp;#39;, 165, 78)
ctx.fillText(&amp;#39;0.5*PI&amp;#39;, 83, 145)
ctx.fillText(&amp;#39;1*PI&amp;#39;, 15, 78)
ctx.fillText(&amp;#39;1.5*PI&amp;#39;, 83, 10)

// Draw points
ctx.beginPath()
ctx.arc(100, 75, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;lightgreen&amp;#39;)
ctx.fill()

ctx.beginPath()
ctx.arc(100, 25, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;blue&amp;#39;)
ctx.fill()

ctx.beginPath()
ctx.arc(150, 75, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fill()

// Draw arc
ctx.beginPath()
ctx.arc(100, 75, 50, 0, 1.5 * Math.PI)
ctx.setStrokeStyle(&amp;#39;#333333&amp;#39;)
ctx.stroke()

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/arc.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;针对 arc(100, 75, 50, 0, 1.5 * Math.PI)的三个关键坐标如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绿色: 圆心 (100, 75)&lt;/li&gt;
&lt;li&gt;红色: 起始弧度 (0)&lt;/li&gt;
&lt;li&gt;蓝色: 终止弧度 (1.5 * Math.PI)&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="arcTo">
                <parameters>
                    <parameter name="x1" type="Number"/>
                    <parameter name="y1" type="Number"/>
                    <parameter name="x2" type="Number"/>
                    <parameter name="y2" type="Number"/>
                    <parameter name="radius" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.arcTo.html"&gt;CanvasContext.arcTo(number x1, number y1, number x2, number y2, number radius)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据控制点和半径绘制圆弧路径。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="beginPath">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.beginPath.html"&gt;CanvasContext.beginPath()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始创建一个路径。需要调用 &lt;code&gt;fill&lt;/code&gt; 或者 &lt;code&gt;stroke&lt;/code&gt; 才会使用路径进行填充或描边&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在最开始的时候相当于调用了一次 &lt;code&gt;beginPath&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;同一个路径内的多次 &lt;code&gt;setFillStyle&lt;/code&gt;、&lt;code&gt;setStrokeStyle&lt;/code&gt;、&lt;code&gt;setLineWidth&lt;/code&gt;等设置，以最后一次设置为准。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
// begin path
ctx.rect(10, 10, 100, 30)
ctx.setFillStyle(&amp;#39;yellow&amp;#39;)
ctx.fill()

// begin another path
ctx.beginPath()
ctx.rect(10, 40, 100, 30)

// only fill this rect, not in current path
ctx.setFillStyle(&amp;#39;blue&amp;#39;)
ctx.fillRect(10, 70, 100, 30)

ctx.rect(10, 100, 100, 30)

// it will fill current path
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fill()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/fill-path.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="bezierCurveTo">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.bezierCurveTo.html"&gt;CanvasContext.bezierCurveTo()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建三次方贝塞尔曲线路径。曲线的起始点为路径中前一个点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

// Draw points
ctx.beginPath()
ctx.arc(20, 20, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fill()

ctx.beginPath()
ctx.arc(200, 20, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;lightgreen&amp;#39;)
ctx.fill()

ctx.beginPath()
ctx.arc(20, 100, 2, 0, 2 * Math.PI)
ctx.arc(200, 100, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;blue&amp;#39;)
ctx.fill()

ctx.setFillStyle(&amp;#39;black&amp;#39;)
ctx.setFontSize(12)

// Draw guides
ctx.beginPath()
ctx.moveTo(20, 20)
ctx.lineTo(20, 100)
ctx.lineTo(150, 75)

ctx.moveTo(200, 20)
ctx.lineTo(200, 100)
ctx.lineTo(70, 75)
ctx.setStrokeStyle(&amp;#39;#AAAAAA&amp;#39;)
ctx.stroke()

// Draw quadratic curve
ctx.beginPath()
ctx.moveTo(20, 20)
ctx.bezierCurveTo(20, 100, 200, 100, 200, 20)
ctx.setStrokeStyle(&amp;#39;black&amp;#39;)
ctx.stroke()

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/bezier-curve.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;针对 moveTo(20, 20) bezierCurveTo(20, 100, 200, 100, 200, 20) 的三个关键坐标如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红色：起始点(20, 20)&lt;/li&gt;
&lt;li&gt;蓝色：两个控制点(20, 100) (200, 100)&lt;/li&gt;
&lt;li&gt;绿色：终止点(200, 20)&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="clearRect">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="width" type="Number"/>
                    <parameter name="height" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.clearRect.html"&gt;CanvasContext.clearRect(number x, number y, number width, number height)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;清除画布上在该矩形区域内的内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;clearRect 并非画一个白色的矩形在地址区域，而是清空，为了有直观感受，对 canvas 加了一层背景色。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;* &amp;lt;canvas canvas-id=&amp;quot;myCanvas&amp;quot; style=&amp;quot;border: 1px solid; background: #123456;&amp;quot;/&amp;gt;
* ```
```javascript
const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fillRect(0, 0, 150, 200)
ctx.setFillStyle(&amp;#39;blue&amp;#39;)
ctx.fillRect(150, 0, 150, 200)
ctx.clearRect(10, 10, 150, 75)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/clear-rect.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="clip">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.clip.html"&gt;CanvasContext.clip()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从原始画布中剪切任意形状和尺寸。一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。可以在使用 &lt;code&gt;clip&lt;/code&gt; 方法前通过使用 &lt;code&gt;save&lt;/code&gt; 方法对当前画布区域进行保存，并在以后的任意时间通过&lt;code&gt;restore&lt;/code&gt;方法对其进行恢复。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

wx.downloadFile({
  url: &amp;#39;http://is5.mzstatic.com/image/thumb/Purple128/v4/75/3b/90/753b907c-b7fb-5877-215a-759bd73691a4/source/50x50bb.jpg&amp;#39;,
  success: function(res) {
    ctx.save()
    ctx.beginPath()
    ctx.arc(50, 50, 25, 0, 2*Math.PI)
    ctx.clip()
    ctx.drawImage(res.tempFilePath, 25, 25)
    ctx.restore()
    ctx.draw()
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/clip.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="closePath">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.closePath.html"&gt;CanvasContext.closePath()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭一个路径。会连接起点和终点。如果关闭路径后没有调用 &lt;code&gt;fill&lt;/code&gt; 或者 &lt;code&gt;stroke&lt;/code&gt; 并开启了新的路径，那之前的路径将不会被渲染。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.moveTo(10, 10)
ctx.lineTo(100, 10)
ctx.lineTo(100, 100)
ctx.closePath()
ctx.stroke()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/close-line.png" alt=""&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
// begin path
ctx.rect(10, 10, 100, 30)
ctx.closePath()

// begin another path
ctx.beginPath()
ctx.rect(10, 40, 100, 30)

// only fill this rect, not in current path
ctx.setFillStyle(&amp;#39;blue&amp;#39;)
ctx.fillRect(10, 70, 100, 30)

ctx.rect(10, 100, 100, 30)

// it will fill current path
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fill()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/close-path.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createPattern">
                <parameters>
                    <parameter name="image" type="String"/>
                    <parameter name="repetition" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.createPattern.html"&gt;CanvasContext.createPattern(string image, string repetition)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对指定的图像创建模式的方法，可在指定的方向上重复元图像&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="draw">
                <parameters>
                    <parameter name="reserve" type="Boolean"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.draw.html"&gt;CanvasContext.draw(boolean reserve, function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将之前在绘图上下文中的描述（路径、变形、样式）画到 canvas 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二次 draw() reserve 为 true。所以保留了上一次的绘制结果，在上下文设置的 fillStyle &amp;#39;red&amp;#39; 也变成了默认的 &amp;#39;black&amp;#39;。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fillRect(10, 10, 150, 100)
ctx.draw()
ctx.fillRect(50, 50, 150, 100)
ctx.draw(true)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/reserve.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二次 draw() reserve 为 false。所以没有保留了上一次的绘制结果和在上下文设置的 fillStyle &amp;#39;red&amp;#39;。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fillRect(10, 10, 150, 100)
ctx.draw()
ctx.fillRect(50, 50, 150, 100)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/un-reserve.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="drawImage">
                <parameters>
                    <parameter name="imageResource" type="String"/>
                    <parameter name="dx" type="Number"/>
                    <parameter name="dy" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.drawImage.html"&gt;CanvasContext.drawImage(string imageResource, number sx, number sy, number sWidth, number sHeight, number dx, number dy, number dWidth, number dHeight)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;绘制图像到画布&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有三个版本的写法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drawImage(imageResource, dx, dy)&lt;/li&gt;
&lt;li&gt;drawImage(imageResource, dx, dy, dWidth, dHeight)&lt;/li&gt;
&lt;li&gt;drawImage(imageResource, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) 从 1.9.0 起支持&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

wx.chooseImage({
  success: function(res){
    ctx.drawImage(res.tempFilePaths[0], 0, 0, 150, 100)
    ctx.draw()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/draw-image.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="drawImage">
                <parameters>
                    <parameter name="imageResource" type="String"/>
                    <parameter name="dx" type="Number"/>
                    <parameter name="dy" type="Number"/>
                    <parameter name="dWidth" type="Number"/>
                    <parameter name="dHeight" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.drawImage.html"&gt;CanvasContext.drawImage(string imageResource, number sx, number sy, number sWidth, number sHeight, number dx, number dy, number dWidth, number dHeight)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;绘制图像到画布&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有三个版本的写法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drawImage(imageResource, dx, dy)&lt;/li&gt;
&lt;li&gt;drawImage(imageResource, dx, dy, dWidth, dHeight)&lt;/li&gt;
&lt;li&gt;drawImage(imageResource, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) 从 1.9.0 起支持&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

wx.chooseImage({
  success: function(res){
    ctx.drawImage(res.tempFilePaths[0], 0, 0, 150, 100)
    ctx.draw()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/draw-image.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="drawImage">
                <parameters>
                    <parameter name="imageResource" type="String"/>
                    <parameter name="sx" type="Number"/>
                    <parameter name="sy" type="Number"/>
                    <parameter name="sWidth" type="Number"/>
                    <parameter name="sHeight" type="Number"/>
                    <parameter name="dx" type="Number"/>
                    <parameter name="dy" type="Number"/>
                    <parameter name="dWidth" type="Number"/>
                    <parameter name="dHeight" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.drawImage.html"&gt;CanvasContext.drawImage(string imageResource, number sx, number sy, number sWidth, number sHeight, number dx, number dy, number dWidth, number dHeight)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;绘制图像到画布&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有三个版本的写法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drawImage(imageResource, dx, dy)&lt;/li&gt;
&lt;li&gt;drawImage(imageResource, dx, dy, dWidth, dHeight)&lt;/li&gt;
&lt;li&gt;drawImage(imageResource, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) 从 1.9.0 起支持&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

wx.chooseImage({
  success: function(res){
    ctx.drawImage(res.tempFilePaths[0], 0, 0, 150, 100)
    ctx.draw()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/draw-image.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="fill">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.fill.html"&gt;CanvasContext.fill()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对当前路径中的内容进行填充。默认的填充色为黑色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果当前路径没有闭合，fill() 方法会将起点和终点进行连接，然后填充。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.moveTo(10, 10)
ctx.lineTo(100, 10)
ctx.lineTo(100, 100)
ctx.fill()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fill() 填充的的路径是从 beginPath() 开始计算，但是不会将 fillRect() 包含进去。&lt;/p&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/fill-line.png" alt=""&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
// begin path
ctx.rect(10, 10, 100, 30)
ctx.setFillStyle(&amp;#39;yellow&amp;#39;)
ctx.fill()

// begin another path
ctx.beginPath()
ctx.rect(10, 40, 100, 30)

// only fill this rect, not in current path
ctx.setFillStyle(&amp;#39;blue&amp;#39;)
ctx.fillRect(10, 70, 100, 30)

ctx.rect(10, 100, 100, 30)

// it will fill current path
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fill()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/fill-path.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="fillRect">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="width" type="Number"/>
                    <parameter name="height" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.fillRect.html"&gt;CanvasContext.fillRect(number x, number y, number width, number height)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;填充一个矩形。用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setFillStyle.html"&gt;&lt;code&gt;setFillStyle&lt;/code&gt;&lt;/a&gt; 设置矩形的填充色，如果没设置默认是黑色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fillRect(10, 10, 150, 75)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/fill-rect.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="fillText">
                <parameters>
                    <parameter name="text" type="String"/>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="maxWidth" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.fillText.html"&gt;CanvasContext.fillText(string text, number x, number y, number maxWidth)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在画布上绘制被填充的文本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.setFontSize(20)
ctx.fillText(&amp;#39;Hello&amp;#39;, 20, 20)
ctx.fillText(&amp;#39;MINA&amp;#39;, 100, 100)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/text.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="lineTo">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.lineTo.html"&gt;CanvasContext.lineTo(number x, number y)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;增加一个新点，然后创建一条从上次指定点到目标点的线。用 &lt;code&gt;stroke&lt;/code&gt; 方法来画线条&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.moveTo(10, 10)
ctx.rect(10, 10, 100, 50)
ctx.lineTo(110, 60)
ctx.stroke()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/line-to.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="moveTo">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.moveTo.html"&gt;CanvasContext.moveTo(number x, number y)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把路径移动到画布中的指定点，不创建线条。用 &lt;code&gt;stroke&lt;/code&gt; 方法来画线条&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.moveTo(10, 10)
ctx.lineTo(100, 10)

ctx.moveTo(10, 50)
ctx.lineTo(100, 50)
ctx.stroke()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/move-to.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="quadraticCurveTo">
                <parameters>
                    <parameter name="cpx" type="Number"/>
                    <parameter name="cpy" type="Number"/>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.quadraticCurveTo.html"&gt;CanvasContext.quadraticCurveTo(number cpx, number cpy, number x, number y)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建二次贝塞尔曲线路径。曲线的起始点为路径中前一个点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

// Draw points
ctx.beginPath()
ctx.arc(20, 20, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fill()

ctx.beginPath()
ctx.arc(200, 20, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;lightgreen&amp;#39;)
ctx.fill()

ctx.beginPath()
ctx.arc(20, 100, 2, 0, 2 * Math.PI)
ctx.setFillStyle(&amp;#39;blue&amp;#39;)
ctx.fill()

ctx.setFillStyle(&amp;#39;black&amp;#39;)
ctx.setFontSize(12)

// Draw guides
ctx.beginPath()
ctx.moveTo(20, 20)
ctx.lineTo(20, 100)
ctx.lineTo(200, 20)
ctx.setStrokeStyle(&amp;#39;#AAAAAA&amp;#39;)
ctx.stroke()

// Draw quadratic curve
ctx.beginPath()
ctx.moveTo(20, 20)
ctx.quadraticCurveTo(20, 100, 200, 20)
ctx.setStrokeStyle(&amp;#39;black&amp;#39;)
ctx.stroke()

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/quadratic-curve-to.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;针对 moveTo(20, 20) quadraticCurveTo(20, 100, 200, 20) 的三个关键坐标如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红色：起始点(20, 20)&lt;/li&gt;
&lt;li&gt;蓝色：控制点(20, 100)&lt;/li&gt;
&lt;li&gt;绿色：终止点(200, 20)&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="rect">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="width" type="Number"/>
                    <parameter name="height" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.rect.html"&gt;CanvasContext.rect(number x, number y, number width, number height)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个矩形路径。需要用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.fill.html"&gt;&lt;code&gt;fill&lt;/code&gt;&lt;/a&gt; 或者 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.stroke.html"&gt;&lt;code&gt;stroke&lt;/code&gt;&lt;/a&gt; 方法将矩形真正的画到 &lt;code&gt;canvas&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.rect(10, 10, 150, 75)
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fill()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/fill-rect.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="restore">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.restore.html"&gt;CanvasContext.restore()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;恢复之前保存的绘图上下文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

// save the default fill style
ctx.save()
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fillRect(10, 10, 150, 100)

// restore to the previous saved state
ctx.restore()
ctx.fillRect(50, 50, 150, 100)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/save-restore.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="rotate">
                <parameters>
                    <parameter name="rotate" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.rotate.html"&gt;CanvasContext.rotate(number rotate)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以原点为中心顺时针旋转当前坐标轴。多次调用旋转的角度会叠加。原点可以用 &lt;code&gt;translate&lt;/code&gt; 方法修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.strokeRect(100, 10, 150, 100)
ctx.rotate(20 * Math.PI / 180)
ctx.strokeRect(100, 10, 150, 100)
ctx.rotate(20 * Math.PI / 180)
ctx.strokeRect(100, 10, 150, 100)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/rotate.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="save">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.save.html"&gt;CanvasContext.save()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保存绘图上下文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

// save the default fill style
ctx.save()
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fillRect(10, 10, 150, 100)

// restore to the previous saved state
ctx.restore()
ctx.fillRect(50, 50, 150, 100)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/save-restore.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="scale">
                <parameters>
                    <parameter name="scaleWidth" type="Number"/>
                    <parameter name="scaleHeight" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.scale.html"&gt;CanvasContext.scale(number scaleWidth, number scaleHeight)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在调用后，之后创建的路径其横纵坐标会被缩放。多次调用倍数会相乘。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.strokeRect(10, 10, 25, 15)
ctx.scale(2, 2)
ctx.strokeRect(10, 10, 25, 15)
ctx.scale(2, 2)
ctx.strokeRect(10, 10, 25, 15)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/scale.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setFillStyle">
                <parameters>
                    <parameter name="color" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setFillStyle.html"&gt;CanvasContext.setFillStyle(string|&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasGradient.html"&gt;CanvasGradient&lt;/a&gt; color)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置填充色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fillRect(10, 10, 150, 75)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/fill-rect.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setFontSize">
                <parameters>
                    <parameter name="fontSize" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setFontSize.html"&gt;CanvasContext.setFontSize(number fontSize)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置字体的字号&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.setFontSize(20)
ctx.fillText(&amp;#39;20&amp;#39;, 20, 20)
ctx.setFontSize(30)
ctx.fillText(&amp;#39;30&amp;#39;, 40, 40)
ctx.setFontSize(40)
ctx.fillText(&amp;#39;40&amp;#39;, 60, 60)
ctx.setFontSize(50)
ctx.fillText(&amp;#39;50&amp;#39;, 90, 90)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/font-size.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setGlobalAlpha">
                <parameters>
                    <parameter name="alpha" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setGlobalAlpha.html"&gt;CanvasContext.setGlobalAlpha(number alpha)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置全局画笔透明度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.fillRect(10, 10, 150, 100)
ctx.setGlobalAlpha(0.2)
ctx.setFillStyle(&amp;#39;blue&amp;#39;)
ctx.fillRect(50, 50, 150, 100)
ctx.setFillStyle(&amp;#39;yellow&amp;#39;)
ctx.fillRect(100, 100, 150, 100)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/global-alpha.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setLineCap">
                <parameters>
                    <parameter name="lineCap" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setLineCap.html"&gt;CanvasContext.setLineCap(string lineCap)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置线条的端点样式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.beginPath()
ctx.moveTo(10, 10)
ctx.lineTo(150, 10)
ctx.stroke()

ctx.beginPath()
ctx.setLineCap(&amp;#39;butt&amp;#39;)
ctx.setLineWidth(10)
ctx.moveTo(10, 30)
ctx.lineTo(150, 30)
ctx.stroke()

ctx.beginPath()
ctx.setLineCap(&amp;#39;round&amp;#39;)
ctx.setLineWidth(10)
ctx.moveTo(10, 50)
ctx.lineTo(150, 50)
ctx.stroke()

ctx.beginPath()
ctx.setLineCap(&amp;#39;square&amp;#39;)
ctx.setLineWidth(10)
ctx.moveTo(10, 70)
ctx.lineTo(150, 70)
ctx.stroke()

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/line-cap.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setLineDash">
                <parameters>
                    <parameter name="pattern" type="None"/>
                    <parameter name="offset" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setLineDash.html"&gt;CanvasContext.setLineDash(Array.&lt;number&gt; pattern, number offset)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置虚线样式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.setLineDash([10, 20], 5);

ctx.beginPath();
ctx.moveTo(0,100);
ctx.lineTo(400, 100);
ctx.stroke();

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/set-line-dash.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setLineJoin">
                <parameters>
                    <parameter name="lineJoin" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setLineJoin.html"&gt;CanvasContext.setLineJoin(string lineJoin)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置线条的交点样式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.beginPath()
ctx.moveTo(10, 10)
ctx.lineTo(100, 50)
ctx.lineTo(10, 90)
ctx.stroke()

ctx.beginPath()
ctx.setLineJoin(&amp;#39;bevel&amp;#39;)
ctx.setLineWidth(10)
ctx.moveTo(50, 10)
ctx.lineTo(140, 50)
ctx.lineTo(50, 90)
ctx.stroke()

ctx.beginPath()
ctx.setLineJoin(&amp;#39;round&amp;#39;)
ctx.setLineWidth(10)
ctx.moveTo(90, 10)
ctx.lineTo(180, 50)
ctx.lineTo(90, 90)
ctx.stroke()

ctx.beginPath()
ctx.setLineJoin(&amp;#39;miter&amp;#39;)
ctx.setLineWidth(10)
ctx.moveTo(130, 10)
ctx.lineTo(220, 50)
ctx.lineTo(130, 90)
ctx.stroke()

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/line-join.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setLineWidth">
                <parameters>
                    <parameter name="lineWidth" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setLineWidth.html"&gt;CanvasContext.setLineWidth(number lineWidth)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置线条的宽度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.beginPath()
ctx.moveTo(10, 10)
ctx.lineTo(150, 10)
ctx.stroke()

ctx.beginPath()
ctx.setLineWidth(5)
ctx.moveTo(10, 30)
ctx.lineTo(150, 30)
ctx.stroke()

ctx.beginPath()
ctx.setLineWidth(10)
ctx.moveTo(10, 50)
ctx.lineTo(150, 50)
ctx.stroke()

ctx.beginPath()
ctx.setLineWidth(15)
ctx.moveTo(10, 70)
ctx.lineTo(150, 70)
ctx.stroke()

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/line-width.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setMiterLimit">
                <parameters>
                    <parameter name="miterLimit" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setMiterLimit.html"&gt;CanvasContext.setMiterLimit(number miterLimit)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置最大斜接长度。斜接长度指的是在两条线交汇处内角和外角之间的距离。当 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setLineJoin.html"&gt;CanvasContext.setLineJoin()&lt;/a&gt; 为 miter 时才有效。超过最大倾斜长度的，连接处将以 lineJoin 为 bevel 来显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.beginPath()
ctx.setLineWidth(10)
ctx.setLineJoin(&amp;#39;miter&amp;#39;)
ctx.setMiterLimit(1)
ctx.moveTo(10, 10)
ctx.lineTo(100, 50)
ctx.lineTo(10, 90)
ctx.stroke()

ctx.beginPath()
ctx.setLineWidth(10)
ctx.setLineJoin(&amp;#39;miter&amp;#39;)
ctx.setMiterLimit(2)
ctx.moveTo(50, 10)
ctx.lineTo(140, 50)
ctx.lineTo(50, 90)
ctx.stroke()

ctx.beginPath()
ctx.setLineWidth(10)
ctx.setLineJoin(&amp;#39;miter&amp;#39;)
ctx.setMiterLimit(3)
ctx.moveTo(90, 10)
ctx.lineTo(180, 50)
ctx.lineTo(90, 90)
ctx.stroke()

ctx.beginPath()
ctx.setLineWidth(10)
ctx.setLineJoin(&amp;#39;miter&amp;#39;)
ctx.setMiterLimit(4)
ctx.moveTo(130, 10)
ctx.lineTo(220, 50)
ctx.lineTo(130, 90)
ctx.stroke()

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/miter-limit.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setShadow">
                <parameters>
                    <parameter name="offsetX" type="Number"/>
                    <parameter name="offsetY" type="Number"/>
                    <parameter name="blur" type="Number"/>
                    <parameter name="color" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setShadow.html"&gt;CanvasContext.setShadow(number offsetX, number offsetY, number blur, string color)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设定阴影样式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.setFillStyle(&amp;#39;red&amp;#39;)
ctx.setShadow(10, 50, 50, &amp;#39;blue&amp;#39;)
ctx.fillRect(10, 10, 150, 75)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/shadow.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setStrokeStyle">
                <parameters>
                    <parameter name="color" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setStrokeStyle.html"&gt;CanvasContext.setStrokeStyle(string color)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置描边颜色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.setStrokeStyle(&amp;#39;red&amp;#39;)
ctx.strokeRect(10, 10, 150, 75)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/stroke-rect.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTextAlign">
                <parameters>
                    <parameter name="align" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setTextAlign.html"&gt;CanvasContext.setTextAlign(string align)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置文字的对齐&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.setStrokeStyle(&amp;#39;red&amp;#39;)
ctx.moveTo(150, 20)
ctx.lineTo(150, 170)
ctx.stroke()

ctx.setFontSize(15)
ctx.setTextAlign(&amp;#39;left&amp;#39;)
ctx.fillText(&amp;#39;textAlign=left&amp;#39;, 150, 60)

ctx.setTextAlign(&amp;#39;center&amp;#39;)
ctx.fillText(&amp;#39;textAlign=center&amp;#39;, 150, 80)

ctx.setTextAlign(&amp;#39;right&amp;#39;)
ctx.fillText(&amp;#39;textAlign=right&amp;#39;, 150, 100)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/set-text-align.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTextBaseline">
                <parameters>
                    <parameter name="textBaseline" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setTextBaseline.html"&gt;CanvasContext.setTextBaseline(string textBaseline)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置文字的竖直对齐&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.setStrokeStyle(&amp;#39;red&amp;#39;)
ctx.moveTo(5, 75)
ctx.lineTo(295, 75)
ctx.stroke()

ctx.setFontSize(20)

ctx.setTextBaseline(&amp;#39;top&amp;#39;)
ctx.fillText(&amp;#39;top&amp;#39;, 5, 75)

ctx.setTextBaseline(&amp;#39;middle&amp;#39;)
ctx.fillText(&amp;#39;middle&amp;#39;, 50, 75)

ctx.setTextBaseline(&amp;#39;bottom&amp;#39;)
ctx.fillText(&amp;#39;bottom&amp;#39;, 120, 75)

ctx.setTextBaseline(&amp;#39;normal&amp;#39;)
ctx.fillText(&amp;#39;normal&amp;#39;, 200, 75)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/set-text-baseline.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTransform">
                <parameters>
                    <parameter name="scaleX" type="Number"/>
                    <parameter name="scaleY" type="Number"/>
                    <parameter name="skewX" type="Number"/>
                    <parameter name="skewY" type="Number"/>
                    <parameter name="translateX" type="Number"/>
                    <parameter name="translateY" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setTransform.html"&gt;CanvasContext.setTransform(number scaleX, number scaleY, number skewX, number skewY, number translateX, number translateY)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用矩阵重新设置（覆盖）当前变换的方法&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stroke">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.stroke.html"&gt;CanvasContext.stroke()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;画出当前路径的边框。默认颜色色为黑色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.moveTo(10, 10)
ctx.lineTo(100, 10)
ctx.lineTo(100, 100)
ctx.stroke()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/stroke-line.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;stroke() 描绘的的路径是从 beginPath() 开始计算，但是不会将 strokeRect() 包含进去。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
// begin path
ctx.rect(10, 10, 100, 30)
ctx.setStrokeStyle(&amp;#39;yellow&amp;#39;)
ctx.stroke()

// begin another path
ctx.beginPath()
ctx.rect(10, 40, 100, 30)

// only stoke this rect, not in current path
ctx.setStrokeStyle(&amp;#39;blue&amp;#39;)
ctx.strokeRect(10, 70, 100, 30)

ctx.rect(10, 100, 100, 30)

// it will stroke current path
ctx.setStrokeStyle(&amp;#39;red&amp;#39;)
ctx.stroke()
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/stroke-path.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="strokeRect">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="width" type="Number"/>
                    <parameter name="height" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.strokeRect.html"&gt;CanvasContext.strokeRect(number x, number y, number width, number height)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;画一个矩形(非填充)。 用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setStrokeStyle.html"&gt;&lt;code&gt;setStrokeStyle&lt;/code&gt;&lt;/a&gt; 设置矩形线条的颜色，如果没设置默认是黑色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)
ctx.setStrokeStyle(&amp;#39;red&amp;#39;)
ctx.strokeRect(10, 10, 150, 75)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/stroke-rect.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="strokeText">
                <parameters>
                    <parameter name="text" type="String"/>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="maxWidth" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.strokeText.html"&gt;CanvasContext.strokeText(string text, number x, number y, number maxWidth)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定的 (x, y) 位置绘制文本描边的方法&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="transform">
                <parameters>
                    <parameter name="scaleX" type="Number"/>
                    <parameter name="scaleY" type="Number"/>
                    <parameter name="skewX" type="Number"/>
                    <parameter name="skewY" type="Number"/>
                    <parameter name="translateX" type="Number"/>
                    <parameter name="translateY" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.transform.html"&gt;CanvasContext.transform(number scaleX, number scaleY, number skewX, number skewY, number translateX, number translateY)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用矩阵多次叠加当前变换的方法&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="translate">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.translate.html"&gt;CanvasContext.translate(number x, number y)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对当前坐标系的原点 (0, 0) 进行变换。默认的坐标系原点为页面左上角。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

ctx.strokeRect(10, 10, 150, 100)
ctx.translate(20, 20)
ctx.strokeRect(10, 10, 150, 100)
ctx.translate(20, 20)
ctx.strokeRect(10, 10, 150, 100)

ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/translate.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="measureText">
                <parameters>
                    <parameter name="text" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="TextMetrics"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.measureText.html"&gt;Object CanvasContext.measureText(string text)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;测量文本尺寸信息。目前仅返回文本宽度。同步接口。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createCircularGradient">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="r" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="CanvasGradient"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.createCircularGradient.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasGradient.html"&gt;CanvasGradient&lt;/a&gt; CanvasContext.createCircularGradient(number x, number y, number r)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个圆形的渐变颜色。起点在圆心，终点在圆环。返回的&lt;code&gt;CanvasGradient&lt;/code&gt;对象需要使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasGradient.addColorStop.html"&gt;CanvasGradient.addColorStop()&lt;/a&gt; 来指定渐变点，至少要两个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

// Create circular gradient
const grd = ctx.createCircularGradient(75, 50, 50)
grd.addColorStop(0, &amp;#39;red&amp;#39;)
grd.addColorStop(1, &amp;#39;white&amp;#39;)

// Fill with gradient
ctx.setFillStyle(grd)
ctx.fillRect(10, 10, 150, 80)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/circular-gradient.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createLinearGradient">
                <parameters>
                    <parameter name="x0" type="Number"/>
                    <parameter name="y0" type="Number"/>
                    <parameter name="x1" type="Number"/>
                    <parameter name="y1" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="CanvasGradient"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.createLinearGradient.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasGradient.html"&gt;CanvasGradient&lt;/a&gt; CanvasContext.createLinearGradient(number x0, number y0, number x1, number y1)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个线性的渐变颜色。返回的&lt;code&gt;CanvasGradient&lt;/code&gt;对象需要使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasGradient.addColorStop.html"&gt;CanvasGradient.addColorStop()&lt;/a&gt; 来指定渐变点，至少要两个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

// Create linear gradient
const grd = ctx.createLinearGradient(0, 0, 200, 0)
grd.addColorStop(0, &amp;#39;red&amp;#39;)
grd.addColorStop(1, &amp;#39;white&amp;#39;)

// Fill with gradient
ctx.setFillStyle(grd)
ctx.fillRect(10, 10, 150, 80)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/linear-gradient.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="fillStyle" type="None">
                <description>&lt;p&gt;填充颜色。用法同 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setFillStyle.html"&gt;CanvasContext.setFillStyle()&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="font" type="String">
                <description>&lt;p&gt;当前字体样式的属性。符合 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font"&gt;CSS font 语法&lt;/a&gt; 的 DOMString 字符串，至少需要提供字体大小和字体族名。默认值为 10px sans-serif。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="globalAlpha" type="Number">
                <description>&lt;p&gt;全局画笔透明度。范围 0-1，0 表示完全透明，1 表示完全不透明。&lt;/p&gt;
</description>
            </property>
            <property name="globalCompositeOperation" type="String">
                <description>&lt;p&gt;在绘制新形状时应用的合成操作的类型。目前安卓版本只适用于 &lt;code&gt;fill&lt;/code&gt; 填充块的合成，用于 &lt;code&gt;stroke&lt;/code&gt; 线段的合成效果都是 &lt;code&gt;source-over&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;目前支持的操作有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安卓：xor, source-over, source-atop, destination-out, lighter, overlay, darken, lighten, hard-light&lt;/li&gt;
&lt;li&gt;iOS：xor, source-over, source-atop, destination-over, destination-out, lighter, multiply, overlay, darken, lighten, color-dodge, color-burn, hard-light, soft-light, difference, exclusion, saturation, luminosity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="lineCap" type="String">
                <description>&lt;p&gt;线条的端点样式。用法同 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setLineCap.html"&gt;CanvasContext.setLineCap()&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="lineDashOffset" type="Number">
                <description>&lt;p&gt;虚线偏移量，初始值为0&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="lineJoin" type="None">
                <description>&lt;p&gt;线条的交点样式。用法同 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setLineJoin.html"&gt;CanvasContext.setLineJoin()&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;bevel&amp;#39;: 斜角;&lt;/li&gt;
&lt;li&gt;&amp;#39;round&amp;#39;: 圆角;&lt;/li&gt;
&lt;li&gt;&amp;#39;miter&amp;#39;: 尖角;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="lineWidth" type="Number">
                <description>&lt;p&gt;线条的宽度。用法同 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setLineWidth.html"&gt;CanvasContext.setLineWidth()&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="miterLimit" type="Number">
                <description>&lt;p&gt;最大斜接长度。用法同 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setMiterLimit.html"&gt;CanvasContext.setMiterLimit()&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="shadowBlur" type="Number">
                <description>&lt;p&gt;阴影的模糊级别&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="shadowColor" type="Number">
                <description>&lt;p&gt;阴影的颜色&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="shadowOffsetX" type="Number">
                <description>&lt;p&gt;阴影相对于形状在水平方向的偏移&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="shadowOffsetY" type="Number">
                <description>&lt;p&gt;阴影相对于形状在竖直方向的偏移&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="strokeStyle" type="String">
                <description>&lt;p&gt;边框颜色。用法同 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setStrokeStyle.html"&gt;CanvasContext.setStrokeStyle()&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CanvasGetImageDataOption" superclass="None">
        <methods/>
        <properties>
            <property name="canvasId" type="String">
                <description>&lt;p&gt;画布标识，传入 &lt;a href="(canvas)"&gt;canvas&lt;/a&gt; 组件的 &lt;code&gt;canvas-id&lt;/code&gt; 属性。&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;将要被提取的图像数据矩形区域的高度&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;将要被提取的图像数据矩形区域的宽度&lt;/p&gt;
</description>
            </property>
            <property name="x" type="Number">
                <description>&lt;p&gt;将要被提取的图像数据矩形区域的左上角横坐标&lt;/p&gt;
</description>
            </property>
            <property name="y" type="Number">
                <description>&lt;p&gt;将要被提取的图像数据矩形区域的左上角纵坐标&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CanvasGetImageDataCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CanvasGetImageDataFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CanvasGetImageDataSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CanvasGetImageDataSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="Uint8ClampedArray">
                <description>&lt;p&gt;图像像素点数据，一维数组，每四项表示一个像素点的 rgba&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;图像数据矩形的高度&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;图像数据矩形的宽度&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="CanvasPutImageDataOption" superclass="None">
        <methods/>
        <properties>
            <property name="canvasId" type="String">
                <description>&lt;p&gt;画布标识，传入 &lt;a href="(canvas)"&gt;canvas&lt;/a&gt; 组件的 canvas-id 属性。&lt;/p&gt;
</description>
            </property>
            <property name="data" type="Uint8ClampedArray">
                <description>&lt;p&gt;图像像素点数据，一维数组，每四项表示一个像素点的 rgba&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;源图像数据矩形区域的高度&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;源图像数据矩形区域的宽度&lt;/p&gt;
</description>
            </property>
            <property name="x" type="Number">
                <description>&lt;p&gt;源图像数据在目标画布中的位置偏移量（x 轴方向的偏移量）&lt;/p&gt;
</description>
            </property>
            <property name="y" type="Number">
                <description>&lt;p&gt;源图像数据在目标画布中的位置偏移量（y 轴方向的偏移量）&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CanvasPutImageDataCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CanvasPutImageDataFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CanvasPutImageDataSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CanvasToTempFilePathOption" superclass="None">
        <methods/>
        <properties>
            <property name="canvasId" type="String">
                <description>&lt;p&gt;画布标识，传入 &lt;a href="(canvas)"&gt;canvas&lt;/a&gt; 组件的 canvas-id&lt;/p&gt;
</description>
            </property>
            <property name="quality" type="Number">
                <description>&lt;p&gt;图片的质量，目前仅对 jpg 有效。取值范围为 (0, 1]，不在范围内时当作 1.0 处理。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CanvasToTempFilePathCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="destHeight" type="Number">
                <description>&lt;p&gt;输出的图片的高度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="destWidth" type="Number">
                <description>&lt;p&gt;输出的图片的宽度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CanvasToTempFilePathFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="fileType" type="None">
                <description>&lt;p&gt;目标文件的类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;jpg&amp;#39;: jpg 图片;&lt;/li&gt;
&lt;li&gt;&amp;#39;png&amp;#39;: png 图片;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;指定的画布区域的高度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CanvasToTempFilePathSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;指定的画布区域的宽度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="x" type="Number">
                <description>&lt;p&gt;指定的画布区域的左上角横坐标&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="y" type="Number">
                <description>&lt;p&gt;指定的画布区域的左上角纵坐标&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CanvasToTempFilePathSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempFilePath" type="String">
                <description>&lt;p&gt;生成文件的临时路径&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="CheckIsSoterEnrolledInDeviceOption" superclass="None">
        <methods/>
        <properties>
            <property name="checkAuthMode" type="None">
                <description>&lt;p&gt;认证方式&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fingerPrint&amp;#39;: 指纹识别;&lt;/li&gt;
&lt;li&gt;&amp;#39;facial&amp;#39;: 人脸识别;&lt;/li&gt;
&lt;li&gt;&amp;#39;speech&amp;#39;: 声纹识别（暂未支持）;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="complete" type="CheckIsSoterEnrolledInDeviceCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CheckIsSoterEnrolledInDeviceFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CheckIsSoterEnrolledInDeviceSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CheckIsSoterEnrolledInDeviceSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
            <property name="isEnrolled" type="Boolean">
                <description>&lt;p&gt;是否已录入信息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CheckIsSupportSoterAuthenticationOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="CheckIsSupportSoterAuthenticationCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CheckIsSupportSoterAuthenticationFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CheckIsSupportSoterAuthenticationSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CheckIsSupportSoterAuthenticationSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="supportMode" type="Array">
                <description>&lt;p&gt;该设备支持的可被SOTER识别的生物识别方式&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fingerPrint&amp;#39;: 指纹识别;&lt;/li&gt;
&lt;li&gt;&amp;#39;facial&amp;#39;: 人脸识别（暂未支持）;&lt;/li&gt;
&lt;li&gt;&amp;#39;speech&amp;#39;: 声纹识别（暂未支持）;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="CheckSessionOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="CheckSessionCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CheckSessionFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CheckSessionSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseAddressOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ChooseAddressCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ChooseAddressFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ChooseAddressSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseAddressSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="cityName" type="String">
                <description>&lt;p&gt;国标收货地址第二级地址&lt;/p&gt;
</description>
            </property>
            <property name="countyName" type="String">
                <description>&lt;p&gt;国标收货地址第三级地址&lt;/p&gt;
</description>
            </property>
            <property name="detailInfo" type="String">
                <description>&lt;p&gt;详细收货地址信息&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
            <property name="nationalCode" type="String">
                <description>&lt;p&gt;收货地址国家码&lt;/p&gt;
</description>
            </property>
            <property name="postalCode" type="String">
                <description>&lt;p&gt;邮编&lt;/p&gt;
</description>
            </property>
            <property name="provinceName" type="String">
                <description>&lt;p&gt;国标收货地址第一级地址&lt;/p&gt;
</description>
            </property>
            <property name="telNumber" type="String">
                <description>&lt;p&gt;收货人手机号码&lt;/p&gt;
</description>
            </property>
            <property name="userName" type="String">
                <description>&lt;p&gt;收货人姓名&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseFile" superclass="None">
        <methods/>
        <properties>
            <property name="name" type="String">
                <description>&lt;p&gt;选择的文件名称&lt;/p&gt;
</description>
            </property>
            <property name="path" type="String">
                <description>&lt;p&gt;本地临时文件路径&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;本地临时文件大小，单位 B&lt;/p&gt;
</description>
            </property>
            <property name="time" type="Number">
                <description>&lt;p&gt;选择的文件的会话发送时间，Unix时间戳，工具暂不支持此属性&lt;/p&gt;
</description>
            </property>
            <property name="type" type="None">
                <description>&lt;p&gt;选择的文件类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;video&amp;#39;: 选择了视频文件;&lt;/li&gt;
&lt;li&gt;&amp;#39;image&amp;#39;: 选择了图片文件;&lt;/li&gt;
&lt;li&gt;&amp;#39;file&amp;#39;: 选择了除图片和视频的文件;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseImageOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ChooseImageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="count" type="Number">
                <description>&lt;p&gt;最多可以选择的图片张数&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ChooseImageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="sizeType" type="Array">
                <description>&lt;p&gt;所选的图片的尺寸&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;original&amp;#39;: 原图;&lt;/li&gt;
&lt;li&gt;&amp;#39;compressed&amp;#39;: 压缩图;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="sourceType" type="Array">
                <description>&lt;p&gt;选择图片的来源&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;album&amp;#39;: 从相册选图;&lt;/li&gt;
&lt;li&gt;&amp;#39;camera&amp;#39;: 使用相机;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="success" type="ChooseImageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseImageSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempFilePaths" type="None">
                <description>&lt;p&gt;图片的本地临时文件路径列表&lt;/p&gt;
</description>
            </property>
            <property name="tempFiles" type="None">
                <description>&lt;p&gt;图片的本地临时文件列表&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ChooseInvoiceOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ChooseInvoiceCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ChooseInvoiceFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ChooseInvoiceSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseInvoiceSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="invoiceInfo" type="String">
                <description>&lt;p&gt;用户选中的发票信息，格式为一个 JSON 字符串，包含三个字段： card_id：所选发票卡券的 cardId，encrypt_code：所选发票卡券的加密 code，报销方可以通过 cardId 和 encryptCode 获得报销发票的信息，app_id： 发票方的 appId。&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ChooseInvoiceTitleOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ChooseInvoiceTitleCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ChooseInvoiceTitleFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ChooseInvoiceTitleSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseInvoiceTitleSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="bankAccount" type="String">
                <description>&lt;p&gt;银行账号&lt;/p&gt;
</description>
            </property>
            <property name="bankName" type="String">
                <description>&lt;p&gt;银行名称&lt;/p&gt;
</description>
            </property>
            <property name="companyAddress" type="String">
                <description>&lt;p&gt;单位地址&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
            <property name="taxNumber" type="String">
                <description>&lt;p&gt;抬头税号&lt;/p&gt;
</description>
            </property>
            <property name="telephone" type="String">
                <description>&lt;p&gt;手机号码&lt;/p&gt;
</description>
            </property>
            <property name="title" type="String">
                <description>&lt;p&gt;抬头名称&lt;/p&gt;
</description>
            </property>
            <property name="type" type="None">
                <description>&lt;p&gt;抬头类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: 单位;&lt;/li&gt;
&lt;li&gt;1: 个人;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseLocationOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ChooseLocationCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ChooseLocationFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ChooseLocationSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseLocationSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="address" type="String">
                <description>&lt;p&gt;详细地址&lt;/p&gt;
</description>
            </property>
            <property name="latitude" type="String">
                <description>&lt;p&gt;纬度，浮点数，范围为-90~90，负数表示南纬。使用 gcj02 国测局坐标系&lt;/p&gt;
</description>
            </property>
            <property name="longitude" type="String">
                <description>&lt;p&gt;经度，浮点数，范围为-180~180，负数表示西经。使用 gcj02 国测局坐标系&lt;/p&gt;
</description>
            </property>
            <property name="name" type="String">
                <description>&lt;p&gt;位置名称&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ChooseMessageFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="count" type="Number">
                <description>&lt;p&gt;最多可以选择的文件个数，可以 0～100&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ChooseMessageFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="extension" type="None">
                <description>&lt;p&gt;根据文件拓展名过滤，仅 type==file 时有效。每一项都不能是空字符串。默认不过滤。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ChooseMessageFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ChooseMessageFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="type" type="None">
                <description>&lt;p&gt;所选的文件的类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;all&amp;#39;: 从所有文件选择;&lt;/li&gt;
&lt;li&gt;&amp;#39;video&amp;#39;: 只能选择视频文件;&lt;/li&gt;
&lt;li&gt;&amp;#39;image&amp;#39;: 只能选择图片文件;&lt;/li&gt;
&lt;li&gt;&amp;#39;file&amp;#39;: 可以选择除了图片和视频之外的其它的文件;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseMessageFileSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempFiles" type="None">
                <description>&lt;p&gt;返回选择的文件的本地临时文件对象数组&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ChooseVideoOption" superclass="None">
        <methods/>
        <properties>
            <property name="camera" type="None">
                <description>&lt;p&gt;默认拉起的是前置或者后置摄像头。部分 Android 手机下由于系统 ROM 不支持无法生效&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;back&amp;#39;: 默认拉起后置摄像头;&lt;/li&gt;
&lt;li&gt;&amp;#39;front&amp;#39;: 默认拉起前置摄像头;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="complete" type="ChooseVideoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="compressed" type="Boolean">
                <description>&lt;p&gt;是否压缩所选择的视频文件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ChooseVideoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="maxDuration" type="Number">
                <description>&lt;p&gt;拍摄视频最长拍摄时间，单位秒&lt;/p&gt;
</description>
            </property>
            <property name="sourceType" type="Array">
                <description>&lt;p&gt;视频选择的来源&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;album&amp;#39;: 从相册选择视频;&lt;/li&gt;
&lt;li&gt;&amp;#39;camera&amp;#39;: 使用相机拍摄视频;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="success" type="ChooseVideoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ChooseVideoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="duration" type="Number">
                <description>&lt;p&gt;选定视频的时间长度&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;返回选定视频的高度&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;选定视频的数据量大小&lt;/p&gt;
</description>
            </property>
            <property name="tempFilePath" type="String">
                <description>&lt;p&gt;选定视频的临时文件路径&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;返回选定视频的宽度&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ClearOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ClearCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ClearFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ClearSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ClearStorageOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ClearStorageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ClearStorageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ClearStorageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CloseBLEConnectionOption" superclass="None">
        <methods/>
        <properties>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;用于区分设备的 id&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CloseBLEConnectionCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CloseBLEConnectionFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CloseBLEConnectionSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CloseBluetoothAdapterOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="CloseBluetoothAdapterCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CloseBluetoothAdapterFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CloseBluetoothAdapterSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CloseOption" superclass="None">
        <methods/>
        <properties>
            <property name="code" type="Number">
                <description>&lt;p&gt;一个数字值表示关闭连接的状态号，表示连接被关闭的原因。&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CloseCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CloseFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="reason" type="String">
                <description>&lt;p&gt;一个可读的字符串，表示连接被关闭的原因。这个字符串必须是不长于 123 字节的 UTF-8 文本（不是字符）。&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CloseSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CloseSocketOption" superclass="None">
        <methods/>
        <properties>
            <property name="code" type="Number">
                <description>&lt;p&gt;一个数字值表示关闭连接的状态号，表示连接被关闭的原因。&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CloseSocketCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CloseSocketFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="reason" type="String">
                <description>&lt;p&gt;一个可读的字符串，表示连接被关闭的原因。这个字符串必须是不长于 123 字节的 UTF-8 文本（不是字符）。&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CloseSocketSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Color" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="CompressImageOption" superclass="None">
        <methods/>
        <properties>
            <property name="src" type="String">
                <description>&lt;p&gt;图片路径，图片的路径，可以是相对路径、临时文件路径、存储文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CompressImageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CompressImageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="quality" type="Number">
                <description>&lt;p&gt;压缩质量，范围0～100，数值越小，质量越低，压缩率越高（仅对jpg有效）。&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CompressImageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CompressImageSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempFilePath" type="String">
                <description>&lt;p&gt;压缩后图片的临时文件路径&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ConnectSocketOption" superclass="None">
        <methods/>
        <properties>
            <property name="url" type="String">
                <description>&lt;p&gt;开发者服务器 wss 接口地址&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ConnectSocketCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ConnectSocketFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;HTTP Header，Header 中不能设置 Referer&lt;/p&gt;
</description>
            </property>
            <property name="protocols" type="None">
                <description>&lt;p&gt;子协议数组&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ConnectSocketSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="tcpNoDelay" type="Boolean">
                <description>&lt;p&gt;建立 TCP 连接的时候的 TCP_NODELAY 设置&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ConnectWifiOption" superclass="None">
        <methods/>
        <properties>
            <property name="SSID" type="String">
                <description>&lt;p&gt;Wi-Fi 设备 SSID&lt;/p&gt;
</description>
            </property>
            <property name="password" type="String">
                <description>&lt;p&gt;Wi-Fi 设备密码&lt;/p&gt;
</description>
            </property>
            <property name="BSSID" type="String">
                <description>&lt;p&gt;Wi-Fi 设备 BSSID&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ConnectWifiCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ConnectWifiFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ConnectWifiSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ContextCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="context" type="IAnyObject">
                <description>&lt;p&gt;节点对应的 Context 对象&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CopyFileFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail permission denied, copyFile ${srcPath} -&amp;gt; ${destPath}&amp;#39;: 指定目标文件路径没有写权限;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail no such file or directory, copyFile ${srcPath} -&amp;gt; ${destPath}&amp;#39;: 源文件不存在，或目标文件路径的上层目录不存在;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CopyFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="destPath" type="String">
                <description>&lt;p&gt;目标文件路径&lt;/p&gt;
</description>
            </property>
            <property name="srcPath" type="String">
                <description>&lt;p&gt;源文件路径，只可以是普通文件&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CopyFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CopyFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CopyFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CreateAnimationOption" superclass="None">
        <methods/>
        <properties>
            <property name="delay" type="Number">
                <description>&lt;p&gt;动画延迟时间，单位 ms&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;动画持续时间，单位 ms&lt;/p&gt;
</description>
            </property>
            <property name="timingFunction" type="None">
                <description>&lt;p&gt;动画的效果&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;linear&amp;#39;: 动画从头到尾的速度是相同的;&lt;/li&gt;
&lt;li&gt;&amp;#39;ease&amp;#39;: 动画以低速开始，然后加快，在结束前变慢;&lt;/li&gt;
&lt;li&gt;&amp;#39;ease-in&amp;#39;: 动画以低速开始;&lt;/li&gt;
&lt;li&gt;&amp;#39;ease-in-out&amp;#39;: 动画以低速开始和结束;&lt;/li&gt;
&lt;li&gt;&amp;#39;ease-out&amp;#39;: 动画以低速结束;&lt;/li&gt;
&lt;li&gt;&amp;#39;step-start&amp;#39;: 动画第一帧就跳至结束状态直到结束;&lt;/li&gt;
&lt;li&gt;&amp;#39;step-end&amp;#39;: 动画一直保持开始状态，最后一帧跳到结束状态;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="transformOrigin" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="CreateBLEConnectionOption" superclass="None">
        <methods/>
        <properties>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;用于区分设备的 id&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="CreateBLEConnectionCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="CreateBLEConnectionFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="CreateBLEConnectionSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="timeout" type="Number">
                <description>&lt;p&gt;超时时间，单位ms，不填表示不会超时&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CreateIntersectionObserverOption" superclass="None">
        <methods/>
        <properties>
            <property name="initialRatio" type="Number">
                <description>&lt;p&gt;初始的相交比例，如果调用时检测到的相交比例与这个值不相等且达到阈值，则会触发一次监听器的回调函数。&lt;/p&gt;
</description>
            </property>
            <property name="observeAll" type="Boolean">
                <description>&lt;p&gt;是否同时观测多个目标节点（而非一个），如果设为 true ，observe 的 targetSelector 将选中多个节点（注意：同时选中过多节点将影响渲染性能）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.0.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="thresholds" type="None">
                <description>&lt;p&gt;一个数值数组，包含所有阈值。&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CreateInterstitialAdOption" superclass="None">
        <methods/>
        <properties>
            <property name="adUnitId" type="String">
                <description>&lt;p&gt;广告单元 id&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CreateRewardedVideoAdOption" superclass="None">
        <methods/>
        <properties>
            <property name="adUnitId" type="String">
                <description>&lt;p&gt;广告单元 id&lt;/p&gt;
</description>
            </property>
            <property name="multiton" type="Boolean">
                <description>&lt;p&gt;是否启用多例模式，默认为false&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Danmu" superclass="None">
        <methods/>
        <properties>
            <property name="text" type="String">
                <description>&lt;p&gt;弹幕文字&lt;/p&gt;
</description>
            </property>
            <property name="color" type="String">
                <description>&lt;p&gt;弹幕颜色&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="DescOption" superclass="None">
        <methods/>
        <properties>
            <property name="style" type="String">
                <description>&lt;p&gt;字体样式，可选值为 normal / italic / oblique&lt;/p&gt;
</description>
            </property>
            <property name="variant" type="String">
                <description>&lt;p&gt;设置小型大写字母的字体显示文本，可选值为 normal / small-caps / inherit&lt;/p&gt;
</description>
            </property>
            <property name="weight" type="String">
                <description>&lt;p&gt;字体粗细，可选值为 normal / bold / 100 / 200../ 900&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="DestinationOption" superclass="None">
        <methods/>
        <properties>
            <property name="latitude" type="Number">
                <description>&lt;p&gt;纬度&lt;/p&gt;
</description>
            </property>
            <property name="longitude" type="Number">
                <description>&lt;p&gt;经度&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="DownloadFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="url" type="String">
                <description>&lt;p&gt;下载资源的 url&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="DownloadFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="DownloadFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="filePath" type="String">
                <description>&lt;p&gt;指定文件下载后存储的路径&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;HTTP 请求的 Header，Header 中不能设置 Referer&lt;/p&gt;
</description>
            </property>
            <property name="success" type="DownloadFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="DownloadFileSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;用户文件路径。传入 filePath 时会返回，跟传入的 filePath 一致&lt;/p&gt;
</description>
            </property>
            <property name="statusCode" type="Number">
                <description>&lt;p&gt;开发者服务器返回的 HTTP 状态码&lt;/p&gt;
</description>
            </property>
            <property name="tempFilePath" type="String">
                <description>&lt;p&gt;临时文件路径。没传入 filePath 指定文件存储路径时会返回，下载后的文件会存储到一个临时文件&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="DownloadTaskOnHeadersReceivedCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;开发者服务器返回的 HTTP Response Header&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="DownloadTaskOnProgressUpdateCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="progress" type="Number">
                <description>&lt;p&gt;下载进度百分比&lt;/p&gt;
</description>
            </property>
            <property name="totalBytesExpectedToWrite" type="Number">
                <description>&lt;p&gt;预期需要下载的数据总长度，单位 Bytes&lt;/p&gt;
</description>
            </property>
            <property name="totalBytesWritten" type="Number">
                <description>&lt;p&gt;已经下载的数据长度，单位 Bytes&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ExitFullScreenOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ExitFullScreenCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ExitFullScreenFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ExitFullScreenSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ExtInfo" superclass="None">
        <methods/>
        <properties>
            <property name="extConfig" type="IAnyObject">
                <description>&lt;p&gt;第三方平台自定义的数据&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Fields" superclass="None">
        <methods/>
        <properties>
            <property name="computedStyle" type="None">
                <description>&lt;p&gt;指定样式名列表，返回节点对应样式名的当前值&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="context" type="Boolean">
                <description>&lt;p&gt;是否返回节点对应的 Context 对象&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.2&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="dataset" type="Boolean">
                <description>&lt;p&gt;是否返回节点 dataset&lt;/p&gt;
</description>
            </property>
            <property name="id" type="Boolean">
                <description>&lt;p&gt;是否返回节点 id&lt;/p&gt;
</description>
            </property>
            <property name="mark" type="Boolean">
                <description>&lt;p&gt;是否返回节点 mark&lt;/p&gt;
</description>
            </property>
            <property name="node" type="Boolean">
                <description>&lt;p&gt;是否返回节点对应的 Node 实例&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="properties" type="None">
                <description>&lt;p&gt;指定属性名列表，返回节点对应属性名的当前属性值（只能获得组件文档中标注的常规属性值，id class style 和事件绑定的属性值不可获取）&lt;/p&gt;
</description>
            </property>
            <property name="rect" type="Boolean">
                <description>&lt;p&gt;是否返回节点布局位置（&lt;code&gt;left&lt;/code&gt; &lt;code&gt;right&lt;/code&gt; &lt;code&gt;top&lt;/code&gt; &lt;code&gt;bottom&lt;/code&gt;）&lt;/p&gt;
</description>
            </property>
            <property name="scrollOffset" type="Boolean">
                <description>&lt;p&gt;否 是否返回节点的 &lt;code&gt;scrollLeft&lt;/code&gt; &lt;code&gt;scrollTop&lt;/code&gt;，节点必须是 &lt;code&gt;scroll-view&lt;/code&gt; 或者 &lt;code&gt;viewport&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Boolean">
                <description>&lt;p&gt;是否返回节点尺寸（&lt;code&gt;width&lt;/code&gt; &lt;code&gt;height&lt;/code&gt;）&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="FileSystemManagerGetFileInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;要读取的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="FileSystemManagerGetFileInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="FileSystemManagerGetFileInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="FileSystemManagerGetFileInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="FileSystemManagerGetFileInfoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="size" type="Number">
                <description>&lt;p&gt;文件大小，以字节为单位&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="FileSystemManagerGetSavedFileListOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="FileSystemManagerGetSavedFileListCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="FileSystemManagerGetSavedFileListFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="FileSystemManagerGetSavedFileListSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="FileSystemManagerGetSavedFileListSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="fileList" type="None">
                <description>&lt;p&gt;文件数组&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="FileSystemManagerGetSavedFileListSuccessCallbackResultFileItem" superclass="None">
        <methods/>
        <properties>
            <property name="createTime" type="Number">
                <description>&lt;p&gt;文件保存时的时间戳，从1970/01/01 08:00:00 到当前时间的秒数&lt;/p&gt;
</description>
            </property>
            <property name="filePath" type="String">
                <description>&lt;p&gt;本地路径&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;本地文件大小，以字节为单位&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="FileSystemManagerRemoveSavedFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;需要删除的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="FileSystemManagerRemoveSavedFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="FileSystemManagerRemoveSavedFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="FileSystemManagerRemoveSavedFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="FileSystemManagerSaveFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="tempFilePath" type="String">
                <description>&lt;p&gt;临时存储文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="FileSystemManagerSaveFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="FileSystemManagerSaveFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="filePath" type="String">
                <description>&lt;p&gt;要存储的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="success" type="FileSystemManagerSaveFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="FileSystemManagerSaveFileSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="savedFilePath" type="Number">
                <description>&lt;p&gt;存储后的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetAvailableAudioSourcesOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetAvailableAudioSourcesCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetAvailableAudioSourcesFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetAvailableAudioSourcesSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetAvailableAudioSourcesSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="audioSources" type="Array">
                <description>&lt;p&gt;支持的音频输入源列表，可在 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.start.html"&gt;RecorderManager.start()&lt;/a&gt; 接口中使用。返回值定义参考 &lt;a href="https://developer.android.com/reference/kotlin/android/media/MediaRecorder.AudioSource"&gt;https://developer.android.com/reference/kotlin/android/media/MediaRecorder.AudioSource&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;auto&amp;#39;: 自动设置，默认使用手机麦克风，插上耳麦后自动切换使用耳机麦克风，所有平台适用;&lt;/li&gt;
&lt;li&gt;&amp;#39;buildInMic&amp;#39;: 手机麦克风，仅限 iOS;&lt;/li&gt;
&lt;li&gt;&amp;#39;headsetMic&amp;#39;: 耳机麦克风，仅限 iOS;&lt;/li&gt;
&lt;li&gt;&amp;#39;mic&amp;#39;: 麦克风（没插耳麦时是手机麦克风，插耳麦时是耳机麦克风），仅限 Android;&lt;/li&gt;
&lt;li&gt;&amp;#39;camcorder&amp;#39;: 同 mic，适用于录制音视频内容，仅限 Android;&lt;/li&gt;
&lt;li&gt;&amp;#39;voice_communication&amp;#39;: 同 mic，适用于实时沟通，仅限 Android;&lt;/li&gt;
&lt;li&gt;&amp;#39;voice_recognition&amp;#39;: 同 mic，适用于语音识别，仅限 Android;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetBLEDeviceCharacteristicsOption" superclass="None">
        <methods/>
        <properties>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;蓝牙设备 id&lt;/p&gt;
</description>
            </property>
            <property name="serviceId" type="String">
                <description>&lt;p&gt;蓝牙服务 uuid，需要使用 &lt;code&gt;getBLEDeviceServices&lt;/code&gt; 获取&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetBLEDeviceCharacteristicsCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBLEDeviceCharacteristicsFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBLEDeviceCharacteristicsSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBLEDeviceCharacteristicsSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="characteristics" type="None">
                <description>&lt;p&gt;设备特征值列表&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetBLEDeviceServicesOption" superclass="None">
        <methods/>
        <properties>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;蓝牙设备 id&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetBLEDeviceServicesCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBLEDeviceServicesFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBLEDeviceServicesSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBLEDeviceServicesSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="services" type="None">
                <description>&lt;p&gt;设备服务列表&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetBackgroundAudioPlayerStateOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetBackgroundAudioPlayerStateCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBackgroundAudioPlayerStateFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBackgroundAudioPlayerStateSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBackgroundAudioPlayerStateSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="currentPosition" type="Number">
                <description>&lt;p&gt;选定音频的播放位置（单位：s），只有在音乐播放中时返回&lt;/p&gt;
</description>
            </property>
            <property name="dataUrl" type="String">
                <description>&lt;p&gt;歌曲数据链接，只有在音乐播放中时返回&lt;/p&gt;
</description>
            </property>
            <property name="downloadPercent" type="Number">
                <description>&lt;p&gt;音频的下载进度百分比，只有在音乐播放中时返回&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;选定音频的长度（单位：s），只有在音乐播放中时返回&lt;/p&gt;
</description>
            </property>
            <property name="status" type="None">
                <description>&lt;p&gt;播放状态&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: 暂停中;&lt;/li&gt;
&lt;li&gt;1: 播放中;&lt;/li&gt;
&lt;li&gt;2: 没有音乐播放;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetBackgroundFetchDataOption" superclass="None">
        <methods/>
        <properties>
            <property name="fetchType" type="String">
                <description>&lt;p&gt;取值为 periodic&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetBackgroundFetchDataCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBackgroundFetchDataFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBackgroundFetchDataSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBackgroundFetchTokenOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetBackgroundFetchTokenCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBackgroundFetchTokenFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBackgroundFetchTokenSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBatteryInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetBatteryInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBatteryInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBatteryInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBatteryInfoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="isCharging" type="Boolean">
                <description>&lt;p&gt;是否正在充电中&lt;/p&gt;
</description>
            </property>
            <property name="level" type="String">
                <description>&lt;p&gt;设备电量，范围 1 - 100&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetBatteryInfoSyncResult" superclass="None">
        <methods/>
        <properties>
            <property name="isCharging" type="Boolean">
                <description>&lt;p&gt;是否正在充电中&lt;/p&gt;
</description>
            </property>
            <property name="level" type="String">
                <description>&lt;p&gt;设备电量，范围 1 - 100&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBeaconsOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetBeaconsCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBeaconsFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBeaconsSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBeaconsSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="beacons" type="None">
                <description>&lt;p&gt;iBeacon 设备列表&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetBluetoothAdapterStateOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetBluetoothAdapterStateCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBluetoothAdapterStateFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBluetoothAdapterStateSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBluetoothAdapterStateSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="available" type="Boolean">
                <description>&lt;p&gt;蓝牙适配器是否可用&lt;/p&gt;
</description>
            </property>
            <property name="discovering" type="Boolean">
                <description>&lt;p&gt;是否正在搜索设备&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetBluetoothDevicesOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetBluetoothDevicesCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetBluetoothDevicesFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetBluetoothDevicesSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetBluetoothDevicesSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="devices" type="None">
                <description>&lt;p&gt;uuid 对应的的已连接设备列表&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetCenterLocationOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetCenterLocationCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetCenterLocationFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetCenterLocationSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetCenterLocationSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="latitude" type="Number">
                <description>&lt;p&gt;纬度&lt;/p&gt;
</description>
            </property>
            <property name="longitude" type="Number">
                <description>&lt;p&gt;经度&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetClipboardDataOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetClipboardDataCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetClipboardDataFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetClipboardDataSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetClipboardDataSuccessCallbackOption" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="String">
                <description>&lt;p&gt;剪贴板的内容&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetConnectedBluetoothDevicesOption" superclass="None">
        <methods/>
        <properties>
            <property name="services" type="None">
                <description>&lt;p&gt;蓝牙设备主 service 的 uuid 列表&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetConnectedBluetoothDevicesCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetConnectedBluetoothDevicesFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetConnectedBluetoothDevicesSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetConnectedBluetoothDevicesSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="devices" type="None">
                <description>&lt;p&gt;搜索到的设备列表&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetConnectedWifiOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetConnectedWifiCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetConnectedWifiFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetConnectedWifiSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetConnectedWifiSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="wifi" type="WifiInfo">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/WifiInfo.html"&gt;WifiInfo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wi-Fi 信息&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetContentsOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetContentsCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetContentsFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetContentsSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetExtConfigOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetExtConfigCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetExtConfigFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetExtConfigSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetExtConfigSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="extConfig" type="IAnyObject">
                <description>&lt;p&gt;第三方平台自定义的数据&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetFileInfoFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail file not exist&amp;#39;: 指定的 filePath 找不到文件;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetHCEStateOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetHCEStateCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetHCEStateFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetHCEStateSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetImageInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="src" type="String">
                <description>&lt;p&gt;图片的路径，可以是相对路径、临时文件路径、存储文件路径、网络图片路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetImageInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetImageInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetImageInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetImageInfoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="height" type="Number">
                <description>&lt;p&gt;图片原始高度，单位px。不考虑旋转。&lt;/p&gt;
</description>
            </property>
            <property name="orientation" type="None">
                <description>&lt;p&gt;&lt;a href="http://sylvana.net/jpegcrop/exif_orientation.html"&gt;拍照时设备方向&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;up&amp;#39;: 默认方向（手机横持拍照），对应 Exif 中的 1。或无 orientation 信息。;&lt;/li&gt;
&lt;li&gt;&amp;#39;up-mirrored&amp;#39;: 同 up，但镜像翻转，对应 Exif 中的 2;&lt;/li&gt;
&lt;li&gt;&amp;#39;down&amp;#39;: 旋转180度，对应 Exif 中的 3;&lt;/li&gt;
&lt;li&gt;&amp;#39;down-mirrored&amp;#39;: 同 down，但镜像翻转，对应 Exif 中的 4;&lt;/li&gt;
&lt;li&gt;&amp;#39;left-mirrored&amp;#39;: 同 left，但镜像翻转，对应 Exif 中的 5;&lt;/li&gt;
&lt;li&gt;&amp;#39;right&amp;#39;: 顺时针旋转90度，对应 Exif 中的 6;&lt;/li&gt;
&lt;li&gt;&amp;#39;right-mirrored&amp;#39;: 同 right，但镜像翻转，对应 Exif 中的 7;&lt;/li&gt;
&lt;li&gt;&amp;#39;left&amp;#39;: 逆时针旋转90度，对应 Exif 中的 8;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="path" type="String">
                <description>&lt;p&gt;图片的本地路径&lt;/p&gt;
</description>
            </property>
            <property name="type" type="String">
                <description>&lt;p&gt;图片格式&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;图片原始宽度，单位px。不考虑旋转。&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetLocationOption" superclass="None">
        <methods/>
        <properties>
            <property name="altitude" type="String">
                <description>&lt;p&gt;传入 true 会返回高度信息，由于获取高度需要较高精确度，会减慢接口返回速度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetLocationCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetLocationFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetLocationSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="type" type="String">
                <description>&lt;p&gt;wgs84 返回 gps 坐标，gcj02 返回可用于 wx.openLocation 的坐标&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetLocationSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="accuracy" type="Number">
                <description>&lt;p&gt;位置的精确度&lt;/p&gt;
</description>
            </property>
            <property name="altitude" type="Number">
                <description>&lt;p&gt;高度，单位 m&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="horizontalAccuracy" type="Number">
                <description>&lt;p&gt;水平精度，单位 m&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="latitude" type="Number">
                <description>&lt;p&gt;纬度，范围为 -90~90，负数表示南纬&lt;/p&gt;
</description>
            </property>
            <property name="longitude" type="Number">
                <description>&lt;p&gt;经度，范围为 -180~180，负数表示西经&lt;/p&gt;
</description>
            </property>
            <property name="speed" type="Number">
                <description>&lt;p&gt;速度，单位 m/s&lt;/p&gt;
</description>
            </property>
            <property name="verticalAccuracy" type="Number">
                <description>&lt;p&gt;垂直精度，单位 m（Android 无法获取，返回 0）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetLogManagerOption" superclass="None">
        <methods/>
        <properties>
            <property name="level" type="Number">
                <description>&lt;p&gt;取值为0/1，取值为0表示是否会把 &lt;code&gt;App&lt;/code&gt;、&lt;code&gt;Page&lt;/code&gt; 的生命周期函数和 &lt;code&gt;wx&lt;/code&gt; 命名空间下的函数调用写入日志，取值为1则不会。默认值是 0&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.2&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetNetworkTypeOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetNetworkTypeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetNetworkTypeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetNetworkTypeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetNetworkTypeSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="networkType" type="None">
                <description>&lt;p&gt;网络类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;wifi&amp;#39;: wifi 网络;&lt;/li&gt;
&lt;li&gt;&amp;#39;2g&amp;#39;: 2g 网络;&lt;/li&gt;
&lt;li&gt;&amp;#39;3g&amp;#39;: 3g 网络;&lt;/li&gt;
&lt;li&gt;&amp;#39;4g&amp;#39;: 4g 网络;&lt;/li&gt;
&lt;li&gt;&amp;#39;unknown&amp;#39;: Android 下不常见的网络类型;&lt;/li&gt;
&lt;li&gt;&amp;#39;none&amp;#39;: 无网络;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetRegionOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetRegionCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetRegionFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetRegionSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetRegionSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="northeast" type="Number">
                <description>&lt;p&gt;东北角经纬度&lt;/p&gt;
</description>
            </property>
            <property name="southwest" type="Number">
                <description>&lt;p&gt;西南角经纬度&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetRotateOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetRotateCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetRotateFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetRotateSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetRotateSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="rotate" type="Number">
                <description>&lt;p&gt;旋转角&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetSavedFileInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetSavedFileInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetSavedFileInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetSavedFileInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetSavedFileInfoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="createTime" type="Number">
                <description>&lt;p&gt;文件保存时的时间戳，从1970/01/01 08:00:00 到该时刻的秒数&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;文件大小，单位 B&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetScaleOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetScaleCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetScaleFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetScaleSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetScaleSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="scale" type="Number">
                <description>&lt;p&gt;缩放值&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetScreenBrightnessOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetScreenBrightnessCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetScreenBrightnessFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetScreenBrightnessSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetScreenBrightnessSuccessCallbackOption" superclass="None">
        <methods/>
        <properties>
            <property name="value" type="Number">
                <description>&lt;p&gt;屏幕亮度值，范围 0 ~ 1，0 最暗，1 最亮&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetSettingOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetSettingCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetSettingFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetSettingSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetSettingSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="authSetting" type="AuthSetting">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/AuthSetting.html"&gt;AuthSetting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户授权结果&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetShareInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="shareTicket" type="String">
                <description>&lt;p&gt;shareTicket&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetShareInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetShareInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetShareInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="timeout" type="Number">
                <description>&lt;p&gt;超时时间，单位 ms&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetShareInfoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="cloudID" type="String">
                <description>&lt;p&gt;敏感数据对应的云 ID，开通&lt;a href="(wxcloud/basis/getting-started)"&gt;云开发&lt;/a&gt;的小程序才会返回，可通过云调用直接获取开放数据，详细见&lt;a href="(open-ability/signature#method-cloud)"&gt;云调用直接获取开放数据&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="encryptedData" type="String">
                <description>&lt;p&gt;包括敏感数据在内的完整转发信息的加密数据，详细见&lt;a href="(open-ability/signature)"&gt;加密数据解密算法&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
            <property name="iv" type="String">
                <description>&lt;p&gt;加密算法的初始向量，详细见&lt;a href="(open-ability/signature)"&gt;加密数据解密算法&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetSkewOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetSkewCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetSkewFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetSkewSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetSkewSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="skew" type="Number">
                <description>&lt;p&gt;倾斜角&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetStorageInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetStorageInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetStorageInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetStorageInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetStorageInfoSuccessCallbackOption" superclass="None">
        <methods/>
        <properties>
            <property name="currentSize" type="Number">
                <description>&lt;p&gt;当前占用的空间大小, 单位 KB&lt;/p&gt;
</description>
            </property>
            <property name="keys" type="None">
                <description>&lt;p&gt;当前 storage 中所有的 key&lt;/p&gt;
</description>
            </property>
            <property name="limitSize" type="Number">
                <description>&lt;p&gt;限制的空间大小，单位 KB&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetStorageInfoSyncOption" superclass="None">
        <methods/>
        <properties>
            <property name="currentSize" type="Number">
                <description>&lt;p&gt;当前占用的空间大小, 单位 KB&lt;/p&gt;
</description>
            </property>
            <property name="keys" type="None">
                <description>&lt;p&gt;当前 storage 中所有的 key&lt;/p&gt;
</description>
            </property>
            <property name="limitSize" type="Number">
                <description>&lt;p&gt;限制的空间大小，单位 KB&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetStorageOption" superclass="None">
        <methods/>
        <properties>
            <property name="key" type="String">
                <description>&lt;p&gt;本地缓存中指定的 key&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="GetStorageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetStorageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetStorageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetStorageSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="Object">
                <description>&lt;p&gt;key对应的内容&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetSystemInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetSystemInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetSystemInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetSystemInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetSystemInfoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="SDKVersion" type="String">
                <description>&lt;p&gt;客户端基础库版本&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="albumAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信使用相册的开关（仅 iOS 有效）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="benchmarkLevel" type="Number">
                <description>&lt;p&gt;设备性能等级（仅Android小游戏）。取值为：-2 或 0（该设备无法运行小游戏），-1（性能未知），&amp;gt;=1（设备性能值，该值越高，设备性能越好，目前最高不到50）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="bluetoothEnabled" type="Boolean">
                <description>&lt;p&gt;蓝牙的系统开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="brand" type="String">
                <description>&lt;p&gt;设备品牌&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="cameraAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信使用摄像头的开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="fontSizeSetting" type="Number">
                <description>&lt;p&gt;用户字体大小（单位px）。以微信客户端「我-设置-通用-字体大小」中的设置为准&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="language" type="String">
                <description>&lt;p&gt;微信设置的语言&lt;/p&gt;
</description>
            </property>
            <property name="locationAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信使用定位的开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="locationEnabled" type="Boolean">
                <description>&lt;p&gt;地理位置的系统开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="microphoneAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信使用麦克风的开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="model" type="String">
                <description>&lt;p&gt;设备型号&lt;/p&gt;
</description>
            </property>
            <property name="notificationAlertAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信通知带有提醒的开关（仅 iOS 有效）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="notificationAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信通知的开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="notificationBadgeAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信通知带有标记的开关（仅 iOS 有效）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="notificationSoundAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信通知带有声音的开关（仅 iOS 有效）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="pixelRatio" type="Number">
                <description>&lt;p&gt;设备像素比&lt;/p&gt;
</description>
            </property>
            <property name="platform" type="String">
                <description>&lt;p&gt;客户端平台&lt;/p&gt;
</description>
            </property>
            <property name="safeArea" type="SafeAreaResult">
                <description>&lt;p&gt;在竖屏正方向下的安全区域&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="screenHeight" type="Number">
                <description>&lt;p&gt;屏幕高度，单位px&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="screenWidth" type="Number">
                <description>&lt;p&gt;屏幕宽度，单位px&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="statusBarHeight" type="Number">
                <description>&lt;p&gt;状态栏的高度，单位px&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="system" type="String">
                <description>&lt;p&gt;操作系统及版本&lt;/p&gt;
</description>
            </property>
            <property name="version" type="String">
                <description>&lt;p&gt;微信版本号&lt;/p&gt;
</description>
            </property>
            <property name="wifiEnabled" type="Boolean">
                <description>&lt;p&gt;Wi-Fi 的系统开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="windowHeight" type="Number">
                <description>&lt;p&gt;可使用窗口高度，单位px&lt;/p&gt;
</description>
            </property>
            <property name="windowWidth" type="Number">
                <description>&lt;p&gt;可使用窗口宽度，单位px&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetSystemInfoSyncResult" superclass="None">
        <methods/>
        <properties>
            <property name="SDKVersion" type="String">
                <description>&lt;p&gt;客户端基础库版本&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="albumAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信使用相册的开关（仅 iOS 有效）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="benchmarkLevel" type="Number">
                <description>&lt;p&gt;设备性能等级（仅Android小游戏）。取值为：-2 或 0（该设备无法运行小游戏），-1（性能未知），&amp;gt;=1（设备性能值，该值越高，设备性能越好，目前最高不到50）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="bluetoothEnabled" type="Boolean">
                <description>&lt;p&gt;蓝牙的系统开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="brand" type="String">
                <description>&lt;p&gt;设备品牌&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="cameraAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信使用摄像头的开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="fontSizeSetting" type="Number">
                <description>&lt;p&gt;用户字体大小（单位px）。以微信客户端「我-设置-通用-字体大小」中的设置为准&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="language" type="String">
                <description>&lt;p&gt;微信设置的语言&lt;/p&gt;
</description>
            </property>
            <property name="locationAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信使用定位的开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="locationEnabled" type="Boolean">
                <description>&lt;p&gt;地理位置的系统开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="microphoneAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信使用麦克风的开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="model" type="String">
                <description>&lt;p&gt;设备型号&lt;/p&gt;
</description>
            </property>
            <property name="notificationAlertAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信通知带有提醒的开关（仅 iOS 有效）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="notificationAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信通知的开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="notificationBadgeAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信通知带有标记的开关（仅 iOS 有效）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="notificationSoundAuthorized" type="Boolean">
                <description>&lt;p&gt;允许微信通知带有声音的开关（仅 iOS 有效）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="pixelRatio" type="Number">
                <description>&lt;p&gt;设备像素比&lt;/p&gt;
</description>
            </property>
            <property name="platform" type="String">
                <description>&lt;p&gt;客户端平台&lt;/p&gt;
</description>
            </property>
            <property name="safeArea" type="GetSystemInfoSyncResultSafeAreaResult">
                <description>&lt;p&gt;在竖屏正方向下的安全区域&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="screenHeight" type="Number">
                <description>&lt;p&gt;屏幕高度，单位px&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="screenWidth" type="Number">
                <description>&lt;p&gt;屏幕宽度，单位px&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="statusBarHeight" type="Number">
                <description>&lt;p&gt;状态栏的高度，单位px&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="system" type="String">
                <description>&lt;p&gt;操作系统及版本&lt;/p&gt;
</description>
            </property>
            <property name="version" type="String">
                <description>&lt;p&gt;微信版本号&lt;/p&gt;
</description>
            </property>
            <property name="wifiEnabled" type="Boolean">
                <description>&lt;p&gt;Wi-Fi 的系统开关&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="windowHeight" type="Number">
                <description>&lt;p&gt;可使用窗口高度，单位px&lt;/p&gt;
</description>
            </property>
            <property name="windowWidth" type="Number">
                <description>&lt;p&gt;可使用窗口宽度，单位px&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetSystemInfoSyncResultSafeAreaResult" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;安全区域右下角纵坐标&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;安全区域的高度，单位逻辑像素&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;安全区域左上角横坐标&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;安全区域右下角横坐标&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;安全区域左上角纵坐标&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;安全区域的宽度，单位逻辑像素&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetUserInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetUserInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetUserInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="lang" type="None">
                <description>&lt;p&gt;显示用户信息的语言&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;en&amp;#39;: 英文;&lt;/li&gt;
&lt;li&gt;&amp;#39;zh_CN&amp;#39;: 简体中文;&lt;/li&gt;
&lt;li&gt;&amp;#39;zh_TW&amp;#39;: 繁体中文;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="success" type="GetUserInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="withCredentials" type="Boolean">
                <description>&lt;p&gt;是否带上登录态信息。当 withCredentials 为 true 时，要求此前有调用过 wx.login 且登录态尚未过期，此时返回的数据会包含 encryptedData, iv 等敏感信息；当 withCredentials 为 false 时，不要求有登录态，返回的数据不包含 encryptedData, iv 等敏感信息。&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetUserInfoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="cloudID" type="String">
                <description>&lt;p&gt;敏感数据对应的云 ID，开通&lt;a href="(wxcloud/basis/getting-started)"&gt;云开发&lt;/a&gt;的小程序才会返回，可通过云调用直接获取开放数据，详细见&lt;a href="(open-ability/signature#method-cloud)"&gt;云调用直接获取开放数据&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="encryptedData" type="String">
                <description>&lt;p&gt;包括敏感数据在内的完整用户信息的加密数据，详见 &lt;a href="(signature#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95)"&gt;用户数据的签名验证和加解密&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="iv" type="String">
                <description>&lt;p&gt;加密算法的初始向量，详见 &lt;a href="(signature#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95)"&gt;用户数据的签名验证和加解密&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="rawData" type="String">
                <description>&lt;p&gt;不包括敏感信息的原始数据字符串，用于计算签名&lt;/p&gt;
</description>
            </property>
            <property name="signature" type="String">
                <description>&lt;p&gt;使用 sha1( rawData + sessionkey ) 得到字符串，用于校验用户信息，详见 &lt;a href="(signature)"&gt;用户数据的签名验证和加解密&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="userInfo" type="UserInfo">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/UserInfo.html"&gt;UserInfo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户信息对象，不包含 openid 等敏感信息&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetWeRunDataOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetWeRunDataCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetWeRunDataFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetWeRunDataSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="GetWeRunDataSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="cloudID" type="String">
                <description>&lt;p&gt;敏感数据对应的云 ID，开通云开发的小程序才会返回，可通过云调用直接获取开放数据，详细见&lt;a href="(open-ability/signature#method-cloud)"&gt;云调用直接获取开放数据&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="encryptedData" type="String">
                <description>&lt;p&gt;包括敏感数据在内的完整用户信息的加密数据，详细见&lt;a href="(signature)"&gt;加密数据解密算法&lt;/a&gt;。解密后得到的数据结构见后文&lt;/p&gt;
</description>
            </property>
            <property name="iv" type="String">
                <description>&lt;p&gt;加密算法的初始向量，详细见&lt;a href="(signature)"&gt;加密数据解密算法&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetWifiListOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="GetWifiListCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="GetWifiListFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="GetWifiListSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="HideLoadingOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="HideLoadingCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="HideLoadingFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="HideLoadingSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="HideNavigationBarLoadingOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="HideNavigationBarLoadingCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="HideNavigationBarLoadingFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="HideNavigationBarLoadingSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="HideShareMenuOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="HideShareMenuCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="HideShareMenuFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="HideShareMenuSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="HideTabBarOption" superclass="None">
        <methods/>
        <properties>
            <property name="animation" type="Boolean">
                <description>&lt;p&gt;是否需要动画效果&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="HideTabBarCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="HideTabBarFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="HideTabBarSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="HideTabBarRedDotOption" superclass="None">
        <methods/>
        <properties>
            <property name="index" type="Number">
                <description>&lt;p&gt;tabBar 的哪一项，从左边算起&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="HideTabBarRedDotCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="HideTabBarRedDotFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="HideTabBarRedDotSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="HideToastOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="HideToastCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="HideToastFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="HideToastSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="IBeaconInfo" superclass="None">
        <methods/>
        <properties>
            <property name="accuracy" type="Number">
                <description>&lt;p&gt;iBeacon 设备的距离&lt;/p&gt;
</description>
            </property>
            <property name="major" type="String">
                <description>&lt;p&gt;iBeacon 设备的主 id&lt;/p&gt;
</description>
            </property>
            <property name="minor" type="String">
                <description>&lt;p&gt;iBeacon 设备的次 id&lt;/p&gt;
</description>
            </property>
            <property name="proximity" type="Number">
                <description>&lt;p&gt;表示设备距离的枚举值&lt;/p&gt;
</description>
            </property>
            <property name="rssi" type="Number">
                <description>&lt;p&gt;表示设备的信号强度&lt;/p&gt;
</description>
            </property>
            <property name="uuid" type="String">
                <description>&lt;p&gt;iBeacon 设备广播的 uuid&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Image" superclass="None">
        <methods/>
        <properties>
            <property name="height" type="Number">
                <description>&lt;p&gt;图片的真实高度&lt;/p&gt;
</description>
            </property>
            <property name="onerror" type="Function">
                <description>&lt;p&gt;图片加载发生错误后触发的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="onload" type="Function">
                <description>&lt;p&gt;图片加载完成后触发的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="src" type="String">
                <description>&lt;p&gt;图片的 URL&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;图片的真实宽度&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ImageFile" superclass="None">
        <methods/>
        <properties>
            <property name="path" type="String">
                <description>&lt;p&gt;本地临时文件路径&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;本地临时文件大小，单位 B&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="IncludePointsOption" superclass="None">
        <methods/>
        <properties>
            <property name="points" type="None">
                <description>&lt;p&gt;要显示在可视区域内的坐标点列表&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="IncludePointsCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="IncludePointsFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="padding" type="None">
                <description>&lt;p&gt;坐标点形成的矩形边缘到地图边缘的距离，单位像素。格式为[上,右,下,左]，安卓上只能识别数组第一项，上下左右的padding一致。开发者工具暂不支持padding参数。&lt;/p&gt;
</description>
            </property>
            <property name="success" type="IncludePointsSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="InnerAudioContext" superclass="None">
        <methods>
            <method name="destroy">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.destroy.html"&gt;InnerAudioContext.destroy()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;销毁当前实例&lt;/p&gt;
</description>
            </method>
            <method name="offCanplay">
                <parameters>
                    <parameter name="callback" type="OffCanplayCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offCanplay.html"&gt;InnerAudioContext.offCanplay(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频进入可以播放状态的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offEnded">
                <parameters>
                    <parameter name="callback" type="OffEndedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offEnded.html"&gt;InnerAudioContext.offEnded(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频自然播放至结束的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offError">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOffErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offError.html"&gt;InnerAudioContext.offError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频播放错误事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offPause">
                <parameters>
                    <parameter name="callback" type="OffPauseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offPause.html"&gt;InnerAudioContext.offPause(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频暂停事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offPlay">
                <parameters>
                    <parameter name="callback" type="OffPlayCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offPlay.html"&gt;InnerAudioContext.offPlay(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频播放事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offSeeked">
                <parameters>
                    <parameter name="callback" type="OffSeekedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offSeeked.html"&gt;InnerAudioContext.offSeeked(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频完成跳转操作的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offSeeking">
                <parameters>
                    <parameter name="callback" type="OffSeekingCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offSeeking.html"&gt;InnerAudioContext.offSeeking(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频进行跳转操作的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offStop">
                <parameters>
                    <parameter name="callback" type="OffStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offStop.html"&gt;InnerAudioContext.offStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频停止事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offTimeUpdate">
                <parameters>
                    <parameter name="callback" type="OffTimeUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offTimeUpdate.html"&gt;InnerAudioContext.offTimeUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频播放进度更新事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offWaiting">
                <parameters>
                    <parameter name="callback" type="OffWaitingCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.offWaiting.html"&gt;InnerAudioContext.offWaiting(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频加载中事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onCanplay">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnCanplayCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onCanplay.html"&gt;InnerAudioContext.onCanplay(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频进入可以播放状态的事件。但不保证后面可以流畅播放&lt;/p&gt;
</description>
            </method>
            <method name="onEnded">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnEndedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onEnded.html"&gt;InnerAudioContext.onEnded(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频自然播放至结束的事件&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onError.html"&gt;InnerAudioContext.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频播放错误事件&lt;/p&gt;
</description>
            </method>
            <method name="onPause">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnPauseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onPause.html"&gt;InnerAudioContext.onPause(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频暂停事件&lt;/p&gt;
</description>
            </method>
            <method name="onPlay">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnPlayCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onPlay.html"&gt;InnerAudioContext.onPlay(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频播放事件&lt;/p&gt;
</description>
            </method>
            <method name="onSeeked">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnSeekedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onSeeked.html"&gt;InnerAudioContext.onSeeked(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频完成跳转操作的事件&lt;/p&gt;
</description>
            </method>
            <method name="onSeeking">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnSeekingCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onSeeking.html"&gt;InnerAudioContext.onSeeking(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频进行跳转操作的事件&lt;/p&gt;
</description>
            </method>
            <method name="onStop">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onStop.html"&gt;InnerAudioContext.onStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频停止事件&lt;/p&gt;
</description>
            </method>
            <method name="onTimeUpdate">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnTimeUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onTimeUpdate.html"&gt;InnerAudioContext.onTimeUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频播放进度更新事件&lt;/p&gt;
</description>
            </method>
            <method name="onWaiting">
                <parameters>
                    <parameter name="callback" type="InnerAudioContextOnWaitingCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.onWaiting.html"&gt;InnerAudioContext.onWaiting(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频加载中事件。当音频因为数据不足，需要停下来加载时会触发&lt;/p&gt;
</description>
            </method>
            <method name="pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.pause.html"&gt;InnerAudioContext.pause()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停。暂停后的音频再播放会从暂停处开始播放&lt;/p&gt;
</description>
            </method>
            <method name="play">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.play.html"&gt;InnerAudioContext.play()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;播放&lt;/p&gt;
</description>
            </method>
            <method name="seek">
                <parameters>
                    <parameter name="position" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.seek.html"&gt;InnerAudioContext.seek(number position)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跳转到指定位置&lt;/p&gt;
</description>
            </method>
            <method name="stop">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.stop.html"&gt;InnerAudioContext.stop()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止。停止后的音频再播放会从头开始播放。&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="autoplay" type="Boolean">
                <description>&lt;p&gt;是否自动开始播放，默认为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="buffered" type="Number">
                <description>&lt;p&gt;音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲（只读）&lt;/p&gt;
</description>
            </property>
            <property name="currentTime" type="Number">
                <description>&lt;p&gt;当前音频的播放位置（单位 s）。只有在当前有合法的 src 时返回，时间保留小数点后 6 位（只读）&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;当前音频的长度（单位 s）。只有在当前有合法的 src 时返回（只读）&lt;/p&gt;
</description>
            </property>
            <property name="loop" type="Boolean">
                <description>&lt;p&gt;是否循环播放，默认为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="obeyMuteSwitch" type="Boolean">
                <description>&lt;p&gt;是否遵循系统静音开关，默认为 &lt;code&gt;true&lt;/code&gt;。当此参数为 &lt;code&gt;false&lt;/code&gt; 时，即使用户打开了静音开关，也能继续发出声音。从 2.3.0 版本开始此参数不生效，使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.setInnerAudioOption.html"&gt;wx.setInnerAudioOption&lt;/a&gt; 接口统一设置。&lt;/p&gt;
</description>
            </property>
            <property name="paused" type="Boolean">
                <description>&lt;p&gt;当前是是否暂停或停止状态（只读）&lt;/p&gt;
</description>
            </property>
            <property name="src" type="String">
                <description>&lt;p&gt;音频资源的地址，用于直接播放。{% version(&amp;#39;2.2.3&amp;#39;) %} 开始支持云文件ID&lt;/p&gt;
</description>
            </property>
            <property name="startTime" type="Number">
                <description>&lt;p&gt;开始播放的位置（单位：s），默认为 0&lt;/p&gt;
</description>
            </property>
            <property name="volume" type="Number">
                <description>&lt;p&gt;音量。范围 0~1。默认为 1&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="InnerAudioContextOnErrorCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errCode" type="None">
                <description>&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10001: 系统错误;&lt;/li&gt;
&lt;li&gt;10002: 网络错误;&lt;/li&gt;
&lt;li&gt;10003: 文件错误;&lt;/li&gt;
&lt;li&gt;10004: 格式错误;&lt;/li&gt;
&lt;li&gt;-1: 未知错误;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="InsertDividerOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="InsertDividerCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="InsertDividerFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="InsertDividerSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="InsertImageOption" superclass="None">
        <methods/>
        <properties>
            <property name="src" type="String">
                <description>&lt;p&gt;图片地址，仅支持 http(s)、base64、云图片(2.8.0)。&lt;/p&gt;
</description>
            </property>
            <property name="alt" type="String">
                <description>&lt;p&gt;图像无法显示时的替代文本&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="InsertImageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="data" type="IAnyObject">
                <description>&lt;p&gt;data 被序列化为 name=value;name1=value2 的格式挂在属性 data-custom 上&lt;/p&gt;
</description>
            </property>
            <property name="extClass" type="String">
                <description>&lt;p&gt;添加到图片 img 标签上的类名&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="InsertImageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="height" type="String">
                <description>&lt;p&gt;图片高度 (pixels/百分比)&lt;/p&gt;
</description>
            </property>
            <property name="success" type="InsertImageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="width" type="String">
                <description>&lt;p&gt;图片宽度（pixels/百分比)&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="InsertTextOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="InsertTextCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="InsertTextFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="InsertTextSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="text" type="String">
                <description>&lt;p&gt;文本内容&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="IntersectionRectResult" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;下边界&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;左边界&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;右边界&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;上边界&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="InterstitialAdOnErrorCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errCode" type="None">
                <description>&lt;p&gt;错误码&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1000: 后端接口调用失败;&lt;/li&gt;
&lt;li&gt;1001: 参数错误;&lt;/li&gt;
&lt;li&gt;1002: 广告单元无效;&lt;/li&gt;
&lt;li&gt;1003: 内部错误;&lt;/li&gt;
&lt;li&gt;1004: 无合适的广告;&lt;/li&gt;
&lt;li&gt;1005: 广告组件审核中;&lt;/li&gt;
&lt;li&gt;1006: 广告组件被驳回;&lt;/li&gt;
&lt;li&gt;1007: 广告组件被封禁;&lt;/li&gt;
&lt;li&gt;1008: 广告单元已关闭;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LaunchOptionsApp" superclass="None">
        <methods/>
        <properties>
            <property name="path" type="String">
                <description>&lt;p&gt;启动小程序的路径&lt;/p&gt;
</description>
            </property>
            <property name="query" type="IAnyObject">
                <description>&lt;p&gt;启动小程序的 query 参数&lt;/p&gt;
</description>
            </property>
            <property name="referrerInfo" type="LaunchOptionsAppReferrerInfo">
                <description>&lt;p&gt;来源信息。从另一个小程序、公众号或 App 进入小程序时返回。否则返回 &lt;code&gt;{}&lt;/code&gt;。(参见后文注意)&lt;/p&gt;
</description>
            </property>
            <property name="scene" type="Number">
                <description>&lt;p&gt;启动小程序的&lt;a href="(scene)"&gt;场景值&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="shareTicket" type="String">
                <description>&lt;p&gt;shareTicket，详见&lt;a href="(open-ability/share)"&gt;获取更多转发信息&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LaunchOptionsAppReferrerInfo" superclass="None">
        <methods/>
        <properties>
            <property name="appId" type="String">
                <description>&lt;p&gt;来源小程序、公众号或 App 的 appId&lt;/p&gt;
</description>
            </property>
            <property name="extraData" type="IAnyObject">
                <description>&lt;p&gt;来源小程序传过来的数据，scene=1037或1038时支持&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePlayerContextPauseOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePlayerContextPauseCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePlayerContextPauseFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePlayerContextPauseSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePlayerContextRequestFullScreenOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="RequestFullScreenCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="direction" type="None">
                <description>&lt;p&gt;设置全屏时的方向&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: 正常竖向;&lt;/li&gt;
&lt;li&gt;90: 屏幕逆时针90度;&lt;/li&gt;
&lt;li&gt;-90: 屏幕顺时针90度;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="fail" type="RequestFullScreenFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RequestFullScreenSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePlayerContextResumeOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePlayerContextResumeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePlayerContextResumeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePlayerContextResumeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePlayerContextSnapshotOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePlayerContextSnapshotCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePlayerContextSnapshotFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePlayerContextSnapshotSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePlayerContextStopOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePlayerContextStopCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePlayerContextStopFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePlayerContextStopSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePusherContextPauseOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePusherContextPauseCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePusherContextPauseFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePusherContextPauseSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePusherContextResumeOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePusherContextResumeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePusherContextResumeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePusherContextResumeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePusherContextSnapshotOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePusherContextSnapshotCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePusherContextSnapshotFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePusherContextSnapshotSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePusherContextStartOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePusherContextStartCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePusherContextStartFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePusherContextStartSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LivePusherContextStopOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LivePusherContextStopCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LivePusherContextStopFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LivePusherContextStopSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LoadFontFaceCompleteCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="status" type="String">
                <description>&lt;p&gt;加载字体结果&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LoadFontFaceFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="status" type="String">
                <description>&lt;p&gt;加载字体结果&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LoadFontFaceOption" superclass="None">
        <methods/>
        <properties>
            <property name="family" type="String">
                <description>&lt;p&gt;定义的字体名称&lt;/p&gt;
</description>
            </property>
            <property name="source" type="String">
                <description>&lt;p&gt;字体资源的地址。建议格式为 TTF 和 WOFF，WOFF2 在低版本的iOS上会不兼容。&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="LoadFontFaceCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="desc" type="DescOption">
                <description>&lt;p&gt;可选的字体描述符&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LoadFontFaceFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LoadFontFaceSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LoadFontFaceSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="status" type="String">
                <description>&lt;p&gt;加载字体结果&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LoginOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="LoginCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="LoginFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="LoginSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="timeout" type="Number">
                <description>&lt;p&gt;超时时间，单位ms&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="LoginSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="code" type="String">
                <description>&lt;p&gt;用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用 &lt;a href="(auth.code2Session)"&gt;auth.code2Session&lt;/a&gt;，使用 code 换取 openid 和 session_key 等信息&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="MakePhoneCallOption" superclass="None">
        <methods/>
        <properties>
            <property name="phoneNumber" type="String">
                <description>&lt;p&gt;需要拨打的电话号码&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="MakePhoneCallCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="MakePhoneCallFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="MakePhoneCallSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="MapPostion" superclass="None">
        <methods/>
        <properties>
            <property name="latitude" type="Number">
                <description>&lt;p&gt;纬度&lt;/p&gt;
</description>
            </property>
            <property name="longitude" type="Number">
                <description>&lt;p&gt;经度&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="MiniProgram" superclass="None">
        <methods/>
        <properties>
            <property name="appId" type="String">
                <description>&lt;p&gt;小程序 appId&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="MkdirFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail no such file or directory ${dirPath}&amp;#39;: 上级目录不存在;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail permission denied, open ${dirPath}&amp;#39;: 指定的 filePath 路径没有写权限;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail file already exists ${dirPath}&amp;#39;: 有同名文件或目录;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="MkdirOption" superclass="None">
        <methods/>
        <properties>
            <property name="dirPath" type="String">
                <description>&lt;p&gt;创建的目录路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="MkdirCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="MkdirFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="recursive" type="Boolean">
                <description>&lt;p&gt;是否在递归创建该目录的上级目录后再创建该目录。如果对应的上级目录已经存在，则不创建该上级目录。如 dirPath 为 a/b/c/d 且 recursive 为 true，将创建 a 目录，再在 a 目录下创建 b 目录，以此类推直至创建 a/b/c 目录下的 d 目录。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="MkdirSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="MoveToLocationOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="MoveToLocationCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="MoveToLocationFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="latitude" type="Number">
                <description>&lt;p&gt;纬度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="longitude" type="Number">
                <description>&lt;p&gt;经度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="MoveToLocationSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="MuteOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="MuteCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="MuteFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="MuteSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="NavigateBackMiniProgramOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="NavigateBackMiniProgramCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="extraData" type="IAnyObject">
                <description>&lt;p&gt;需要返回给上一个小程序的数据，上一个小程序可在 &lt;code&gt;App.onShow&lt;/code&gt; 中获取到这份数据。 &lt;a href="(App)"&gt;详情&lt;/a&gt;。&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="NavigateBackMiniProgramFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="NavigateBackMiniProgramSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="NavigateBackOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="NavigateBackCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="delta" type="Number">
                <description>&lt;p&gt;返回的页面数，如果 delta 大于现有页面数，则返回到首页。&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="NavigateBackFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="NavigateBackSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="NavigateToMiniProgramOption" superclass="None">
        <methods/>
        <properties>
            <property name="appId" type="String">
                <description>&lt;p&gt;要打开的小程序 appId&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="NavigateToMiniProgramCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="envVersion" type="None">
                <description>&lt;p&gt;要打开的小程序版本。仅在当前小程序为开发版或体验版时此参数有效。如果当前小程序是正式版，则打开的小程序必定是正式版。&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;develop&amp;#39;: 开发版;&lt;/li&gt;
&lt;li&gt;&amp;#39;trial&amp;#39;: 体验版;&lt;/li&gt;
&lt;li&gt;&amp;#39;release&amp;#39;: 正式版;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="extraData" type="IAnyObject">
                <description>&lt;p&gt;需要传递给目标小程序的数据，目标小程序可在 &lt;code&gt;App.onLaunch&lt;/code&gt;，&lt;code&gt;App.onShow&lt;/code&gt; 中获取到这份数据。如果跳转的是小游戏，可以在 &lt;a href="(wx.onShow)"&gt;wx.onShow&lt;/a&gt;、&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html"&gt;wx.getLaunchOptionsSync&lt;/a&gt; 中可以获取到这份数据数据。&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="NavigateToMiniProgramFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="path" type="String">
                <description>&lt;p&gt;打开的页面路径，如果为空则打开首页。path 中 ? 后面的部分会成为 query，在小程序的 &lt;code&gt;App.onLaunch&lt;/code&gt;、&lt;code&gt;App.onShow&lt;/code&gt; 和 &lt;code&gt;Page.onLoad&lt;/code&gt; 的回调函数或小游戏的 &lt;a href="(wx.onShow)"&gt;wx.onShow&lt;/a&gt; 回调函数、&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html"&gt;wx.getLaunchOptionsSync&lt;/a&gt; 中可以获取到 query 数据。对于小游戏，可以只传入 query 部分，来实现传参效果，如：传入 &amp;quot;?foo=bar&amp;quot;。&lt;/p&gt;
</description>
            </property>
            <property name="success" type="NavigateToMiniProgramSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="NavigateToOption" superclass="None">
        <methods/>
        <properties>
            <property name="url" type="String">
                <description>&lt;p&gt;需要跳转的应用内非 tabBar 的页面的路径, 路径后可以带参数。参数与路径之间使用 &lt;code&gt;?&lt;/code&gt; 分隔，参数键与参数值用 &lt;code&gt;=&lt;/code&gt; 相连，不同参数用 &lt;code&gt;&amp;amp;&lt;/code&gt; 分隔；如 &amp;#39;path?key=value&amp;amp;key2=value2&amp;#39;&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="NavigateToCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="events" type="IAnyObject">
                <description>&lt;p&gt;页面间通信接口，用于监听被打开页面发送到当前页面的数据。基础库 2.7.3 开始支持。&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="NavigateToFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="NavigateToSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="NodeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="node" type="IAnyObject">
                <description>&lt;p&gt;节点对应的 Node 实例&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="NotifyBLECharacteristicValueChangeOption" superclass="None">
        <methods/>
        <properties>
            <property name="characteristicId" type="String">
                <description>&lt;p&gt;蓝牙特征值的 uuid&lt;/p&gt;
</description>
            </property>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;蓝牙设备 id&lt;/p&gt;
</description>
            </property>
            <property name="serviceId" type="String">
                <description>&lt;p&gt;蓝牙特征值对应服务的 uuid&lt;/p&gt;
</description>
            </property>
            <property name="state" type="Boolean">
                <description>&lt;p&gt;是否启用 notify&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="NotifyBLECharacteristicValueChangeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="NotifyBLECharacteristicValueChangeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="NotifyBLECharacteristicValueChangeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ObserveCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="boundingClientRect" type="BoundingClientRectResult">
                <description>&lt;p&gt;目标边界&lt;/p&gt;
</description>
            </property>
            <property name="intersectionRatio" type="Number">
                <description>&lt;p&gt;相交比例&lt;/p&gt;
</description>
            </property>
            <property name="intersectionRect" type="IntersectionRectResult">
                <description>&lt;p&gt;相交区域的边界&lt;/p&gt;
</description>
            </property>
            <property name="relativeRect" type="RelativeRectResult">
                <description>&lt;p&gt;参照区域的边界&lt;/p&gt;
</description>
            </property>
            <property name="time" type="Number">
                <description>&lt;p&gt;相交检测时的时间戳&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnAccelerometerChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="x" type="Number">
                <description>&lt;p&gt;X 轴&lt;/p&gt;
</description>
            </property>
            <property name="y" type="Number">
                <description>&lt;p&gt;Y 轴&lt;/p&gt;
</description>
            </property>
            <property name="z" type="Number">
                <description>&lt;p&gt;Z 轴&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnAppShowCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="path" type="String">
                <description>&lt;p&gt;小程序切前台的路径&lt;/p&gt;
</description>
            </property>
            <property name="query" type="IAnyObject">
                <description>&lt;p&gt;小程序切前台的 query 参数&lt;/p&gt;
</description>
            </property>
            <property name="referrerInfo" type="ResultReferrerInfo">
                <description>&lt;p&gt;来源信息。从另一个小程序、公众号或 App 进入小程序时返回。否则返回 &lt;code&gt;{}&lt;/code&gt;。(参见后文注意)&lt;/p&gt;
</description>
            </property>
            <property name="scene" type="Number">
                <description>&lt;p&gt;小程序切前台的&lt;a href="(scene)"&gt;场景值&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="shareTicket" type="String">
                <description>&lt;p&gt;shareTicket，详见&lt;a href="(open-ability/share)"&gt;获取更多转发信息&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnBLECharacteristicValueChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="characteristicId" type="String">
                <description>&lt;p&gt;蓝牙特征值的 uuid&lt;/p&gt;
</description>
            </property>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;蓝牙设备 id&lt;/p&gt;
</description>
            </property>
            <property name="serviceId" type="String">
                <description>&lt;p&gt;蓝牙特征值对应服务的 uuid&lt;/p&gt;
</description>
            </property>
            <property name="value" type="ArrayBuffer">
                <description>&lt;p&gt;特征值最新的值&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnBLEConnectionStateChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="connected" type="Boolean">
                <description>&lt;p&gt;是否处于已连接状态&lt;/p&gt;
</description>
            </property>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;蓝牙设备ID&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnBackgroundFetchDataOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="OnBackgroundFetchDataCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="OnBackgroundFetchDataFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="OnBackgroundFetchDataSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnBeaconServiceChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="available" type="Boolean">
                <description>&lt;p&gt;服务目前是否可用&lt;/p&gt;
</description>
            </property>
            <property name="discovering" type="Boolean">
                <description>&lt;p&gt;目前是否处于搜索状态&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnBeaconUpdateCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="beacons" type="None">
                <description>&lt;p&gt;当前搜寻到的所有 iBeacon 设备列表&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnBluetoothAdapterStateChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="available" type="Boolean">
                <description>&lt;p&gt;蓝牙适配器是否可用&lt;/p&gt;
</description>
            </property>
            <property name="discovering" type="Boolean">
                <description>&lt;p&gt;蓝牙适配器是否处于搜索状态&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnCameraFrameCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="ArrayBuffer">
                <description>&lt;p&gt;图像像素点数据，一维数组，每四项表示一个像素点的 rgba&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;图像数据矩形的高度&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;图像数据矩形的宽度&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnCheckForUpdateCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="hasUpdate" type="Boolean">
                <description>&lt;p&gt;是否有新版本&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnCloseCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="isEnded" type="Boolean">
                <description>&lt;p&gt;视频是否是在用户完整观看的情况下被关闭的&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnCompassChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="accuracy" type="None">
                <description>&lt;p&gt;精度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="direction" type="Number">
                <description>&lt;p&gt;面对的方向度数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnDeviceMotionChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="alpha" type="Number">
                <description>&lt;p&gt;当 手机坐标 X/Y 和 地球 X/Y 重合时，绕着 Z 轴转动的夹角为 alpha，范围值为 [0, 2*PI)。逆时针转动为正。&lt;/p&gt;
</description>
            </property>
            <property name="beta" type="Number">
                <description>&lt;p&gt;当手机坐标 Y/Z 和地球 Y/Z 重合时，绕着 X 轴转动的夹角为 beta。范围值为 [-1*PI, PI) 。顶部朝着地球表面转动为正。也有可能朝着用户为正。&lt;/p&gt;
</description>
            </property>
            <property name="gamma" type="Number">
                <description>&lt;p&gt;当手机 X/Z 和地球 X/Z 重合时，绕着 Y 轴转动的夹角为 gamma。范围值为 [-1*PI/2, PI/2)。右边朝着地球表面转动为正。&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnFrameRecordedCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="frameBuffer" type="ArrayBuffer">
                <description>&lt;p&gt;录音分片数据&lt;/p&gt;
</description>
            </property>
            <property name="isLastFrame" type="Boolean">
                <description>&lt;p&gt;当前帧是否正常录音结束前的最后一帧&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnGetWifiListCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="wifiList" type="None">
                <description>&lt;p&gt;Wi-Fi 列表数据&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnGyroscopeChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="x" type="Number">
                <description>&lt;p&gt;x 轴的角速度&lt;/p&gt;
</description>
            </property>
            <property name="y" type="Number">
                <description>&lt;p&gt;y 轴的角速度&lt;/p&gt;
</description>
            </property>
            <property name="z" type="Number">
                <description>&lt;p&gt;z 轴的角速度&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnHCEMessageCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="ArrayBuffer">
                <description>&lt;p&gt;&lt;code&gt;messageType=1&lt;/code&gt; 时 ,客户端接收到 NFC 设备的指令&lt;/p&gt;
</description>
            </property>
            <property name="messageType" type="None">
                <description>&lt;p&gt;消息类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: HCE APDU Command类型，小程序需对此指令进行处理，并调用 sendHCEMessage 接口返回处理指令;&lt;/li&gt;
&lt;li&gt;2: 设备离场事件类型;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="reason" type="Number">
                <description>&lt;p&gt;&lt;code&gt;messageType=2&lt;/code&gt; 时，原因&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnLocalServiceFoundCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="ip" type="String">
                <description>&lt;p&gt;服务的 ip 地址&lt;/p&gt;
</description>
            </property>
            <property name="port" type="Number">
                <description>&lt;p&gt;服务的端口&lt;/p&gt;
</description>
            </property>
            <property name="serviceName" type="String">
                <description>&lt;p&gt;服务的名称&lt;/p&gt;
</description>
            </property>
            <property name="serviceType" type="String">
                <description>&lt;p&gt;服务的类型&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnLocalServiceLostCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="serviceName" type="String">
                <description>&lt;p&gt;服务的名称&lt;/p&gt;
</description>
            </property>
            <property name="serviceType" type="String">
                <description>&lt;p&gt;服务的类型&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnLocalServiceResolveFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="serviceName" type="String">
                <description>&lt;p&gt;服务的名称&lt;/p&gt;
</description>
            </property>
            <property name="serviceType" type="String">
                <description>&lt;p&gt;服务的类型&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnLocationChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="accuracy" type="Number">
                <description>&lt;p&gt;位置的精确度&lt;/p&gt;
</description>
            </property>
            <property name="altitude" type="Number">
                <description>&lt;p&gt;高度，单位 m&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="horizontalAccuracy" type="Number">
                <description>&lt;p&gt;水平精度，单位 m&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="latitude" type="Number">
                <description>&lt;p&gt;纬度，范围为 -90~90，负数表示南纬&lt;/p&gt;
</description>
            </property>
            <property name="longitude" type="Number">
                <description>&lt;p&gt;经度，范围为 -180~180，负数表示西经&lt;/p&gt;
</description>
            </property>
            <property name="speed" type="Number">
                <description>&lt;p&gt;速度，单位 m/s&lt;/p&gt;
</description>
            </property>
            <property name="verticalAccuracy" type="Number">
                <description>&lt;p&gt;垂直精度，单位 m（Android 无法获取，返回 0）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnMemoryWarningCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="level" type="None">
                <description>&lt;p&gt;内存告警等级，只有 Android 才有，对应系统宏定义&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5: TRIM_MEMORY_RUNNING_MODERATE;&lt;/li&gt;
&lt;li&gt;10: TRIM_MEMORY_RUNNING_LOW;&lt;/li&gt;
&lt;li&gt;15: TRIM_MEMORY_RUNNING_CRITICAL;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnNetworkStatusChangeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="isConnected" type="Boolean">
                <description>&lt;p&gt;当前是否有网络连接&lt;/p&gt;
</description>
            </property>
            <property name="networkType" type="None">
                <description>&lt;p&gt;网络类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;wifi&amp;#39;: wifi 网络;&lt;/li&gt;
&lt;li&gt;&amp;#39;2g&amp;#39;: 2g 网络;&lt;/li&gt;
&lt;li&gt;&amp;#39;3g&amp;#39;: 3g 网络;&lt;/li&gt;
&lt;li&gt;&amp;#39;4g&amp;#39;: 4g 网络;&lt;/li&gt;
&lt;li&gt;&amp;#39;unknown&amp;#39;: Android 下不常见的网络类型;&lt;/li&gt;
&lt;li&gt;&amp;#39;none&amp;#39;: 无网络;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnOpenCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;连接成功的 HTTP 响应 Header&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.0.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnPageNotFoundCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="isEntryPage" type="Boolean">
                <description>&lt;p&gt;是否本次启动的首个页面（例如从分享等入口进来，首个页面是开发者配置的分享页面）&lt;/p&gt;
</description>
            </property>
            <property name="path" type="String">
                <description>&lt;p&gt;不存在页面的路径&lt;/p&gt;
</description>
            </property>
            <property name="query" type="IAnyObject">
                <description>&lt;p&gt;打开不存在页面的 query 参数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnSocketMessageCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description>&lt;p&gt;服务器返回的消息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnSocketOpenCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;连接成功的 HTTP 响应 Header&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.0.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnStopCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="duration" type="Number">
                <description>&lt;p&gt;录音总时长，单位：ms&lt;/p&gt;
</description>
            </property>
            <property name="fileSize" type="Number">
                <description>&lt;p&gt;录音文件大小，单位：Byte&lt;/p&gt;
</description>
            </property>
            <property name="tempFilePath" type="String">
                <description>&lt;p&gt;录音文件的临时路径&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnWifiConnectedCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="wifi" type="WifiInfo">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/WifiInfo.html"&gt;WifiInfo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wi-Fi 信息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OnWindowResizeCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="size" type="Size">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="OpenBluetoothAdapterOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="OpenBluetoothAdapterCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="OpenBluetoothAdapterFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="OpenBluetoothAdapterSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OpenCardOption" superclass="None">
        <methods/>
        <properties>
            <property name="cardList" type="None">
                <description>&lt;p&gt;需要打开的卡券列表&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="OpenCardCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="OpenCardFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="OpenCardSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OpenCardRequestInfo" superclass="None">
        <methods/>
        <properties>
            <property name="cardId" type="String">
                <description>&lt;p&gt;卡券 ID&lt;/p&gt;
</description>
            </property>
            <property name="code" type="String">
                <description>&lt;p&gt;由 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.addCard.html"&gt;wx.addCard&lt;/a&gt; 的返回对象中的加密 code 通过解密后得到，解密请参照：&lt;a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1499332673_Unm7V"&gt;code 解码接口&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OpenDocumentOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;文件路径，可通过 downloadFile 获得&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="OpenDocumentCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="OpenDocumentFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="fileType" type="None">
                <description>&lt;p&gt;文件类型，指定文件类型打开文件&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;doc&amp;#39;: doc 格式;&lt;/li&gt;
&lt;li&gt;&amp;#39;docx&amp;#39;: docx 格式;&lt;/li&gt;
&lt;li&gt;&amp;#39;xls&amp;#39;: xls 格式;&lt;/li&gt;
&lt;li&gt;&amp;#39;xlsx&amp;#39;: xlsx 格式;&lt;/li&gt;
&lt;li&gt;&amp;#39;ppt&amp;#39;: ppt 格式;&lt;/li&gt;
&lt;li&gt;&amp;#39;pptx&amp;#39;: pptx 格式;&lt;/li&gt;
&lt;li&gt;&amp;#39;pdf&amp;#39;: pdf 格式;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="OpenDocumentSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OpenLocationOption" superclass="None">
        <methods/>
        <properties>
            <property name="latitude" type="Number">
                <description>&lt;p&gt;纬度，范围为-90~90，负数表示南纬。使用 gcj02 国测局坐标系&lt;/p&gt;
</description>
            </property>
            <property name="longitude" type="Number">
                <description>&lt;p&gt;经度，范围为-180~180，负数表示西经。使用 gcj02 国测局坐标系&lt;/p&gt;
</description>
            </property>
            <property name="address" type="String">
                <description>&lt;p&gt;地址的详细说明&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="OpenLocationCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="OpenLocationFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="name" type="String">
                <description>&lt;p&gt;位置名&lt;/p&gt;
</description>
            </property>
            <property name="scale" type="Number">
                <description>&lt;p&gt;缩放比例，范围5~18&lt;/p&gt;
</description>
            </property>
            <property name="success" type="OpenLocationSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OpenSettingOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="OpenSettingCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="OpenSettingFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="OpenSettingSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OpenSettingSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="authSetting" type="AuthSetting">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/AuthSetting.html"&gt;AuthSetting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户授权结果&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="PageScrollToOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="PageScrollToCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;滚动动画的时长，单位 ms&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PageScrollToFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="scrollTop" type="Number">
                <description>&lt;p&gt;滚动到页面的目标位置，单位 px&lt;/p&gt;
</description>
            </property>
            <property name="selector" type="String">
                <description>&lt;p&gt;选择器&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.3&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PageScrollToSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PauseBGMOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="PauseBGMCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PauseBGMFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PauseBGMSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PauseBackgroundAudioOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="PauseBackgroundAudioCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PauseBackgroundAudioFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PauseBackgroundAudioSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PauseVoiceOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="PauseVoiceCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PauseVoiceFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PauseVoiceSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PlayBGMOption" superclass="None">
        <methods/>
        <properties>
            <property name="url" type="String">
                <description>&lt;p&gt;加入背景混音的资源地址&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="PlayBGMCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PlayBGMFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PlayBGMSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PlayBackgroundAudioOption" superclass="None">
        <methods/>
        <properties>
            <property name="dataUrl" type="String">
                <description>&lt;p&gt;音乐链接，目前支持的格式有 m4a, aac, mp3, wav&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="PlayBackgroundAudioCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="coverImgUrl" type="String">
                <description>&lt;p&gt;封面URL&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PlayBackgroundAudioFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PlayBackgroundAudioSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="title" type="String">
                <description>&lt;p&gt;音乐标题&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PlayOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="PlayCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PlayFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PlaySuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PlayVoiceOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;需要播放的语音文件的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="PlayVoiceCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;指定录音时长，到达指定的录音时长后会自动停止录音，单位：秒&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PlayVoiceFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PlayVoiceSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Plugin" superclass="None">
        <methods/>
        <properties>
            <property name="appId" type="String">
                <description>&lt;p&gt;插件 appId&lt;/p&gt;
</description>
            </property>
            <property name="version" type="String">
                <description>&lt;p&gt;插件版本号&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PreviewImageOption" superclass="None">
        <methods/>
        <properties>
            <property name="urls" type="None">
                <description>&lt;p&gt;需要预览的图片链接列表。{% version(&amp;#39;2.2.3&amp;#39;) %} 起支持云文件ID。&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="PreviewImageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="current" type="String">
                <description>&lt;p&gt;当前显示图片的链接&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="PreviewImageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="PreviewImageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Properties" superclass="None">
        <methods/>
        <properties>
            <property name="indicate" type="Boolean">
                <description>&lt;p&gt;该特征值是否支持 indicate 操作&lt;/p&gt;
</description>
            </property>
            <property name="notify" type="Boolean">
                <description>&lt;p&gt;该特征值是否支持 notify 操作&lt;/p&gt;
</description>
            </property>
            <property name="read" type="Boolean">
                <description>&lt;p&gt;该特征值是否支持 read 操作&lt;/p&gt;
</description>
            </property>
            <property name="write" type="Boolean">
                <description>&lt;p&gt;该特征值是否支持 write 操作&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ReLaunchOption" superclass="None">
        <methods/>
        <properties>
            <property name="url" type="String">
                <description>&lt;p&gt;需要跳转的应用内页面路径，路径后可以带参数。参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&amp;amp;分隔；如 &amp;#39;path?key=value&amp;amp;key2=value2&amp;#39;&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ReLaunchCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ReLaunchFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ReLaunchSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ReadBLECharacteristicValueOption" superclass="None">
        <methods/>
        <properties>
            <property name="characteristicId" type="String">
                <description>&lt;p&gt;蓝牙特征值的 uuid&lt;/p&gt;
</description>
            </property>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;蓝牙设备 id&lt;/p&gt;
</description>
            </property>
            <property name="serviceId" type="String">
                <description>&lt;p&gt;蓝牙特征值对应服务的 uuid&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ReadBLECharacteristicValueCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ReadBLECharacteristicValueFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ReadBLECharacteristicValueSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ReadFileFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail no such file or directory, open ${filePath}&amp;#39;: 指定的 filePath 所在目录不存在;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail permission denied, open ${dirPath}&amp;#39;: 指定的 filePath 路径没有读权限;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ReadFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;要读取的文件的路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ReadFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="encoding" type="None">
                <description>&lt;p&gt;指定读取文件的字符编码，如果不传 encoding，则以 ArrayBuffer 格式读取文件的二进制内容&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;ascii&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;base64&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;binary&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;hex&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;ucs2&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;ucs-2&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf16le&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf-16le&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf-8&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf8&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;latin1&amp;#39;: ;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="fail" type="ReadFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ReadFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ReadFileSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description>&lt;p&gt;文件内容&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ReaddirFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail no such file or directory ${dirPath}&amp;#39;: 目录不存在;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail not a directory ${dirPath}&amp;#39;: dirPath 不是目录;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail permission denied, open ${dirPath}&amp;#39;: 指定的 filePath 路径没有读权限;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ReaddirOption" superclass="None">
        <methods/>
        <properties>
            <property name="dirPath" type="String">
                <description>&lt;p&gt;要读取的目录路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ReaddirCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ReaddirFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ReaddirSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ReaddirSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="files" type="None">
                <description>&lt;p&gt;指定目录下的文件名数组。&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="RecorderManagerOnErrorCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RecorderManagerStartOption" superclass="None">
        <methods/>
        <properties>
            <property name="audioSource" type="None">
                <description>&lt;p&gt;指定录音的音频输入源，可通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.getAvailableAudioSources.html"&gt;wx.getAvailableAudioSources()&lt;/a&gt; 获取当前可用的音频源&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;auto&amp;#39;: 自动设置，默认使用手机麦克风，插上耳麦后自动切换使用耳机麦克风，所有平台适用;&lt;/li&gt;
&lt;li&gt;&amp;#39;buildInMic&amp;#39;: 手机麦克风，仅限 iOS;&lt;/li&gt;
&lt;li&gt;&amp;#39;headsetMic&amp;#39;: 耳机麦克风，仅限 iOS;&lt;/li&gt;
&lt;li&gt;&amp;#39;mic&amp;#39;: 麦克风（没插耳麦时是手机麦克风，插耳麦时是耳机麦克风），仅限 Android;&lt;/li&gt;
&lt;li&gt;&amp;#39;camcorder&amp;#39;: 同 mic，适用于录制音视频内容，仅限 Android;&lt;/li&gt;
&lt;li&gt;&amp;#39;voice_communication&amp;#39;: 同 mic，适用于实时沟通，仅限 Android;&lt;/li&gt;
&lt;li&gt;&amp;#39;voice_recognition&amp;#39;: 同 mic，适用于语音识别，仅限 Android;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;录音的时长，单位 ms，最大值 600000（10 分钟）&lt;/p&gt;
</description>
            </property>
            <property name="encodeBitRate" type="Number">
                <description>&lt;p&gt;编码码率，有效值见下表格&lt;/p&gt;
</description>
            </property>
            <property name="format" type="None">
                <description>&lt;p&gt;音频格式&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;mp3&amp;#39;: mp3 格式;&lt;/li&gt;
&lt;li&gt;&amp;#39;aac&amp;#39;: aac 格式;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="frameSize" type="Number">
                <description>&lt;p&gt;指定帧大小，单位 KB。传入 frameSize 后，每录制指定帧大小的内容后，会回调录制的文件内容，不指定则不会回调。暂仅支持 mp3 格式。&lt;/p&gt;
</description>
            </property>
            <property name="numberOfChannels" type="None">
                <description>&lt;p&gt;录音通道数&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1: 1 个通道;&lt;/li&gt;
&lt;li&gt;2: 2 个通道;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="sampleRate" type="None">
                <description>&lt;p&gt;采样率&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8000: 8000 采样率;&lt;/li&gt;
&lt;li&gt;11025: 11025 采样率;&lt;/li&gt;
&lt;li&gt;12000: 12000 采样率;&lt;/li&gt;
&lt;li&gt;16000: 16000 采样率;&lt;/li&gt;
&lt;li&gt;22050: 22050 采样率;&lt;/li&gt;
&lt;li&gt;24000: 24000 采样率;&lt;/li&gt;
&lt;li&gt;32000: 32000 采样率;&lt;/li&gt;
&lt;li&gt;44100: 44100 采样率;&lt;/li&gt;
&lt;li&gt;48000: 48000 采样率;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Rect" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;下边界坐标，单位：px&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;高度，单位：px&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;左边界坐标，单位：px&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;右边界坐标，单位：px&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;上边界坐标，单位：px&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;宽度，单位：px&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RedirectToOption" superclass="None">
        <methods/>
        <properties>
            <property name="url" type="String">
                <description>&lt;p&gt;需要跳转的应用内非 tabBar 的页面的路径, 路径后可以带参数。参数与路径之间使用 &lt;code&gt;?&lt;/code&gt; 分隔，参数键与参数值用 &lt;code&gt;=&lt;/code&gt; 相连，不同参数用 &lt;code&gt;&amp;amp;&lt;/code&gt; 分隔；如 &amp;#39;path?key=value&amp;amp;key2=value2&amp;#39;&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="RedirectToCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="RedirectToFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RedirectToSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RedoOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="RedoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="RedoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RedoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RelativeRectResult" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;下边界&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;左边界&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;右边界&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;上边界&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RelativeToMargins" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;节点布局区域的下边界&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;节点布局区域的左边界&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;节点布局区域的右边界&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;节点布局区域的上边界&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RelativeToViewportMargins" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;节点布局区域的下边界&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;节点布局区域的左边界&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;节点布局区域的右边界&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;节点布局区域的上边界&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RemoteInfo" superclass="None">
        <methods/>
        <properties>
            <property name="address" type="String">
                <description>&lt;p&gt;发送消息的 socket 的地址&lt;/p&gt;
</description>
            </property>
            <property name="family" type="String">
                <description>&lt;p&gt;使用的协议族，为 IPv4 或者 IPv6&lt;/p&gt;
</description>
            </property>
            <property name="port" type="Number">
                <description>&lt;p&gt;端口号&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;message 的大小，单位：字节&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RemoveFormatOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="RemoveFormatCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="RemoveFormatFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RemoveFormatSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RemoveSavedFileFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail file not exist&amp;#39;: 指定的 tempFilePath 找不到文件;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RemoveStorageOption" superclass="None">
        <methods/>
        <properties>
            <property name="key" type="String">
                <description>&lt;p&gt;本地缓存中指定的 key&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="RemoveStorageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="RemoveStorageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RemoveStorageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RemoveTabBarBadgeOption" superclass="None">
        <methods/>
        <properties>
            <property name="index" type="Number">
                <description>&lt;p&gt;tabBar 的哪一项，从左边算起&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="RemoveTabBarBadgeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="RemoveTabBarBadgeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RemoveTabBarBadgeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RenameFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail permission denied, rename ${oldPath} -&amp;gt; ${newPath}&amp;#39;: 指定源文件或目标文件没有写权限;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail no such file or directory, rename ${oldPath} -&amp;gt; ${newPath}&amp;#39;: 源文件不存在，或目标文件路径的上层目录不存在;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RenameOption" superclass="None">
        <methods/>
        <properties>
            <property name="newPath" type="String">
                <description>&lt;p&gt;新文件路径&lt;/p&gt;
</description>
            </property>
            <property name="oldPath" type="String">
                <description>&lt;p&gt;源文件路径，可以是普通文件或目录&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="RenameCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="RenameFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RenameSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RenderingContext" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="RequestOption" superclass="None">
        <methods/>
        <properties>
            <property name="url" type="String">
                <description>&lt;p&gt;开发者服务器接口地址&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="RequestCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="data" type="None">
                <description>&lt;p&gt;请求的参数&lt;/p&gt;
</description>
            </property>
            <property name="dataType" type="None">
                <description>&lt;p&gt;返回的数据格式&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;json&amp;#39;: 返回的数据为 JSON，返回后会对返回的数据进行一次 JSON.parse;&lt;/li&gt;
&lt;li&gt;&amp;#39;其他&amp;#39;: 不对返回的内容进行 JSON.parse;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="fail" type="RequestFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;设置请求的 header，header 中不能设置 Referer。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;content-type&lt;/code&gt; 默认为 &lt;code&gt;application/json&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="method" type="None">
                <description>&lt;p&gt;HTTP 请求方法&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;OPTIONS&amp;#39;: HTTP 请求 OPTIONS;&lt;/li&gt;
&lt;li&gt;&amp;#39;GET&amp;#39;: HTTP 请求 GET;&lt;/li&gt;
&lt;li&gt;&amp;#39;HEAD&amp;#39;: HTTP 请求 HEAD;&lt;/li&gt;
&lt;li&gt;&amp;#39;POST&amp;#39;: HTTP 请求 POST;&lt;/li&gt;
&lt;li&gt;&amp;#39;PUT&amp;#39;: HTTP 请求 PUT;&lt;/li&gt;
&lt;li&gt;&amp;#39;DELETE&amp;#39;: HTTP 请求 DELETE;&lt;/li&gt;
&lt;li&gt;&amp;#39;TRACE&amp;#39;: HTTP 请求 TRACE;&lt;/li&gt;
&lt;li&gt;&amp;#39;CONNECT&amp;#39;: HTTP 请求 CONNECT;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="responseType" type="None">
                <description>&lt;p&gt;响应的数据类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;text&amp;#39;: 响应的数据为文本;&lt;/li&gt;
&lt;li&gt;&amp;#39;arraybuffer&amp;#39;: 响应的数据为 ArrayBuffer;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RequestSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RequestPaymentOption" superclass="None">
        <methods/>
        <properties>
            <property name="nonceStr" type="String">
                <description>&lt;p&gt;随机字符串，长度为32个字符以下&lt;/p&gt;
</description>
            </property>
            <property name="package" type="String">
                <description>&lt;p&gt;统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=***&lt;/p&gt;
</description>
            </property>
            <property name="paySign" type="String">
                <description>&lt;p&gt;签名，具体签名方案参见 &lt;a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&amp;amp;index=3"&gt;小程序支付接口文档&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="timeStamp" type="String">
                <description>&lt;p&gt;时间戳，从 1970 年 1 月 1 日 00:00:00 至今的秒数，即当前的时间&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="RequestPaymentCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="RequestPaymentFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="signType" type="None">
                <description>&lt;p&gt;签名算法&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;MD5&amp;#39;: MD5;&lt;/li&gt;
&lt;li&gt;&amp;#39;HMAC-SHA256&amp;#39;: HMAC-SHA256;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="success" type="RequestPaymentSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RequestSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description>&lt;p&gt;开发者服务器返回的数据&lt;/p&gt;
</description>
            </property>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;开发者服务器返回的 HTTP Response Header&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="statusCode" type="Number">
                <description>&lt;p&gt;开发者服务器返回的 HTTP 状态码&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="RequestTaskOnHeadersReceivedCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;开发者服务器返回的 HTTP Response Header&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ResultBlueToothDevice" superclass="None">
        <methods/>
        <properties>
            <property name="RSSI" type="Number">
                <description>&lt;p&gt;当前蓝牙设备的信号强度&lt;/p&gt;
</description>
            </property>
            <property name="advertisData" type="ArrayBuffer">
                <description>&lt;p&gt;当前蓝牙设备的广播数据段中的 ManufacturerData 数据段。&lt;/p&gt;
</description>
            </property>
            <property name="advertisServiceUUIDs" type="None">
                <description>&lt;p&gt;当前蓝牙设备的广播数据段中的 ServiceUUIDs 数据段&lt;/p&gt;
</description>
            </property>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;用于区分设备的 id&lt;/p&gt;
</description>
            </property>
            <property name="localName" type="String">
                <description>&lt;p&gt;当前蓝牙设备的广播数据段中的 LocalName 数据段&lt;/p&gt;
</description>
            </property>
            <property name="name" type="String">
                <description>&lt;p&gt;蓝牙设备名称，某些设备可能没有&lt;/p&gt;
</description>
            </property>
            <property name="serviceData" type="IAnyObject">
                <description>&lt;p&gt;当前蓝牙设备的广播数据段中的 ServiceData 数据段&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ResultReferrerInfo" superclass="None">
        <methods/>
        <properties>
            <property name="appId" type="String">
                <description>&lt;p&gt;来源小程序、公众号或 App 的 appId&lt;/p&gt;
</description>
            </property>
            <property name="extraData" type="IAnyObject">
                <description>&lt;p&gt;来源小程序传过来的数据，scene=1037或1038时支持&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ResumeBGMOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ResumeBGMCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ResumeBGMFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ResumeBGMSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RewardedVideoAdOnErrorCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errCode" type="None">
                <description>&lt;p&gt;错误码&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1000: 后端接口调用失败;&lt;/li&gt;
&lt;li&gt;1001: 参数错误;&lt;/li&gt;
&lt;li&gt;1002: 广告单元无效;&lt;/li&gt;
&lt;li&gt;1003: 内部错误;&lt;/li&gt;
&lt;li&gt;1004: 无合适的广告;&lt;/li&gt;
&lt;li&gt;1005: 广告组件审核中;&lt;/li&gt;
&lt;li&gt;1006: 广告组件被驳回;&lt;/li&gt;
&lt;li&gt;1007: 广告组件被封禁;&lt;/li&gt;
&lt;li&gt;1008: 广告单元已关闭;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.2.2&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RmdirFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail no such file or directory ${dirPath}&amp;#39;: 目录不存在;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail directory not empty&amp;#39;: 目录不为空;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail permission denied, open ${dirPath}&amp;#39;: 指定的 dirPath 路径没有写权限;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RmdirOption" superclass="None">
        <methods/>
        <properties>
            <property name="dirPath" type="String">
                <description>&lt;p&gt;要删除的目录路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="RmdirCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="RmdirFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="recursive" type="Boolean">
                <description>&lt;p&gt;是否递归删除目录。如果为 true，则删除该目录和该目录下的所有子目录以及文件。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="RmdirSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SafeAreaResult" superclass="None">
        <methods/>
        <properties>
            <property name="bottom" type="Number">
                <description>&lt;p&gt;安全区域右下角纵坐标&lt;/p&gt;
</description>
            </property>
            <property name="height" type="Number">
                <description>&lt;p&gt;安全区域的高度，单位逻辑像素&lt;/p&gt;
</description>
            </property>
            <property name="left" type="Number">
                <description>&lt;p&gt;安全区域左上角横坐标&lt;/p&gt;
</description>
            </property>
            <property name="right" type="Number">
                <description>&lt;p&gt;安全区域右下角横坐标&lt;/p&gt;
</description>
            </property>
            <property name="top" type="Number">
                <description>&lt;p&gt;安全区域左上角纵坐标&lt;/p&gt;
</description>
            </property>
            <property name="width" type="Number">
                <description>&lt;p&gt;安全区域的宽度，单位逻辑像素&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SaveFileFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail tempFilePath file not exist&amp;#39;: 指定的 tempFilePath 找不到文件;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail permission denied, open &amp;quot;${filePath}&amp;quot;&amp;#39;: 指定的 filePath 路径没有写权限;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail no such file or directory &amp;quot;${dirPath}&amp;quot;&amp;#39;: 上级目录不存在;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SaveImageToPhotosAlbumOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;图片文件路径，可以是临时文件路径或永久文件路径，不支持网络图片路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SaveImageToPhotosAlbumCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SaveImageToPhotosAlbumFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SaveImageToPhotosAlbumSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SaveVideoToPhotosAlbumOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;视频文件路径，可以是临时文件路径也可以是永久文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SaveVideoToPhotosAlbumCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SaveVideoToPhotosAlbumFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SaveVideoToPhotosAlbumSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ScanCodeOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ScanCodeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ScanCodeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="onlyFromCamera" type="Boolean">
                <description>&lt;p&gt;是否只能从相机扫码，不允许从相册选择图片&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="scanType" type="Array">
                <description>&lt;p&gt;扫码类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;barCode&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;qrCode&amp;#39;: 二维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;datamatrix&amp;#39;: Data Matrix 码;&lt;/li&gt;
&lt;li&gt;&amp;#39;pdf417&amp;#39;: PDF417 条码;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ScanCodeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ScanCodeSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="charSet" type="String">
                <description>&lt;p&gt;所扫码的字符集&lt;/p&gt;
</description>
            </property>
            <property name="path" type="String">
                <description>&lt;p&gt;当所扫的码为当前小程序二维码时，会返回此字段，内容为二维码携带的 path&lt;/p&gt;
</description>
            </property>
            <property name="rawData" type="String">
                <description>&lt;p&gt;原始数据，base64编码&lt;/p&gt;
</description>
            </property>
            <property name="result" type="String">
                <description>&lt;p&gt;所扫码的内容&lt;/p&gt;
</description>
            </property>
            <property name="scanType" type="None">
                <description>&lt;p&gt;所扫码的类型&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;QR_CODE&amp;#39;: 二维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;AZTEC&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;CODABAR&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;CODE_39&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;CODE_93&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;CODE_128&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;DATA_MATRIX&amp;#39;: 二维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;EAN_8&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;EAN_13&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;ITF&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;MAXICODE&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;PDF_417&amp;#39;: 二维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;RSS_14&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;RSS_EXPANDED&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;UPC_A&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;UPC_E&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;UPC_EAN_EXTENSION&amp;#39;: 一维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;WX_CODE&amp;#39;: 二维码;&lt;/li&gt;
&lt;li&gt;&amp;#39;CODE_25&amp;#39;: 一维码;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ScrollOffsetCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="dataset" type="IAnyObject">
                <description>&lt;p&gt;节点的 dataset&lt;/p&gt;
</description>
            </property>
            <property name="id" type="String">
                <description>&lt;p&gt;节点的 ID&lt;/p&gt;
</description>
            </property>
            <property name="scrollLeft" type="Number">
                <description>&lt;p&gt;节点的水平滚动位置&lt;/p&gt;
</description>
            </property>
            <property name="scrollTop" type="Number">
                <description>&lt;p&gt;节点的竖直滚动位置&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SeekBackgroundAudioOption" superclass="None">
        <methods/>
        <properties>
            <property name="position" type="Number">
                <description>&lt;p&gt;音乐位置，单位：秒&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SeekBackgroundAudioCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SeekBackgroundAudioFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SeekBackgroundAudioSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SendHCEMessageOption" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="ArrayBuffer">
                <description>&lt;p&gt;二进制数据&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SendHCEMessageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SendHCEMessageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SendHCEMessageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SendSocketMessageOption" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description>&lt;p&gt;需要发送的内容&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SendSocketMessageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SendSocketMessageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SendSocketMessageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetBGMVolumeOption" superclass="None">
        <methods/>
        <properties>
            <property name="volume" type="String">
                <description>&lt;p&gt;音量大小，范围是 0-1&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetBGMVolumeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetBGMVolumeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetBGMVolumeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetBackgroundColorOption" superclass="None">
        <methods/>
        <properties>
            <property name="backgroundColor" type="String">
                <description>&lt;p&gt;窗口的背景色，必须为十六进制颜色值&lt;/p&gt;
</description>
            </property>
            <property name="backgroundColorBottom" type="String">
                <description>&lt;p&gt;底部窗口的背景色，必须为十六进制颜色值，仅 iOS 支持&lt;/p&gt;
</description>
            </property>
            <property name="backgroundColorTop" type="String">
                <description>&lt;p&gt;顶部窗口的背景色，必须为十六进制颜色值，仅 iOS 支持&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetBackgroundColorCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetBackgroundColorFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetBackgroundColorSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetBackgroundFetchTokenOption" superclass="None">
        <methods/>
        <properties>
            <property name="token" type="String">
                <description>&lt;p&gt;自定义的登录态&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetBackgroundFetchTokenCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetBackgroundFetchTokenFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetBackgroundFetchTokenSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetBackgroundTextStyleOption" superclass="None">
        <methods/>
        <properties>
            <property name="textStyle" type="None">
                <description>&lt;p&gt;下拉背景字体、loading 图的样式。&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;dark&amp;#39;: dark 样式;&lt;/li&gt;
&lt;li&gt;&amp;#39;light&amp;#39;: light 样式;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="complete" type="SetBackgroundTextStyleCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetBackgroundTextStyleFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetBackgroundTextStyleSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetClipboardDataOption" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="String">
                <description>&lt;p&gt;剪贴板的内容&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetClipboardDataCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetClipboardDataFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetClipboardDataSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetContentsOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="SetContentsCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="delta" type="IAnyObject">
                <description>&lt;p&gt;表示内容的delta对象&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetContentsFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="html" type="String">
                <description>&lt;p&gt;带标签的HTML内容&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetContentsSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetEnableDebugOption" superclass="None">
        <methods/>
        <properties>
            <property name="enableDebug" type="Boolean">
                <description>&lt;p&gt;是否打开调试&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetEnableDebugCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetEnableDebugFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetEnableDebugSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetInnerAudioOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="SetInnerAudioOptionCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetInnerAudioOptionFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="mixWithOther" type="Boolean">
                <description>&lt;p&gt;是否与其他音频混播，设置为 true 之后，不会终止其他应用或微信内的音乐&lt;/p&gt;
</description>
            </property>
            <property name="obeyMuteSwitch" type="Boolean">
                <description>&lt;p&gt;（仅在 iOS 生效）是否遵循静音开关，设置为 false 之后，即使是在静音模式下，也能播放声音&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetInnerAudioOptionSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetKeepScreenOnOption" superclass="None">
        <methods/>
        <properties>
            <property name="keepScreenOn" type="Boolean">
                <description>&lt;p&gt;是否保持屏幕常亮&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetKeepScreenOnCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetKeepScreenOnFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetKeepScreenOnSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetNavigationBarColorOption" superclass="None">
        <methods/>
        <properties>
            <property name="backgroundColor" type="String">
                <description>&lt;p&gt;背景颜色值，有效值为十六进制颜色&lt;/p&gt;
</description>
            </property>
            <property name="frontColor" type="String">
                <description>&lt;p&gt;前景颜色值，包括按钮、标题、状态栏的颜色，仅支持 #ffffff 和 #000000&lt;/p&gt;
</description>
            </property>
            <property name="animation" type="AnimationOption">
                <description>&lt;p&gt;动画效果&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetNavigationBarColorCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetNavigationBarColorFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetNavigationBarColorSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetNavigationBarTitleOption" superclass="None">
        <methods/>
        <properties>
            <property name="title" type="String">
                <description>&lt;p&gt;页面标题&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetNavigationBarTitleCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetNavigationBarTitleFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetNavigationBarTitleSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetScreenBrightnessOption" superclass="None">
        <methods/>
        <properties>
            <property name="value" type="Number">
                <description>&lt;p&gt;屏幕亮度值，范围 0 ~ 1。0 最暗，1 最亮&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetScreenBrightnessCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetScreenBrightnessFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetScreenBrightnessSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetStorageOption" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="Object">
                <description>&lt;p&gt;需要存储的内容。只支持原生类型、Date、及能够通过&lt;code&gt;JSON.stringify&lt;/code&gt;序列化的对象。&lt;/p&gt;
</description>
            </property>
            <property name="key" type="String">
                <description>&lt;p&gt;本地缓存中指定的 key&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetStorageCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetStorageFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetStorageSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetTabBarBadgeOption" superclass="None">
        <methods/>
        <properties>
            <property name="index" type="Number">
                <description>&lt;p&gt;tabBar 的哪一项，从左边算起&lt;/p&gt;
</description>
            </property>
            <property name="text" type="String">
                <description>&lt;p&gt;显示的文本，超过 4 个字符则显示成 ...&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetTabBarBadgeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetTabBarBadgeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetTabBarBadgeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetTabBarItemOption" superclass="None">
        <methods/>
        <properties>
            <property name="index" type="Number">
                <description>&lt;p&gt;tabBar 的哪一项，从左边算起&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetTabBarItemCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetTabBarItemFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="iconPath" type="String">
                <description>&lt;p&gt;图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效&lt;/p&gt;
</description>
            </property>
            <property name="selectedIconPath" type="String">
                <description>&lt;p&gt;选中时的图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetTabBarItemSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="text" type="String">
                <description>&lt;p&gt;tab 上的按钮文字&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetTabBarStyleOption" superclass="None">
        <methods/>
        <properties>
            <property name="backgroundColor" type="String">
                <description>&lt;p&gt;tab 的背景色，HexColor&lt;/p&gt;
</description>
            </property>
            <property name="borderStyle" type="String">
                <description>&lt;p&gt;tabBar上边框的颜色， 仅支持 black/white&lt;/p&gt;
</description>
            </property>
            <property name="color" type="String">
                <description>&lt;p&gt;tab 上的文字默认颜色，HexColor&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetTabBarStyleCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetTabBarStyleFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="selectedColor" type="String">
                <description>&lt;p&gt;tab 上的文字选中时的颜色，HexColor&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetTabBarStyleSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetTopBarTextOption" superclass="None">
        <methods/>
        <properties>
            <property name="text" type="String">
                <description>&lt;p&gt;置顶栏文字&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetTopBarTextCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetTopBarTextFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetTopBarTextSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SetWifiListOption" superclass="None">
        <methods/>
        <properties>
            <property name="wifiList" type="None">
                <description>&lt;p&gt;提供预设的 Wi-Fi 信息列表&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SetWifiListCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SetWifiListFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SetWifiListSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ShowActionSheetOption" superclass="None">
        <methods/>
        <properties>
            <property name="itemList" type="None">
                <description>&lt;p&gt;按钮的文字数组，数组长度最大为 6&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ShowActionSheetCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ShowActionSheetFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="itemColor" type="String">
                <description>&lt;p&gt;按钮的文字颜色&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ShowActionSheetSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ShowActionSheetSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tapIndex" type="Number">
                <description>&lt;p&gt;用户点击的按钮序号，从上到下的顺序，从0开始&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ShowLoadingOption" superclass="None">
        <methods/>
        <properties>
            <property name="title" type="String">
                <description>&lt;p&gt;提示的内容&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ShowLoadingCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ShowLoadingFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="mask" type="Boolean">
                <description>&lt;p&gt;是否显示透明蒙层，防止触摸穿透&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ShowLoadingSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ShowModalOption" superclass="None">
        <methods/>
        <properties>
            <property name="cancelColor" type="String">
                <description>&lt;p&gt;取消按钮的文字颜色，必须是 16 进制格式的颜色字符串&lt;/p&gt;
</description>
            </property>
            <property name="cancelText" type="String">
                <description>&lt;p&gt;取消按钮的文字，最多 4 个字符&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ShowModalCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="confirmColor" type="String">
                <description>&lt;p&gt;确认按钮的文字颜色，必须是 16 进制格式的颜色字符串&lt;/p&gt;
</description>
            </property>
            <property name="confirmText" type="String">
                <description>&lt;p&gt;确认按钮的文字，最多 4 个字符&lt;/p&gt;
</description>
            </property>
            <property name="content" type="String">
                <description>&lt;p&gt;提示的内容&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ShowModalFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="showCancel" type="Boolean">
                <description>&lt;p&gt;是否显示取消按钮&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ShowModalSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="title" type="String">
                <description>&lt;p&gt;提示的标题&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ShowModalSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="cancel" type="Boolean">
                <description>&lt;p&gt;为 true 时，表示用户点击了取消（用于 Android 系统区分点击蒙层关闭还是点击取消按钮关闭）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="confirm" type="Boolean">
                <description>&lt;p&gt;为 true 时，表示用户点击了确定按钮&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ShowNavigationBarLoadingOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ShowNavigationBarLoadingCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ShowNavigationBarLoadingFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ShowNavigationBarLoadingSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ShowShareMenuOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ShowShareMenuCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ShowShareMenuFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ShowShareMenuSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="withShareTicket" type="Boolean">
                <description>&lt;p&gt;是否使用带 shareTicket 的转发&lt;a href="(open-ability/share)"&gt;详情&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ShowTabBarOption" superclass="None">
        <methods/>
        <properties>
            <property name="animation" type="Boolean">
                <description>&lt;p&gt;是否需要动画效果&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ShowTabBarCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ShowTabBarFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ShowTabBarSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ShowTabBarRedDotOption" superclass="None">
        <methods/>
        <properties>
            <property name="index" type="Number">
                <description>&lt;p&gt;tabBar 的哪一项，从左边算起&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ShowTabBarRedDotCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ShowTabBarRedDotFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ShowTabBarRedDotSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ShowToastOption" superclass="None">
        <methods/>
        <properties>
            <property name="title" type="String">
                <description>&lt;p&gt;提示的内容&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="ShowToastCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;提示的延迟时间&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ShowToastFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="icon" type="None">
                <description>&lt;p&gt;图标&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;success&amp;#39;: 显示成功图标，此时 title 文本最多显示 7 个汉字长度;&lt;/li&gt;
&lt;li&gt;&amp;#39;loading&amp;#39;: 显示加载图标，此时 title 文本最多显示 7 个汉字长度;&lt;/li&gt;
&lt;li&gt;&amp;#39;none&amp;#39;: 不显示图标，此时 title 文本最多可显示两行，{% version(&amp;#39;1.9.0&amp;#39;) %}及以上版本支持;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="image" type="String">
                <description>&lt;p&gt;自定义图标的本地路径，image 的优先级高于 icon&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="mask" type="Boolean">
                <description>&lt;p&gt;是否显示透明蒙层，防止触摸穿透&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ShowToastSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Size" superclass="None">
        <methods/>
        <properties>
            <property name="windowHeight" type="Number">
                <description>&lt;p&gt;变化后的窗口高度，单位 px&lt;/p&gt;
</description>
            </property>
            <property name="windowWidth" type="Number">
                <description>&lt;p&gt;变化后的窗口宽度，单位 px&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SnapshotSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="height" type="String">
                <description>&lt;p&gt;图片的高度&lt;/p&gt;
</description>
            </property>
            <property name="tempImagePath" type="String">
                <description>&lt;p&gt;图片文件的临时路径&lt;/p&gt;
</description>
            </property>
            <property name="width" type="String">
                <description>&lt;p&gt;图片的宽度&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="SocketTaskOnErrorCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SocketTaskOnMessageCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description>&lt;p&gt;服务器返回的消息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SocketTaskSendOption" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description>&lt;p&gt;需要发送的内容&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SendCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SendFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SendSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartAccelerometerOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartAccelerometerCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartAccelerometerFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="interval" type="None">
                <description>&lt;p&gt;监听加速度数据回调函数的执行频率&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;game&amp;#39;: 适用于更新游戏的回调频率，在 20ms/次 左右;&lt;/li&gt;
&lt;li&gt;&amp;#39;ui&amp;#39;: 适用于更新 UI 的回调频率，在 60ms/次 左右;&lt;/li&gt;
&lt;li&gt;&amp;#39;normal&amp;#39;: 普通的回调频率，在 200ms/次 左右;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartAccelerometerSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartBeaconDiscoveryOption" superclass="None">
        <methods/>
        <properties>
            <property name="uuids" type="None">
                <description>&lt;p&gt;iBeacon 设备广播的 uuid 列表&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="StartBeaconDiscoveryCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartBeaconDiscoveryFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="ignoreBluetoothAvailable" type="Boolean">
                <description>&lt;p&gt;是否校验蓝牙开关，仅在 iOS 下有效&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartBeaconDiscoverySuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartBluetoothDevicesDiscoveryOption" superclass="None">
        <methods/>
        <properties>
            <property name="allowDuplicatesKey" type="Boolean">
                <description>&lt;p&gt;是否允许重复上报同一设备。如果允许重复上报，则 &lt;a href="(wx.onBlueToothDeviceFound)"&gt;wx.onBlueToothDeviceFound&lt;/a&gt; 方法会多次上报同一设备，但是 RSSI 值会有不同。&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="StartBluetoothDevicesDiscoveryCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartBluetoothDevicesDiscoveryFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="interval" type="Number">
                <description>&lt;p&gt;上报设备的间隔。0 表示找到新设备立即上报，其他数值根据传入的间隔上报。&lt;/p&gt;
</description>
            </property>
            <property name="services" type="None">
                <description>&lt;p&gt;要搜索的蓝牙设备主 service 的 uuid 列表。某些蓝牙设备会广播自己的主 service 的 uuid。如果设置此参数，则只搜索广播包有对应 uuid 的主服务的蓝牙设备。建议主要通过该参数过滤掉周边不需要处理的其他蓝牙设备。&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartBluetoothDevicesDiscoverySuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartCompassOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartCompassCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartCompassFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartCompassSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartDeviceMotionListeningOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartDeviceMotionListeningCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartDeviceMotionListeningFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="interval" type="None">
                <description>&lt;p&gt;监听设备方向的变化回调函数的执行频率&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;game&amp;#39;: 适用于更新游戏的回调频率，在 20ms/次 左右;&lt;/li&gt;
&lt;li&gt;&amp;#39;ui&amp;#39;: 适用于更新 UI 的回调频率，在 60ms/次 左右;&lt;/li&gt;
&lt;li&gt;&amp;#39;normal&amp;#39;: 普通的回调频率，在 200ms/次 左右;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="success" type="StartDeviceMotionListeningSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartGyroscopeOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartGyroscopeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartGyroscopeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="interval" type="None">
                <description>&lt;p&gt;监听陀螺仪数据回调函数的执行频率&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;game&amp;#39;: 适用于更新游戏的回调频率，在 20ms/次 左右;&lt;/li&gt;
&lt;li&gt;&amp;#39;ui&amp;#39;: 适用于更新 UI 的回调频率，在 60ms/次 左右;&lt;/li&gt;
&lt;li&gt;&amp;#39;normal&amp;#39;: 普通的回调频率，在 200ms/次 左右;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="success" type="StartGyroscopeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartHCEOption" superclass="None">
        <methods/>
        <properties>
            <property name="aid_list" type="None">
                <description>&lt;p&gt;需要注册到系统的 AID 列表&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="StartHCECompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartHCEFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartHCESuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartLocalServiceDiscoveryFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;invalid param&amp;#39;: serviceType 为空;&lt;/li&gt;
&lt;li&gt;&amp;#39;scan task already exist&amp;#39;: 在当前 startLocalServiceDiscovery 发起的搜索未停止的情况下，再次调用 startLocalServiceDiscovery;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartLocalServiceDiscoveryOption" superclass="None">
        <methods/>
        <properties>
            <property name="serviceType" type="String">
                <description>&lt;p&gt;要搜索的服务类型&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="StartLocalServiceDiscoveryCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartLocalServiceDiscoveryFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartLocalServiceDiscoverySuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartLocationUpdateBackgroundOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartLocationUpdateBackgroundCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartLocationUpdateBackgroundFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartLocationUpdateBackgroundSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartLocationUpdateOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartLocationUpdateCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartLocationUpdateFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartLocationUpdateSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartPreviewOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartPreviewCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartPreviewFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartPreviewSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartPullDownRefreshOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartPullDownRefreshCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartPullDownRefreshFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartPullDownRefreshSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartRecordSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempFilePath" type="String">
                <description>&lt;p&gt;录音文件的临时路径&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="StartRecordTimeoutCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempThumbPath" type="String">
                <description>&lt;p&gt;封面图片文件的临时路径&lt;/p&gt;
</description>
            </property>
            <property name="tempVideoPath" type="String">
                <description>&lt;p&gt;视频的文件的临时路径&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartSoterAuthenticationOption" superclass="None">
        <methods/>
        <properties>
            <property name="challenge" type="String">
                <description>&lt;p&gt;挑战因子。挑战因子为调用者为此次生物鉴权准备的用于签名的字符串关键识别信息，将作为 &lt;code&gt;resultJSON&lt;/code&gt; 的一部分，供调用者识别本次请求。例如：如果场景为请求用户对某订单进行授权确认，则可以将订单号填入此参数。&lt;/p&gt;
</description>
            </property>
            <property name="requestAuthModes" type="Array">
                <description>&lt;p&gt;请求使用的可接受的生物认证方式&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fingerPrint&amp;#39;: 指纹识别;&lt;/li&gt;
&lt;li&gt;&amp;#39;facial&amp;#39;: 人脸识别;&lt;/li&gt;
&lt;li&gt;&amp;#39;speech&amp;#39;: 声纹识别（暂未支持）;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="authContent" type="String">
                <description>&lt;p&gt;验证描述，即识别过程中显示在界面上的对话框提示内容&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="StartSoterAuthenticationCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartSoterAuthenticationFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartSoterAuthenticationSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartSoterAuthenticationSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="authMode" type="String">
                <description>&lt;p&gt;生物认证方式&lt;/p&gt;
</description>
            </property>
            <property name="errCode" type="Number">
                <description>&lt;p&gt;错误码&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
            <property name="resultJSON" type="String">
                <description>&lt;p&gt;在设备安全区域（TEE）内获得的本机安全信息（如TEE名称版本号等以及防重放参数）以及本次认证信息（仅Android支持，本次认证的指纹ID）。具体说明见下文&lt;/p&gt;
</description>
            </property>
            <property name="resultJSONSignature" type="String">
                <description>&lt;p&gt;用SOTER安全密钥对 &lt;code&gt;resultJSON&lt;/code&gt; 的签名(SHA256 with RSA/PSS, saltlen=20)&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StartWifiOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StartWifiCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StartWifiFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StartWifiSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StatFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail permission denied, open ${path}&amp;#39;: 指定的 path 路径没有读权限;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail no such file or directory ${path}&amp;#39;: 文件不存在;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StatOption" superclass="None">
        <methods/>
        <properties>
            <property name="path" type="String">
                <description>&lt;p&gt;文件/目录路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="StatCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StatFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="recursive" type="Boolean">
                <description>&lt;p&gt;是否递归获取目录下的每个文件的 Stats 信息&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StatSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StatSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="stats" type="None">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/Stats.html"&gt;Stats&lt;/a&gt;|Object&lt;/p&gt;
&lt;p&gt;当 recursive 为 false 时，res.stats 是一个 Stats 对象。当 recursive 为 true 且 path 是一个目录的路径时，res.stats 是一个 Object，key 以 path 为根路径的相对路径，value 是该路径对应的 Stats 对象。&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="Stats" superclass="None">
        <methods>
            <method name="isDirectory">
                <parameters/>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/Stats.isDirectory.html"&gt;boolean Stats.isDirectory()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;判断当前文件是否一个目录&lt;/p&gt;
</description>
            </method>
            <method name="isFile">
                <parameters/>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/Stats.isFile.html"&gt;boolean Stats.isFile()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;判断当前文件是否一个普通文件&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="lastAccessedTime" type="Number">
                <description>&lt;p&gt;文件最近一次被存取或被执行的时间，UNIX 时间戳，对应 POSIX stat.st_atime&lt;/p&gt;
</description>
            </property>
            <property name="lastModifiedTime" type="Number">
                <description>&lt;p&gt;文件最后一次被修改的时间，UNIX 时间戳，对应 POSIX stat.st_mtime&lt;/p&gt;
</description>
            </property>
            <property name="mode" type="String">
                <description>&lt;p&gt;文件的类型和存取的权限，对应 POSIX stat.st_mode&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;文件大小，单位：B，对应 POSIX stat.st_size&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StepOption" superclass="None">
        <methods/>
        <properties>
            <property name="delay" type="Number">
                <description>&lt;p&gt;动画延迟时间，单位 ms&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;动画持续时间，单位 ms&lt;/p&gt;
</description>
            </property>
            <property name="timingFunction" type="None">
                <description>&lt;p&gt;动画的效果&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;linear&amp;#39;: 动画从头到尾的速度是相同的;&lt;/li&gt;
&lt;li&gt;&amp;#39;ease&amp;#39;: 动画以低速开始，然后加快，在结束前变慢;&lt;/li&gt;
&lt;li&gt;&amp;#39;ease-in&amp;#39;: 动画以低速开始;&lt;/li&gt;
&lt;li&gt;&amp;#39;ease-in-out&amp;#39;: 动画以低速开始和结束;&lt;/li&gt;
&lt;li&gt;&amp;#39;ease-out&amp;#39;: 动画以低速结束;&lt;/li&gt;
&lt;li&gt;&amp;#39;step-start&amp;#39;: 动画第一帧就跳至结束状态直到结束;&lt;/li&gt;
&lt;li&gt;&amp;#39;step-end&amp;#39;: 动画一直保持开始状态，最后一帧跳到结束状态;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="transformOrigin" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="StopAccelerometerOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopAccelerometerCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopAccelerometerFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopAccelerometerSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopBGMOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopBGMCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopBGMFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopBGMSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopBackgroundAudioOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopBackgroundAudioCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopBackgroundAudioFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopBackgroundAudioSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopBeaconDiscoveryOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopBeaconDiscoveryCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopBeaconDiscoveryFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopBeaconDiscoverySuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopBluetoothDevicesDiscoveryOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopBluetoothDevicesDiscoveryCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopBluetoothDevicesDiscoveryFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopBluetoothDevicesDiscoverySuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopCompassOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopCompassCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopCompassFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopCompassSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopDeviceMotionListeningOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopDeviceMotionListeningCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopDeviceMotionListeningFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopDeviceMotionListeningSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopGyroscopeOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopGyroscopeCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopGyroscopeFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopGyroscopeSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopHCEOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopHCECompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopHCEFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopHCESuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopLocalServiceDiscoveryFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;task not found&amp;#39;: 在当前没有处在搜索服务中的情况下调用 stopLocalServiceDiscovery;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopLocalServiceDiscoveryOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopLocalServiceDiscoveryCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopLocalServiceDiscoveryFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopLocalServiceDiscoverySuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopLocationUpdateOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopLocationUpdateCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopLocationUpdateFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopLocationUpdateSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopPreviewOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopPreviewCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopPreviewFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopPreviewSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopPullDownRefreshOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopPullDownRefreshCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopPullDownRefreshFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopPullDownRefreshSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopRecordSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempThumbPath" type="String">
                <description>&lt;p&gt;封面图片文件的临时路径&lt;/p&gt;
</description>
            </property>
            <property name="tempVideoPath" type="String">
                <description>&lt;p&gt;视频的文件的临时路径&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="StopVoiceOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopVoiceCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopVoiceFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopVoiceSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="StopWifiOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="StopWifiCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="StopWifiFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="StopWifiSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SwitchCameraOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="SwitchCameraCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SwitchCameraFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SwitchCameraSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="SwitchTabOption" superclass="None">
        <methods/>
        <properties>
            <property name="url" type="String">
                <description>&lt;p&gt;需要跳转的 tabBar 页面的路径（需在 app.json 的 &lt;a href="(configuration/app#tabbar)"&gt;tabBar&lt;/a&gt; 字段定义的页面），路径后不能带参数。&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="SwitchTabCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="SwitchTabFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="SwitchTabSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="TakePhotoOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="TakePhotoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="TakePhotoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="quality" type="None">
                <description>&lt;p&gt;成像质量&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;high&amp;#39;: 高质量;&lt;/li&gt;
&lt;li&gt;&amp;#39;normal&amp;#39;: 普通质量;&lt;/li&gt;
&lt;li&gt;&amp;#39;low&amp;#39;: 低质量;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="success" type="TakePhotoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="TakePhotoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempImagePath" type="String">
                <description>&lt;p&gt;照片文件的临时路径，安卓是jpg图片格式，ios是png&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="TextMetrics" superclass="None">
        <methods/>
        <properties>
            <property name="width" type="Number">
                <description>&lt;p&gt;文本的宽度&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="ToggleTorchOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="ToggleTorchCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="ToggleTorchFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="ToggleTorchSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="TranslateMarkerOption" superclass="None">
        <methods/>
        <properties>
            <property name="autoRotate" type="Boolean">
                <description>&lt;p&gt;移动过程中是否自动旋转 marker&lt;/p&gt;
</description>
            </property>
            <property name="destination" type="DestinationOption">
                <description>&lt;p&gt;指定 marker 移动到的目标点&lt;/p&gt;
</description>
            </property>
            <property name="markerId" type="Number">
                <description>&lt;p&gt;指定 marker&lt;/p&gt;
</description>
            </property>
            <property name="rotate" type="Number">
                <description>&lt;p&gt;marker 的旋转角度&lt;/p&gt;
</description>
            </property>
            <property name="animationEnd" type="Function">
                <description>&lt;p&gt;动画结束回调函数&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="TranslateMarkerCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="duration" type="Number">
                <description>&lt;p&gt;动画持续时长，平移与旋转分别计算&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="TranslateMarkerFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="TranslateMarkerSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UDPSocketOnErrorCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UDPSocketOnMessageCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="message" type="ArrayBuffer">
                <description>&lt;p&gt;收到的消息&lt;/p&gt;
</description>
            </property>
            <property name="remoteInfo" type="RemoteInfo">
                <description>&lt;p&gt;消息来源的结构化信息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UDPSocketSendOption" superclass="None">
        <methods/>
        <properties>
            <property name="address" type="String">
                <description>&lt;p&gt;要发消息的地址。可以是一个和本机同网段的 IP 地址，也可以是在安全域名列表内的域名地址&lt;/p&gt;
</description>
            </property>
            <property name="message" type="None">
                <description>&lt;p&gt;要发送的数据&lt;/p&gt;
</description>
            </property>
            <property name="port" type="Number">
                <description>&lt;p&gt;要发送消息的端口号&lt;/p&gt;
</description>
            </property>
            <property name="length" type="Number">
                <description>&lt;p&gt;发送数据的长度，仅当 message 为 ArrayBuffer 类型时有效&lt;/p&gt;
</description>
            </property>
            <property name="offset" type="Number">
                <description>&lt;p&gt;发送数据的偏移量，仅当 message 为 ArrayBuffer 类型时有效&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UndoOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="UndoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="UndoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="UndoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UnlinkFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail permission denied, open ${path}&amp;#39;: 指定的 path 路径没有读权限;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail no such file or directory ${path}&amp;#39;: 文件不存在;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail operation not permitted, unlink ${filePath}&amp;#39;: 传入的 filePath 是一个目录;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UnlinkOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;要删除的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="UnlinkCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="UnlinkFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="UnlinkSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UnzipFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail permission denied, unzip ${zipFilePath} -&amp;gt; ${destPath}&amp;#39;: 指定目标文件路径没有写权限;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail no such file or directory, unzip ${zipFilePath} -&amp;gt; &amp;quot;${destPath}&amp;#39;: 源文件不存在，或目标文件路径的上层目录不存在;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UnzipOption" superclass="None">
        <methods/>
        <properties>
            <property name="targetPath" type="String">
                <description>&lt;p&gt;目标目录路径&lt;/p&gt;
</description>
            </property>
            <property name="zipFilePath" type="String">
                <description>&lt;p&gt;源文件路径，只可以是 zip 压缩文件&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="UnzipCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="UnzipFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="UnzipSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UpdatableMessageFrontEndParameter" superclass="None">
        <methods/>
        <properties>
            <property name="name" type="String">
                <description>&lt;p&gt;参数名&lt;/p&gt;
</description>
            </property>
            <property name="value" type="String">
                <description>&lt;p&gt;参数值&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UpdatableMessageFrontEndTemplateInfo" superclass="None">
        <methods/>
        <properties>
            <property name="parameterList" type="None">
                <description>&lt;p&gt;参数列表&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UpdateShareMenuOption" superclass="None">
        <methods/>
        <properties>
            <property name="activityId" type="String">
                <description>&lt;p&gt;动态消息的 activityId。通过 &lt;a href="(updatableMessage.createActivityId)"&gt;updatableMessage.createActivityId&lt;/a&gt; 接口获取&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="UpdateShareMenuCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="UpdateShareMenuFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="isUpdatableMessage" type="Boolean">
                <description>&lt;p&gt;是否是动态消息，详见&lt;a href="(updatable-message)"&gt;动态消息&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="success" type="UpdateShareMenuSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="templateInfo" type="UpdatableMessageFrontEndTemplateInfo">
                <description>&lt;p&gt;动态消息的模板信息&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="withShareTicket" type="Boolean">
                <description>&lt;p&gt;是否使用带 shareTicket 的转发&lt;a href="(open-ability/share)"&gt;详情&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UploadFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;要上传文件资源的路径&lt;/p&gt;
</description>
            </property>
            <property name="name" type="String">
                <description>&lt;p&gt;文件对应的 key，开发者在服务端可以通过这个 key 获取文件的二进制内容&lt;/p&gt;
</description>
            </property>
            <property name="url" type="String">
                <description>&lt;p&gt;开发者服务器地址&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="UploadFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="UploadFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="formData" type="IAnyObject">
                <description>&lt;p&gt;HTTP 请求中其他额外的 form data&lt;/p&gt;
</description>
            </property>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;HTTP 请求 Header，Header 中不能设置 Referer&lt;/p&gt;
</description>
            </property>
            <property name="success" type="UploadFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UploadFileSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="String">
                <description>&lt;p&gt;开发者服务器返回的数据&lt;/p&gt;
</description>
            </property>
            <property name="statusCode" type="Number">
                <description>&lt;p&gt;开发者服务器返回的 HTTP 状态码&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="UploadTaskOnHeadersReceivedCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="header" type="IAnyObject">
                <description>&lt;p&gt;开发者服务器返回的 HTTP Response Header&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UploadTaskOnProgressUpdateCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="progress" type="Number">
                <description>&lt;p&gt;上传进度百分比&lt;/p&gt;
</description>
            </property>
            <property name="totalBytesExpectedToSend" type="Number">
                <description>&lt;p&gt;预期需要上传的数据总长度，单位 Bytes&lt;/p&gt;
</description>
            </property>
            <property name="totalBytesSent" type="Number">
                <description>&lt;p&gt;已经上传的数据长度，单位 Bytes&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="UserInfo" superclass="None">
        <methods/>
        <properties>
            <property name="avatarUrl" type="String">
                <description>&lt;p&gt;用户头像图片的 URL。URL 最后一个数值代表正方形头像大小（有 0、46、64、96、132 数值可选，0 代表 640x640 的正方形头像，46 表示 46x46 的正方形头像，剩余数值以此类推。默认132），用户没有头像时该项为空。若用户更换头像，原有头像 URL 将失效。&lt;/p&gt;
</description>
            </property>
            <property name="city" type="String">
                <description>&lt;p&gt;用户所在城市&lt;/p&gt;
</description>
            </property>
            <property name="country" type="String">
                <description>&lt;p&gt;用户所在国家&lt;/p&gt;
</description>
            </property>
            <property name="gender" type="None">
                <description>&lt;p&gt;用户性别&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: 未知;&lt;/li&gt;
&lt;li&gt;1: 男性;&lt;/li&gt;
&lt;li&gt;2: 女性;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="language" type="None">
                <description>&lt;p&gt;显示 country，province，city 所用的语言&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;en&amp;#39;: 英文;&lt;/li&gt;
&lt;li&gt;&amp;#39;zh_CN&amp;#39;: 简体中文;&lt;/li&gt;
&lt;li&gt;&amp;#39;zh_TW&amp;#39;: 繁体中文;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="nickName" type="String">
                <description>&lt;p&gt;用户昵称&lt;/p&gt;
</description>
            </property>
            <property name="province" type="String">
                <description>&lt;p&gt;用户所在省份&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="VibrateLongOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="VibrateLongCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="VibrateLongFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="VibrateLongSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="VibrateShortOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="VibrateShortCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="VibrateShortFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="VibrateShortSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="VideoContextRequestFullScreenOption" superclass="None">
        <methods/>
        <properties>
            <property name="direction" type="None">
                <description>&lt;p&gt;设置全屏时视频的方向，不指定则根据宽高比自动判断。&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: 正常竖向;&lt;/li&gt;
&lt;li&gt;90: 屏幕逆时针90度;&lt;/li&gt;
&lt;li&gt;-90: 屏幕顺时针90度;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WifiData" superclass="None">
        <methods/>
        <properties>
            <property name="BSSID" type="String">
                <description>&lt;p&gt;Wi-Fi 的 BSSID&lt;/p&gt;
</description>
            </property>
            <property name="SSID" type="String">
                <description>&lt;p&gt;Wi-Fi 的 SSID&lt;/p&gt;
</description>
            </property>
            <property name="password" type="String">
                <description>&lt;p&gt;Wi-Fi 设备密码&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WifiInfo" superclass="None">
        <methods/>
        <properties>
            <property name="BSSID" type="String">
                <description>&lt;p&gt;Wi-Fi 的 BSSID&lt;/p&gt;
</description>
            </property>
            <property name="SSID" type="String">
                <description>&lt;p&gt;Wi-Fi 的 SSID&lt;/p&gt;
</description>
            </property>
            <property name="secure" type="Boolean">
                <description>&lt;p&gt;Wi-Fi 是否安全&lt;/p&gt;
</description>
            </property>
            <property name="signalStrength" type="Number">
                <description>&lt;p&gt;Wi-Fi 信号强度&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WorkerOnMessageCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="message" type="IAnyObject">
                <description>&lt;p&gt;主线程/Worker 线程向当前线程发送的消息&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WriteBLECharacteristicValueOption" superclass="None">
        <methods/>
        <properties>
            <property name="characteristicId" type="String">
                <description>&lt;p&gt;蓝牙特征值的 uuid&lt;/p&gt;
</description>
            </property>
            <property name="deviceId" type="String">
                <description>&lt;p&gt;蓝牙设备 id&lt;/p&gt;
</description>
            </property>
            <property name="serviceId" type="String">
                <description>&lt;p&gt;蓝牙特征值对应服务的 uuid&lt;/p&gt;
</description>
            </property>
            <property name="value" type="ArrayBuffer">
                <description>&lt;p&gt;蓝牙设备特征值对应的二进制值&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="WriteBLECharacteristicValueCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="WriteBLECharacteristicValueFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="WriteBLECharacteristicValueSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WriteFileFailCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;fail no such file or directory, open ${filePath}&amp;#39;: 指定的 filePath 所在目录不存在;&lt;/li&gt;
&lt;li&gt;&amp;#39;fail permission denied, open ${dirPath}&amp;#39;: 指定的 filePath 路径没有写权限;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WriteFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description>&lt;p&gt;要写入的文本或二进制数据&lt;/p&gt;
</description>
            </property>
            <property name="filePath" type="String">
                <description>&lt;p&gt;要写入的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="WriteFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="encoding" type="None">
                <description>&lt;p&gt;指定写入文件的字符编码&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;ascii&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;base64&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;binary&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;hex&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;ucs2&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;ucs-2&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf16le&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf-16le&amp;#39;: 以小端序读取;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf-8&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;utf8&amp;#39;: ;&lt;/li&gt;
&lt;li&gt;&amp;#39;latin1&amp;#39;: ;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="fail" type="WriteFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="WriteFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WxGetFileInfoOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;本地文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="WxGetFileInfoCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="digestAlgorithm" type="None">
                <description>&lt;p&gt;计算文件摘要的算法&lt;/p&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#39;md5&amp;#39;: md5 算法;&lt;/li&gt;
&lt;li&gt;&amp;#39;sha1&amp;#39;: sha1 算法;&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="fail" type="WxGetFileInfoFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="WxGetFileInfoSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WxGetFileInfoSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="digest" type="String">
                <description>&lt;p&gt;按照传入的 digestAlgorithm 计算得出的的文件摘要&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;文件大小，以字节为单位&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="WxGetSavedFileListOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="WxGetSavedFileListCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="WxGetSavedFileListFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="WxGetSavedFileListSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WxGetSavedFileListSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="fileList" type="None">
                <description>&lt;p&gt;文件数组，每一项是一个 FileItem&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="WxGetSavedFileListSuccessCallbackResultFileItem" superclass="None">
        <methods/>
        <properties>
            <property name="createTime" type="Number">
                <description>&lt;p&gt;文件保存时的时间戳，从1970/01/01 08:00:00 到当前时间的秒数&lt;/p&gt;
</description>
            </property>
            <property name="filePath" type="String">
                <description>&lt;p&gt;本地路径&lt;/p&gt;
</description>
            </property>
            <property name="size" type="Number">
                <description>&lt;p&gt;本地文件大小，以字节为单位&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WxRemoveSavedFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="filePath" type="String">
                <description>&lt;p&gt;需要删除的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="WxRemoveSavedFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="WxRemoveSavedFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="WxRemoveSavedFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WxSaveFileOption" superclass="None">
        <methods/>
        <properties>
            <property name="tempFilePath" type="String">
                <description>&lt;p&gt;需要保存的文件的临时路径&lt;/p&gt;
</description>
            </property>
            <property name="complete" type="WxSaveFileCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="WxSaveFileFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="WxSaveFileSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WxSaveFileSuccessCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="savedFilePath" type="Number">
                <description>&lt;p&gt;存储后的文件路径&lt;/p&gt;
</description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="WxStartRecordOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="WxStartRecordCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="WxStartRecordFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="WxStartRecordSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="WxStopRecordOption" superclass="None">
        <methods/>
        <properties>
            <property name="complete" type="WxStopRecordCompleteCallback">
                <description>&lt;p&gt;接口调用结束的回调函数（调用成功、失败都会执行）&lt;/p&gt;
</description>
            </property>
            <property name="fail" type="WxStopRecordFailCallback">
                <description>&lt;p&gt;接口调用失败的回调函数&lt;/p&gt;
</description>
            </property>
            <property name="success" type="WxStopRecordSuccessCallback">
                <description>&lt;p&gt;接口调用成功的回调函数&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Animation" superclass="None">
        <methods>
            <method name="export">
                <parameters/>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.export.html"&gt;Array.&lt;Object&gt; Animation.export()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;导出动画队列。&lt;strong&gt;export 方法每次调用后会清掉之前的动画操作。&lt;/strong&gt;&lt;/p&gt;
</description>
            </method>
            <method name="backgroundColor">
                <parameters>
                    <parameter name="value" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.backgroundColor.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.backgroundColor(string value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置背景色&lt;/p&gt;
</description>
            </method>
            <method name="bottom">
                <parameters>
                    <parameter name="value" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.bottom.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.bottom(number|string value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 bottom 值&lt;/p&gt;
</description>
            </method>
            <method name="height">
                <parameters>
                    <parameter name="value" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.height.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.height(number|string value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置高度&lt;/p&gt;
</description>
            </method>
            <method name="left">
                <parameters>
                    <parameter name="value" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.left.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.left(number|string value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 left 值&lt;/p&gt;
</description>
            </method>
            <method name="matrix">
                <parameters/>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.matrix.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.matrix()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix"&gt;transform-function matrix&lt;/a&gt;&lt;/p&gt;
</description>
            </method>
            <method name="matrix3d">
                <parameters/>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.matrix3d.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.matrix3d()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d"&gt;transform-function matrix3d&lt;/a&gt;&lt;/p&gt;
</description>
            </method>
            <method name="opacity">
                <parameters>
                    <parameter name="value" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.opacity.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.opacity(number value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置透明度&lt;/p&gt;
</description>
            </method>
            <method name="right">
                <parameters>
                    <parameter name="value" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.right.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.right(number|string value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 right 值&lt;/p&gt;
</description>
            </method>
            <method name="rotate">
                <parameters>
                    <parameter name="angle" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.rotate.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.rotate(number angle)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从原点顺时针旋转一个角度&lt;/p&gt;
</description>
            </method>
            <method name="rotate3d">
                <parameters>
                    <parameter name="x" type="Number"/>
                    <parameter name="y" type="Number"/>
                    <parameter name="z" type="Number"/>
                    <parameter name="angle" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.rotate3d.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.rotate3d(number x, number y, number z, number angle)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 X 轴顺时针旋转一个角度&lt;/p&gt;
</description>
            </method>
            <method name="rotateX">
                <parameters>
                    <parameter name="angle" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.rotateX.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.rotateX(number angle)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 X 轴顺时针旋转一个角度&lt;/p&gt;
</description>
            </method>
            <method name="rotateY">
                <parameters>
                    <parameter name="angle" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.rotateY.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.rotateY(number angle)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 Y 轴顺时针旋转一个角度&lt;/p&gt;
</description>
            </method>
            <method name="rotateZ">
                <parameters>
                    <parameter name="angle" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.rotateZ.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.rotateZ(number angle)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从 Z 轴顺时针旋转一个角度&lt;/p&gt;
</description>
            </method>
            <method name="scale">
                <parameters>
                    <parameter name="sx" type="Number"/>
                    <parameter name="sy" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.scale.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.scale(number sx, number sy)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;缩放&lt;/p&gt;
</description>
            </method>
            <method name="scale3d">
                <parameters>
                    <parameter name="sx" type="Number"/>
                    <parameter name="sy" type="Number"/>
                    <parameter name="sz" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.scale3d.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.scale3d(number sx, number sy, number sz)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;缩放&lt;/p&gt;
</description>
            </method>
            <method name="scaleX">
                <parameters>
                    <parameter name="scale" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.scaleX.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.scaleX(number scale)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;缩放 X 轴&lt;/p&gt;
</description>
            </method>
            <method name="scaleY">
                <parameters>
                    <parameter name="scale" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.scaleY.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.scaleY(number scale)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;缩放 Y 轴&lt;/p&gt;
</description>
            </method>
            <method name="scaleZ">
                <parameters>
                    <parameter name="scale" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.scaleZ.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.scaleZ(number scale)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;缩放 Z 轴&lt;/p&gt;
</description>
            </method>
            <method name="skew">
                <parameters>
                    <parameter name="ax" type="Number"/>
                    <parameter name="ay" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.skew.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.skew(number ax, number ay)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对 X、Y 轴坐标进行倾斜&lt;/p&gt;
</description>
            </method>
            <method name="skewX">
                <parameters>
                    <parameter name="angle" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.skewX.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.skewX(number angle)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对 X 轴坐标进行倾斜&lt;/p&gt;
</description>
            </method>
            <method name="skewY">
                <parameters>
                    <parameter name="angle" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.skewY.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.skewY(number angle)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对 Y 轴坐标进行倾斜&lt;/p&gt;
</description>
            </method>
            <method name="step">
                <parameters>
                    <parameter name="option" type="StepOption"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.step.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.step(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表示一组动画完成。可以在一组动画中调用任意多个动画方法，一组动画中的所有动画会同时开始，一组动画完成后才会进行下一组动画。&lt;/p&gt;
</description>
            </method>
            <method name="top">
                <parameters>
                    <parameter name="value" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.top.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.top(number|string value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 top 值&lt;/p&gt;
</description>
            </method>
            <method name="translate">
                <parameters>
                    <parameter name="tx" type="Number"/>
                    <parameter name="ty" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.translate.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.translate(number tx, number ty)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;平移变换&lt;/p&gt;
</description>
            </method>
            <method name="translate3d">
                <parameters>
                    <parameter name="tx" type="Number"/>
                    <parameter name="ty" type="Number"/>
                    <parameter name="tz" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.translate3d.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.translate3d(number tx, number ty, number tz)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对 xyz 坐标进行平移变换&lt;/p&gt;
</description>
            </method>
            <method name="translateX">
                <parameters>
                    <parameter name="translation" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.translateX.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.translateX(number translation)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对 X 轴平移&lt;/p&gt;
</description>
            </method>
            <method name="translateY">
                <parameters>
                    <parameter name="translation" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.translateY.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.translateY(number translation)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对 Y 轴平移&lt;/p&gt;
</description>
            </method>
            <method name="translateZ">
                <parameters>
                    <parameter name="translation" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.translateZ.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.translateZ(number translation)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对 Z 轴平移&lt;/p&gt;
</description>
            </method>
            <method name="width">
                <parameters>
                    <parameter name="value" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.width.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; Animation.width(number|string value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置宽度&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="AudioContext" superclass="None">
        <methods>
            <method name="pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.pause.html"&gt;AudioContext.pause()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停音频。&lt;/p&gt;
</description>
            </method>
            <method name="play">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.play.html"&gt;AudioContext.play()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;播放音频。&lt;/p&gt;
</description>
            </method>
            <method name="seek">
                <parameters>
                    <parameter name="position" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.seek.html"&gt;AudioContext.seek(number position)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跳转到指定位置。&lt;/p&gt;
</description>
            </method>
            <method name="setSrc">
                <parameters>
                    <parameter name="src" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.setSrc.html"&gt;AudioContext.setSrc(string src)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置音频地址&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="BackgroundAudioError" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;10001&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;系统错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10002&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;网络错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10003&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;文件错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10004&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;格式错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;未知错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
            <property name="errCode" type="Number">
                <description>&lt;p&gt;错误码&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;10001&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;系统错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10002&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;网络错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10003&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;文件错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10004&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;格式错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;未知错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="BluetoothError" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ok&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;not init&lt;/td&gt;
&lt;td&gt;未初始化蓝牙适配器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10001&lt;/td&gt;
&lt;td&gt;not available&lt;/td&gt;
&lt;td&gt;当前蓝牙适配器不可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10002&lt;/td&gt;
&lt;td&gt;no device&lt;/td&gt;
&lt;td&gt;没有找到指定设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10003&lt;/td&gt;
&lt;td&gt;connection fail&lt;/td&gt;
&lt;td&gt;连接失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10004&lt;/td&gt;
&lt;td&gt;no service&lt;/td&gt;
&lt;td&gt;没有找到指定服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10005&lt;/td&gt;
&lt;td&gt;no characteristic&lt;/td&gt;
&lt;td&gt;没有找到指定特征值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10006&lt;/td&gt;
&lt;td&gt;no connection&lt;/td&gt;
&lt;td&gt;当前连接已断开&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10007&lt;/td&gt;
&lt;td&gt;property not support&lt;/td&gt;
&lt;td&gt;当前特征值不支持此操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10008&lt;/td&gt;
&lt;td&gt;system error&lt;/td&gt;
&lt;td&gt;其余所有系统上报的异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10009&lt;/td&gt;
&lt;td&gt;system not support&lt;/td&gt;
&lt;td&gt;Android 系统特有，系统版本低于 4.3 不支持 BLE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10012&lt;/td&gt;
&lt;td&gt;operate time out&lt;/td&gt;
&lt;td&gt;连接超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10013&lt;/td&gt;
&lt;td&gt;invalid_data&lt;/td&gt;
&lt;td&gt;连接 deviceId 为空或者是格式不正确&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
            <property name="errCode" type="Number">
                <description>&lt;p&gt;错误码&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ok&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;not init&lt;/td&gt;
&lt;td&gt;未初始化蓝牙适配器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10001&lt;/td&gt;
&lt;td&gt;not available&lt;/td&gt;
&lt;td&gt;当前蓝牙适配器不可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10002&lt;/td&gt;
&lt;td&gt;no device&lt;/td&gt;
&lt;td&gt;没有找到指定设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10003&lt;/td&gt;
&lt;td&gt;connection fail&lt;/td&gt;
&lt;td&gt;连接失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10004&lt;/td&gt;
&lt;td&gt;no service&lt;/td&gt;
&lt;td&gt;没有找到指定服务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10005&lt;/td&gt;
&lt;td&gt;no characteristic&lt;/td&gt;
&lt;td&gt;没有找到指定特征值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10006&lt;/td&gt;
&lt;td&gt;no connection&lt;/td&gt;
&lt;td&gt;当前连接已断开&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10007&lt;/td&gt;
&lt;td&gt;property not support&lt;/td&gt;
&lt;td&gt;当前特征值不支持此操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10008&lt;/td&gt;
&lt;td&gt;system error&lt;/td&gt;
&lt;td&gt;其余所有系统上报的异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10009&lt;/td&gt;
&lt;td&gt;system not support&lt;/td&gt;
&lt;td&gt;Android 系统特有，系统版本低于 4.3 不支持 BLE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10012&lt;/td&gt;
&lt;td&gt;operate time out&lt;/td&gt;
&lt;td&gt;连接超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10013&lt;/td&gt;
&lt;td&gt;invalid_data&lt;/td&gt;
&lt;td&gt;连接 deviceId 为空或者是格式不正确&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="CameraContext" superclass="None">
        <methods>
            <method name="startRecord">
                <parameters>
                    <parameter name="option" type="CameraContextStartRecordOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.startRecord.html"&gt;CameraContext.startRecord(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始录像&lt;/p&gt;
</description>
            </method>
            <method name="stopRecord">
                <parameters>
                    <parameter name="option" type="CameraContextStopRecordOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.stopRecord.html"&gt;CameraContext.stopRecord(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;结束录像&lt;/p&gt;
</description>
            </method>
            <method name="takePhoto">
                <parameters>
                    <parameter name="option" type="TakePhotoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.takePhoto.html"&gt;CameraContext.takePhoto(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拍摄照片&lt;/p&gt;
</description>
            </method>
            <method name="onCameraFrame">
                <parameters>
                    <parameter name="callback" type="OnCameraFrameCallback"/>
                </parameters>
                <return-types>
                    <return-type type="CameraFrameListener"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.onCameraFrame.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraFrameListener.html"&gt;CameraFrameListener&lt;/a&gt; CameraContext.onCameraFrame(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取 Camera 实时帧数据&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;注： 使用该接口需同时在 &lt;a href="(camera)"&gt;camera&lt;/a&gt; 组件属性中指定 frame-size。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const context = wx.createCameraContext()
const listener = context.onCameraFrame((frame) =&amp;gt; {
  console.log(frame.data instanceof ArrayBuffer, frame.width, frame.height)
})
listener.start()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="CameraFrameListener" superclass="None">
        <methods>
            <method name="start">
                <parameters>
                    <parameter name="option" type="CameraFrameListenerStartOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraFrameListener.start.html"&gt;CameraFrameListener.start(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听帧数据&lt;/p&gt;
</description>
            </method>
            <method name="stop">
                <parameters>
                    <parameter name="option" type="CameraFrameListenerStopOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraFrameListener.stop.html"&gt;CameraFrameListener.stop(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听帧数据&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="Canvas" superclass="None">
        <methods>
            <method name="cancelAnimationFrame">
                <parameters>
                    <parameter name="requestID" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/Canvas.cancelAnimationFrame.html"&gt;Canvas.cancelAnimationFrame(number requestID)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消由 requestAnimationFrame 添加到计划中的动画帧请求。（仅支持在 WebGL 中使用）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createImage">
                <parameters/>
                <return-types>
                    <return-type type="Image"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/Canvas.createImage.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/Image.html"&gt;Image&lt;/a&gt; Canvas.createImage()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个图片对象。（仅支持在 WebGL 中使用，暂不支持在 OffscreenCanvas 中使用。）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getContext">
                <parameters>
                    <parameter name="contextType" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="RenderingContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/Canvas.getContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/RenderingContext.html"&gt;RenderingContext&lt;/a&gt; Canvas.getContext(string contextType)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该方法返回 Canvas 的绘图上下文&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;当前仅支持获取 WebGL 绘图上下文&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="requestAnimationFrame">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/Canvas.requestAnimationFrame.html"&gt;number Canvas.requestAnimationFrame(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在下次进行重绘时执行。（仅支持在 WebGL 中使用）&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="CanvasGradient" superclass="None">
        <methods>
            <method name="addColorStop">
                <parameters>
                    <parameter name="stop" type="Number"/>
                    <parameter name="color" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasGradient.addColorStop.html"&gt;CanvasGradient.addColorStop(number stop, string color)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加颜色的渐变点。小于最小 stop 的部分会按最小 stop 的 color 来渲染，大于最大 stop 的部分会按最大 stop 的 color 来渲染&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const ctx = wx.createCanvasContext(&amp;#39;myCanvas&amp;#39;)

// Create circular gradient
const grd = ctx.createLinearGradient(30, 10, 120, 10)
grd.addColorStop(0, &amp;#39;red&amp;#39;)
grd.addColorStop(0.16, &amp;#39;orange&amp;#39;)
grd.addColorStop(0.33, &amp;#39;yellow&amp;#39;)
grd.addColorStop(0.5, &amp;#39;green&amp;#39;)
grd.addColorStop(0.66, &amp;#39;cyan&amp;#39;)
grd.addColorStop(0.83, &amp;#39;blue&amp;#39;)
grd.addColorStop(1, &amp;#39;purple&amp;#39;)

// Fill with gradient
ctx.setFillStyle(grd)
ctx.fillRect(10, 10, 150, 80)
ctx.draw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="@program/dev/image/canvas/color-stop.png" alt=""&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="Console" superclass="None">
        <methods>
            <method name="debug">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.debug.html"&gt;console.debug()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 debug 日志&lt;/p&gt;
</description>
            </method>
            <method name="error">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.error.html"&gt;console.error()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 error 日志&lt;/p&gt;
</description>
            </method>
            <method name="group">
                <parameters>
                    <parameter name="label" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.group.html"&gt;console.group(string label)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在调试面板中创建一个新的分组。随后输出的内容都会被添加一个缩进，表示该内容属于当前分组。调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.groupEnd.html"&gt;console.groupEnd&lt;/a&gt;之后分组结束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅在工具中有效，在 vConsole 中为空函数实现。&lt;/p&gt;
</description>
            </method>
            <method name="groupEnd">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.groupEnd.html"&gt;console.groupEnd()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;结束由 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.group.html"&gt;console.group&lt;/a&gt; 创建的分组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅在工具中有效，在 vConsole 中为空函数实现。&lt;/p&gt;
</description>
            </method>
            <method name="info">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.info.html"&gt;console.info()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 info 日志&lt;/p&gt;
</description>
            </method>
            <method name="log">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.log.html"&gt;console.log()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 log 日志&lt;/p&gt;
</description>
            </method>
            <method name="warn">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.warn.html"&gt;console.warn()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 warn 日志&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="DownloadTask" superclass="None">
        <methods>
            <method name="abort">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.abort.html"&gt;DownloadTask.abort()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中断下载任务&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offHeadersReceived">
                <parameters>
                    <parameter name="callback" type="DownloadTaskOffHeadersReceivedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.offHeadersReceived.html"&gt;DownloadTask.offHeadersReceived(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 HTTP Response Header 事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offProgressUpdate">
                <parameters>
                    <parameter name="callback" type="DownloadTaskOffProgressUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.offProgressUpdate.html"&gt;DownloadTask.offProgressUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听下载进度变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onHeadersReceived">
                <parameters>
                    <parameter name="callback" type="DownloadTaskOnHeadersReceivedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.onHeadersReceived.html"&gt;DownloadTask.onHeadersReceived(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 HTTP Response Header 事件。会比请求完成事件更早&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onProgressUpdate">
                <parameters>
                    <parameter name="callback" type="DownloadTaskOnProgressUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.onProgressUpdate.html"&gt;DownloadTask.onProgressUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听下载进度变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="EditorContext" superclass="None">
        <methods>
            <method name="clear">
                <parameters>
                    <parameter name="option" type="ClearOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.clear.html"&gt;EditorContext.clear(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;清空编辑器内容&lt;/p&gt;
</description>
            </method>
            <method name="format">
                <parameters>
                    <parameter name="name" type="String"/>
                    <parameter name="value" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.format.html"&gt;EditorContext.format(string name, string value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改样式&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="支持设置的样式列表"&gt;支持设置的样式列表&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;italic&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;underline&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strike&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ins&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;script&lt;/td&gt;
&lt;td&gt;sub / super&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;td&gt;H1 / H2 / h3 / H4 / h5 /  H6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;align&lt;/td&gt;
&lt;td&gt;left / center / right / justify&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;direction&lt;/td&gt;
&lt;td&gt;rtl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indent&lt;/td&gt;
&lt;td&gt;-1 / +1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;ordered / bullet / check&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;color&lt;/td&gt;
&lt;td&gt;hex color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;backgroundColor&lt;/td&gt;
&lt;td&gt;hex color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;margin/marginTop/marginBottom/marginLeft/marginRight&lt;/td&gt;
&lt;td&gt;css style&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;padding/paddingTop/paddingBottom/paddingLeft/paddingRight&lt;/td&gt;
&lt;td&gt;css style&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;font/fontSize/fontStyle/fontVariant/fontWeight/fontFamily&lt;/td&gt;
&lt;td&gt;css style&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lineHeight&lt;/td&gt;
&lt;td&gt;css style&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;letterSpacing&lt;/td&gt;
&lt;td&gt;css style&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;textDecoration&lt;/td&gt;
&lt;td&gt;css style&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;textIndent&lt;/td&gt;
&lt;td&gt;css style&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;对已经应用样式的选区设置会取消样式。css style 表示 css 中规定的允许值。&lt;/p&gt;
</description>
            </method>
            <method name="getContents">
                <parameters>
                    <parameter name="option" type="GetContentsOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.getContents.html"&gt;EditorContext.getContents(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取编辑器内容&lt;/p&gt;
</description>
            </method>
            <method name="insertDivider">
                <parameters>
                    <parameter name="option" type="InsertDividerOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.insertDivider.html"&gt;EditorContext.insertDivider(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;插入分割线&lt;/p&gt;
</description>
            </method>
            <method name="insertImage">
                <parameters>
                    <parameter name="option" type="InsertImageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.insertImage.html"&gt;EditorContext.insertImage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;插入图片&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;this.editorCtx.insertImage({
  src: &amp;#39;xx&amp;#39;,
  width: &amp;#39;100px&amp;#39;,
  height: &amp;#39;50px&amp;#39;,
  extClass: className
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="insertText">
                <parameters>
                    <parameter name="option" type="InsertTextOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.insertText.html"&gt;EditorContext.insertText(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;覆盖当前选区，设置一段文本&lt;/p&gt;
</description>
            </method>
            <method name="redo">
                <parameters>
                    <parameter name="option" type="RedoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.redo.html"&gt;EditorContext.redo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;恢复&lt;/p&gt;
</description>
            </method>
            <method name="removeFormat">
                <parameters>
                    <parameter name="option" type="RemoveFormatOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.removeFormat.html"&gt;EditorContext.removeFormat(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;清除当前选区的样式&lt;/p&gt;
</description>
            </method>
            <method name="setContents">
                <parameters>
                    <parameter name="option" type="SetContentsOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.setContents.html"&gt;EditorContext.setContents(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化编辑器内容，hmlt和delta同时存在时仅delta生效&lt;/p&gt;
</description>
            </method>
            <method name="undo">
                <parameters>
                    <parameter name="option" type="UndoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.undo.html"&gt;EditorContext.undo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;撤销&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="FileSystemManager" superclass="None">
        <methods>
            <method name="readdirSync">
                <parameters>
                    <parameter name="dirPath" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.readdirSync.html"&gt;Array.&lt;string&gt; FileSystemManager.readdirSync(string dirPath)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.readdir.html"&gt;FileSystemManager.readdir&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="access">
                <parameters>
                    <parameter name="option" type="AccessOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.access.html"&gt;FileSystemManager.access(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;判断文件/目录是否存在&lt;/p&gt;
</description>
            </method>
            <method name="accessSync">
                <parameters>
                    <parameter name="path" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.accessSync.html"&gt;FileSystemManager.accessSync(string path)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.access.html"&gt;FileSystemManager.access&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="appendFile">
                <parameters>
                    <parameter name="option" type="AppendFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.appendFile.html"&gt;FileSystemManager.appendFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在文件结尾追加内容&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="appendFileSync">
                <parameters>
                    <parameter name="filePath" type="String"/>
                    <parameter name="data" type="None"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.appendFileSync.html"&gt;FileSystemManager.appendFileSync(string filePath, string|ArrayBuffer data, string encoding)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.appendFile.html"&gt;FileSystemManager.appendFile&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="copyFile">
                <parameters>
                    <parameter name="option" type="CopyFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.copyFile.html"&gt;FileSystemManager.copyFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;复制文件&lt;/p&gt;
</description>
            </method>
            <method name="copyFileSync">
                <parameters>
                    <parameter name="srcPath" type="String"/>
                    <parameter name="destPath" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.copyFileSync.html"&gt;FileSystemManager.copyFileSync(string srcPath, string destPath)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.copyFile.html"&gt;FileSystemManager.copyFile&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="getFileInfo">
                <parameters>
                    <parameter name="option" type="FileSystemManagerGetFileInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.getFileInfo.html"&gt;FileSystemManager.getFileInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取该小程序下的 本地临时文件 或 本地缓存文件 信息&lt;/p&gt;
</description>
            </method>
            <method name="getSavedFileList">
                <parameters>
                    <parameter name="option" type="FileSystemManagerGetSavedFileListOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.getSavedFileList.html"&gt;FileSystemManager.getSavedFileList(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取该小程序下已保存的本地缓存文件列表&lt;/p&gt;
</description>
            </method>
            <method name="mkdir">
                <parameters>
                    <parameter name="option" type="MkdirOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.mkdir.html"&gt;FileSystemManager.mkdir(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建目录&lt;/p&gt;
</description>
            </method>
            <method name="mkdirSync">
                <parameters>
                    <parameter name="dirPath" type="String"/>
                    <parameter name="recursive" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.mkdirSync.html"&gt;FileSystemManager.mkdirSync(string dirPath, boolean recursive)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.mkdir.html"&gt;FileSystemManager.mkdir&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="readFile">
                <parameters>
                    <parameter name="option" type="ReadFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.readFile.html"&gt;FileSystemManager.readFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;读取本地文件内容&lt;/p&gt;
</description>
            </method>
            <method name="readdir">
                <parameters>
                    <parameter name="option" type="ReaddirOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.readdir.html"&gt;FileSystemManager.readdir(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;读取目录内文件列表&lt;/p&gt;
</description>
            </method>
            <method name="removeSavedFile">
                <parameters>
                    <parameter name="option" type="FileSystemManagerRemoveSavedFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.removeSavedFile.html"&gt;FileSystemManager.removeSavedFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;删除该小程序下已保存的本地缓存文件&lt;/p&gt;
</description>
            </method>
            <method name="rename">
                <parameters>
                    <parameter name="option" type="RenameOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.rename.html"&gt;FileSystemManager.rename(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重命名文件。可以把文件从 oldPath 移动到 newPath&lt;/p&gt;
</description>
            </method>
            <method name="renameSync">
                <parameters>
                    <parameter name="oldPath" type="String"/>
                    <parameter name="newPath" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.renameSync.html"&gt;FileSystemManager.renameSync(string oldPath, string newPath)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.rename.html"&gt;FileSystemManager.rename&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="rmdir">
                <parameters>
                    <parameter name="option" type="RmdirOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.rmdir.html"&gt;FileSystemManager.rmdir(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;删除目录&lt;/p&gt;
</description>
            </method>
            <method name="rmdirSync">
                <parameters>
                    <parameter name="dirPath" type="String"/>
                    <parameter name="recursive" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.rmdirSync.html"&gt;FileSystemManager.rmdirSync(string dirPath, boolean recursive)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.rmdir.html"&gt;FileSystemManager.rmdir&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="saveFile">
                <parameters>
                    <parameter name="option" type="FileSystemManagerSaveFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.saveFile.html"&gt;FileSystemManager.saveFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保存临时文件到本地。此接口会移动临时文件，因此调用成功后，tempFilePath 将不可用。&lt;/p&gt;
</description>
            </method>
            <method name="stat">
                <parameters>
                    <parameter name="option" type="StatOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.stat.html"&gt;FileSystemManager.stat(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取文件 Stats 对象&lt;/p&gt;
</description>
            </method>
            <method name="unlink">
                <parameters>
                    <parameter name="option" type="UnlinkOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.unlink.html"&gt;FileSystemManager.unlink(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;删除文件&lt;/p&gt;
</description>
            </method>
            <method name="unlinkSync">
                <parameters>
                    <parameter name="filePath" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.unlinkSync.html"&gt;FileSystemManager.unlinkSync(string filePath)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.unlink.html"&gt;FileSystemManager.unlink&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="unzip">
                <parameters>
                    <parameter name="option" type="UnzipOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.unzip.html"&gt;FileSystemManager.unzip(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解压文件&lt;/p&gt;
</description>
            </method>
            <method name="writeFile">
                <parameters>
                    <parameter name="option" type="WriteFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.writeFile.html"&gt;FileSystemManager.writeFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写文件&lt;/p&gt;
</description>
            </method>
            <method name="writeFileSync">
                <parameters>
                    <parameter name="filePath" type="String"/>
                    <parameter name="data" type="None"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.writeFileSync.html"&gt;FileSystemManager.writeFileSync(string filePath, string|ArrayBuffer data, string encoding)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.writeFile.html"&gt;FileSystemManager.writeFile&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="statSync">
                <parameters>
                    <parameter name="path" type="String"/>
                    <parameter name="recursive" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.statSync.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/Stats.html"&gt;Stats&lt;/a&gt;|Object FileSystemManager.statSync(string path, boolean recursive)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.stat.html"&gt;FileSystemManager.stat&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="saveFileSync">
                <parameters>
                    <parameter name="tempFilePath" type="String"/>
                    <parameter name="filePath" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.saveFileSync.html"&gt;number FileSystemManager.saveFileSync(string tempFilePath, string filePath)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.saveFile.html"&gt;FileSystemManager.saveFile&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="readFileSync">
                <parameters>
                    <parameter name="filePath" type="String"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.readFileSync.html"&gt;string|ArrayBuffer FileSystemManager.readFileSync(string filePath, string encoding)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.readFile.html"&gt;FileSystemManager.readFile&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="GeneralCallbackResult" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IBeaconError" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ok&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11000&lt;/td&gt;
&lt;td&gt;unsupport&lt;/td&gt;
&lt;td&gt;系统或设备不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11001&lt;/td&gt;
&lt;td&gt;bluetooth service unavailable&lt;/td&gt;
&lt;td&gt;蓝牙服务不可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11002&lt;/td&gt;
&lt;td&gt;location service unavailable&lt;/td&gt;
&lt;td&gt;位置服务不可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11003&lt;/td&gt;
&lt;td&gt;already start&lt;/td&gt;
&lt;td&gt;已经开始搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11004&lt;/td&gt;
&lt;td&gt;not startBeaconDiscovery&lt;/td&gt;
&lt;td&gt;还未开始搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11005&lt;/td&gt;
&lt;td&gt;system error&lt;/td&gt;
&lt;td&gt;系统错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11006&lt;/td&gt;
&lt;td&gt;invalid data&lt;/td&gt;
&lt;td&gt;参数不正确&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
            <property name="errCode" type="Number">
                <description>&lt;p&gt;错误码&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ok&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11000&lt;/td&gt;
&lt;td&gt;unsupport&lt;/td&gt;
&lt;td&gt;系统或设备不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11001&lt;/td&gt;
&lt;td&gt;bluetooth service unavailable&lt;/td&gt;
&lt;td&gt;蓝牙服务不可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11002&lt;/td&gt;
&lt;td&gt;location service unavailable&lt;/td&gt;
&lt;td&gt;位置服务不可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11003&lt;/td&gt;
&lt;td&gt;already start&lt;/td&gt;
&lt;td&gt;已经开始搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11004&lt;/td&gt;
&lt;td&gt;not startBeaconDiscovery&lt;/td&gt;
&lt;td&gt;还未开始搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11005&lt;/td&gt;
&lt;td&gt;system error&lt;/td&gt;
&lt;td&gt;系统错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11006&lt;/td&gt;
&lt;td&gt;invalid data&lt;/td&gt;
&lt;td&gt;参数不正确&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="IntersectionObserver" superclass="None">
        <methods>
            <method name="disconnect">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.disconnect.html"&gt;IntersectionObserver.disconnect()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听。回调函数将不再触发&lt;/p&gt;
</description>
            </method>
            <method name="observe">
                <parameters>
                    <parameter name="targetSelector" type="String"/>
                    <parameter name="callback" type="ObserveCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.observe.html"&gt;IntersectionObserver.observe(string targetSelector, function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;指定目标节点并开始监听相交状态变化情况&lt;/p&gt;
</description>
            </method>
            <method name="relativeTo">
                <parameters>
                    <parameter name="selector" type="String"/>
                    <parameter name="margins" type="RelativeToMargins"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.relativeTo.html"&gt;IntersectionObserver.relativeTo(string selector, Object margins)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用选择器指定一个节点，作为参照区域之一。&lt;/p&gt;
</description>
            </method>
            <method name="relativeToViewport">
                <parameters>
                    <parameter name="margins" type="RelativeToViewportMargins"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.relativeToViewport.html"&gt;IntersectionObserver.relativeToViewport(Object margins)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;指定页面显示区域作为参照区域之一&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面的示例代码中，如果目标节点（用选择器 .target-class 指定）进入显示区域以下 100px 时，就会触发回调函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;Page({
  onLoad: function(){
    wx.createIntersectionObserver().relativeToViewport({bottom: 100}).observe(&amp;#39;.target-class&amp;#39;, (res) =&amp;gt; {
      res.intersectionRatio // 相交区域占目标节点的布局区域的比例
      res.intersectionRect // 相交区域
      res.intersectionRect.left // 相交区域的左边界坐标
      res.intersectionRect.top // 相交区域的上边界坐标
      res.intersectionRect.width // 相交区域的宽度
      res.intersectionRect.height // 相交区域的高度
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="InterstitialAd" superclass="None">
        <methods>
            <method name="destroy">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.destroy.html"&gt;InterstitialAd.destroy()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;销毁插屏广告实例。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offClose">
                <parameters>
                    <parameter name="callback" type="InterstitialAdOffCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.offClose.html"&gt;InterstitialAd.offClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听插屏广告关闭事件&lt;/p&gt;
</description>
            </method>
            <method name="offError">
                <parameters>
                    <parameter name="callback" type="InterstitialAdOffErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.offError.html"&gt;InterstitialAd.offError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听插屏错误事件&lt;/p&gt;
</description>
            </method>
            <method name="offLoad">
                <parameters>
                    <parameter name="callback" type="InterstitialAdOffLoadCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.offLoad.html"&gt;InterstitialAd.offLoad(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听插屏广告加载事件&lt;/p&gt;
</description>
            </method>
            <method name="onClose">
                <parameters>
                    <parameter name="callback" type="InterstitialAdOnCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.onClose.html"&gt;InterstitialAd.onClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听插屏广告关闭事件。&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="InterstitialAdOnErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.onError.html"&gt;InterstitialAd.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听插屏错误事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误码信息与解决方案表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;错误码是通过onError获取到的错误信息。调试期间，可以通过异常返回来捕获信息。
在小程序发布上线之后，如果遇到异常问题，可以在&lt;a href="https://mp.weixin.qq.com/"&gt;“运维中心“&lt;/a&gt;里面搜寻错误日志，还可以针对异常返回加上适当的监控信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;异常情况&lt;/th&gt;
&lt;th&gt;理由&lt;/th&gt;
&lt;th&gt;解决方案&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;后端错误调用失败&lt;/td&gt;
&lt;td&gt;该项错误不是开发者的异常情况&lt;/td&gt;
&lt;td&gt;一般情况下忽略一段时间即可恢复。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;参数错误&lt;/td&gt;
&lt;td&gt;使用方法错误&lt;/td&gt;
&lt;td&gt;可以前往developers.weixin.qq.com确认具体教程（小程序和小游戏分别有各自的教程，可以在顶部选项中，“设计”一栏的右侧进行切换。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1002&lt;/td&gt;
&lt;td&gt;广告单元无效&lt;/td&gt;
&lt;td&gt;可能是拼写错误、或者误用了其他APP的广告ID&lt;/td&gt;
&lt;td&gt;请重新前往mp.weixin.qq.com确认广告位ID。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1003&lt;/td&gt;
&lt;td&gt;内部错误&lt;/td&gt;
&lt;td&gt;该项错误不是开发者的异常情况&lt;/td&gt;
&lt;td&gt;一般情况下忽略一段时间即可恢复。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1004&lt;/td&gt;
&lt;td&gt;无适合的广告&lt;/td&gt;
&lt;td&gt;广告不是每一次都会出现，这次没有出现可能是由于该用户不适合浏览广告&lt;/td&gt;
&lt;td&gt;属于正常情况，且开发者需要针对这种情况做形态上的兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1005&lt;/td&gt;
&lt;td&gt;广告组件审核中&lt;/td&gt;
&lt;td&gt;你的广告正在被审核，无法展现广告&lt;/td&gt;
&lt;td&gt;请前往mp.weixin.qq.com确认审核状态，且开发者需要针对这种情况做形态上的兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1006&lt;/td&gt;
&lt;td&gt;广告组件被驳回&lt;/td&gt;
&lt;td&gt;你的广告审核失败，无法展现广告&lt;/td&gt;
&lt;td&gt;请前往mp.weixin.qq.com确认审核状态，且开发者需要针对这种情况做形态上的兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1007&lt;/td&gt;
&lt;td&gt;广告组件被驳回&lt;/td&gt;
&lt;td&gt;你的广告能力已经被封禁，封禁期间无法展现广告&lt;/td&gt;
&lt;td&gt;请前往mp.weixin.qq.com确认小程序广告封禁状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1008&lt;/td&gt;
&lt;td&gt;广告单元已关闭&lt;/td&gt;
&lt;td&gt;该广告位的广告能力已经被关闭&lt;/td&gt;
&lt;td&gt;请前往mp.weixin.qq.com重新打开对应广告位的展现。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </method>
            <method name="onLoad">
                <parameters>
                    <parameter name="callback" type="InterstitialAdOnLoadCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.onLoad.html"&gt;InterstitialAd.onLoad(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听插屏广告加载事件。&lt;/p&gt;
</description>
            </method>
            <method name="load">
                <parameters/>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.load.html"&gt;Promise InterstitialAd.load()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;加载插屏广告。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="show">
                <parameters/>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.show.html"&gt;Promise InterstitialAd.show()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示插屏广告。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误码信息表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果插屏广告显示失败，InterstitialAd.show() 方法会返回一个rejected Promise，开发者可以获取到错误码及对应的错误信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;异常情况&lt;/th&gt;
&lt;th&gt;理由&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;2001&lt;/td&gt;
&lt;td&gt;触发频率限制&lt;/td&gt;
&lt;td&gt;小程序启动一定时间内不允许展示插屏广告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2002&lt;/td&gt;
&lt;td&gt;触发频率限制&lt;/td&gt;
&lt;td&gt;距离小程序插屏广告或者激励视频广告上次播放时间间隔不足，不允许展示插屏广告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;触发频率限制&lt;/td&gt;
&lt;td&gt;当前正在播放激励视频广告或者插屏广告，不允许再次展示插屏广告&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2004&lt;/td&gt;
&lt;td&gt;广告渲染失败&lt;/td&gt;
&lt;td&gt;该项错误不是开发者的异常情况，或因小程序页面切换导致广告渲染失败&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;td&gt;广告调用异常&lt;/td&gt;
&lt;td&gt;插屏广告实例不允许跨页面调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="LivePlayerContext" superclass="None">
        <methods>
            <method name="exitFullScreen">
                <parameters>
                    <parameter name="option" type="ExitFullScreenOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.exitFullScreen.html"&gt;LivePlayerContext.exitFullScreen(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;退出全屏&lt;/p&gt;
</description>
            </method>
            <method name="mute">
                <parameters>
                    <parameter name="option" type="MuteOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.mute.html"&gt;LivePlayerContext.mute(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;静音&lt;/p&gt;
</description>
            </method>
            <method name="pause">
                <parameters>
                    <parameter name="option" type="LivePlayerContextPauseOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.pause.html"&gt;LivePlayerContext.pause(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="play">
                <parameters>
                    <parameter name="option" type="PlayOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.play.html"&gt;LivePlayerContext.play(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;播放&lt;/p&gt;
</description>
            </method>
            <method name="requestFullScreen">
                <parameters>
                    <parameter name="option" type="LivePlayerContextRequestFullScreenOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.requestFullScreen.html"&gt;LivePlayerContext.requestFullScreen(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进入全屏&lt;/p&gt;
</description>
            </method>
            <method name="resume">
                <parameters>
                    <parameter name="option" type="LivePlayerContextResumeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.resume.html"&gt;LivePlayerContext.resume(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;恢复&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="snapshot">
                <parameters>
                    <parameter name="option" type="LivePlayerContextSnapshotOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.snapshot.html"&gt;LivePlayerContext.snapshot(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截图&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stop">
                <parameters>
                    <parameter name="option" type="LivePlayerContextStopOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.stop.html"&gt;LivePlayerContext.stop(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="LivePusherContext" superclass="None">
        <methods>
            <method name="pause">
                <parameters>
                    <parameter name="option" type="LivePusherContextPauseOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.pause.html"&gt;LivePusherContext.pause(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停推流&lt;/p&gt;
</description>
            </method>
            <method name="pauseBGM">
                <parameters>
                    <parameter name="option" type="PauseBGMOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.pauseBGM.html"&gt;LivePusherContext.pauseBGM(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停背景音&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="playBGM">
                <parameters>
                    <parameter name="option" type="PlayBGMOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.playBGM.html"&gt;LivePusherContext.playBGM(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;播放背景音&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="resume">
                <parameters>
                    <parameter name="option" type="LivePusherContextResumeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.resume.html"&gt;LivePusherContext.resume(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;恢复推流&lt;/p&gt;
</description>
            </method>
            <method name="resumeBGM">
                <parameters>
                    <parameter name="option" type="ResumeBGMOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.resumeBGM.html"&gt;LivePusherContext.resumeBGM(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;恢复背景音&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setBGMVolume">
                <parameters>
                    <parameter name="option" type="SetBGMVolumeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.setBGMVolume.html"&gt;LivePusherContext.setBGMVolume(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置背景音音量&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="snapshot">
                <parameters>
                    <parameter name="option" type="LivePusherContextSnapshotOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.snapshot.html"&gt;LivePusherContext.snapshot(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;快照&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="start">
                <parameters>
                    <parameter name="option" type="LivePusherContextStartOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.start.html"&gt;LivePusherContext.start(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始推流，同时开启摄像头预览&lt;/p&gt;
</description>
            </method>
            <method name="startPreview">
                <parameters>
                    <parameter name="option" type="StartPreviewOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.startPreview.html"&gt;LivePusherContext.startPreview(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开启摄像头预览&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stop">
                <parameters>
                    <parameter name="option" type="LivePusherContextStopOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.stop.html"&gt;LivePusherContext.stop(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止推流，同时停止摄像头预览&lt;/p&gt;
</description>
            </method>
            <method name="stopBGM">
                <parameters>
                    <parameter name="option" type="StopBGMOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.stopBGM.html"&gt;LivePusherContext.stopBGM(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止背景音&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopPreview">
                <parameters>
                    <parameter name="option" type="StopPreviewOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.stopPreview.html"&gt;LivePusherContext.stopPreview(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭摄像头预览&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="switchCamera">
                <parameters>
                    <parameter name="option" type="SwitchCameraOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.switchCamera.html"&gt;LivePusherContext.switchCamera(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;切换前后摄像头&lt;/p&gt;
</description>
            </method>
            <method name="toggleTorch">
                <parameters>
                    <parameter name="option" type="ToggleTorchOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.toggleTorch.html"&gt;LivePusherContext.toggleTorch(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;切换手电筒&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="LogManager" superclass="None">
        <methods>
            <method name="debug">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/LogManager.debug.html"&gt;LogManager.debug()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写 debug 日志&lt;/p&gt;
</description>
            </method>
            <method name="info">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/LogManager.info.html"&gt;LogManager.info()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写 info 日志&lt;/p&gt;
</description>
            </method>
            <method name="log">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/LogManager.log.html"&gt;LogManager.log()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写 log 日志&lt;/p&gt;
</description>
            </method>
            <method name="warn">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/LogManager.warn.html"&gt;LogManager.warn()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写 warn 日志&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="MapContext" superclass="None">
        <methods>
            <method name="getCenterLocation">
                <parameters>
                    <parameter name="option" type="GetCenterLocationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.getCenterLocation.html"&gt;MapContext.getCenterLocation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前地图中心的经纬度。返回的是 gcj02 坐标系，可以用于 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.openLocation.html"&gt;wx.openLocation()&lt;/a&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getRegion">
                <parameters>
                    <parameter name="option" type="GetRegionOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.getRegion.html"&gt;MapContext.getRegion(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前地图的视野范围&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getRotate">
                <parameters>
                    <parameter name="option" type="GetRotateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.getRotate.html"&gt;MapContext.getRotate(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前地图的旋转角&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getScale">
                <parameters>
                    <parameter name="option" type="GetScaleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.getScale.html"&gt;MapContext.getScale(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前地图的缩放级别&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getSkew">
                <parameters>
                    <parameter name="option" type="GetSkewOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.getSkew.html"&gt;MapContext.getSkew(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前地图的倾斜角&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="includePoints">
                <parameters>
                    <parameter name="option" type="IncludePointsOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.includePoints.html"&gt;MapContext.includePoints(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;缩放视野展示所有经纬度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="moveToLocation">
                <parameters>
                    <parameter name="option" type="MoveToLocationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.moveToLocation.html"&gt;MapContext.moveToLocation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将地图中心移置当前定位点，此时需设置地图组件 show-location 为true。{%version(&amp;#39;2.8.0&amp;#39;)%} 起支持将地图中心移动到指定位置。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="translateMarker">
                <parameters>
                    <parameter name="option" type="TranslateMarkerOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.translateMarker.html"&gt;MapContext.translateMarker(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;平移marker，带动画&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="NFCError" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ok&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;当前设备不支持NFC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13001&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;当前设备支持NFC，但系统NFC开关未开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13002&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;当前设备支持NFC，但不支持HCE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13003&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AID列表参数格式错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13004&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;未设置微信为默认NFC支付应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13005&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;返回的指令不合法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13006&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;注册AID失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
            <property name="errCode" type="Number">
                <description>&lt;p&gt;错误码&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ok&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;当前设备不支持NFC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13001&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;当前设备支持NFC，但系统NFC开关未开启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13002&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;当前设备支持NFC，但不支持HCE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13003&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AID列表参数格式错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13004&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;未设置微信为默认NFC支付应用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13005&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;返回的指令不合法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13006&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;注册AID失败&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="NodesRef" superclass="None">
        <methods>
            <method name="boundingClientRect">
                <parameters>
                    <parameter name="callback" type="BoundingClientRectCallback"/>
                </parameters>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.boundingClientRect.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html"&gt;SelectorQuery&lt;/a&gt; NodesRef.boundingClientRect(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加节点的布局位置的查询请求。相对于显示区域，以像素为单位。其功能类似于 DOM 的 &lt;code&gt;getBoundingClientRect&lt;/code&gt;。返回 &lt;code&gt;NodesRef&lt;/code&gt; 对应的 &lt;code&gt;SelectorQuery&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Page({
  getRect () {
    wx.createSelectorQuery().select(&amp;#39;#the-id&amp;#39;).boundingClientRect(function(rect){
      rect.id      // 节点的ID
      rect.dataset // 节点的dataset
      rect.left    // 节点的左边界坐标
      rect.right   // 节点的右边界坐标
      rect.top     // 节点的上边界坐标
      rect.bottom  // 节点的下边界坐标
      rect.width   // 节点的宽度
      rect.height  // 节点的高度
    }).exec()
  },
  getAllRects () {
    wx.createSelectorQuery().selectAll(&amp;#39;.a-class&amp;#39;).boundingClientRect(function(rects){
      rects.forEach(function(rect){
        rect.id      // 节点的ID
        rect.dataset // 节点的dataset
        rect.left    // 节点的左边界坐标
        rect.right   // 节点的右边界坐标
        rect.top     // 节点的上边界坐标
        rect.bottom  // 节点的下边界坐标
        rect.width   // 节点的宽度
        rect.height  // 节点的高度
      })
    }).exec()
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="context">
                <parameters>
                    <parameter name="callback" type="ContextCallback"/>
                </parameters>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.context.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html"&gt;SelectorQuery&lt;/a&gt; NodesRef.context(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加节点的 Context 对象查询请求。目前支持 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html"&gt;VideoContext&lt;/a&gt;、&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html"&gt;CanvasContext&lt;/a&gt;、&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html"&gt;LivePlayerContext&lt;/a&gt;、&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/editor/EditorContext.html"&gt;EditorContext&lt;/a&gt;和 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html"&gt;MapContext&lt;/a&gt; 的获取。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Page({
  getContext () {
    wx.createSelectorQuery().select(&amp;#39;.the-video-class&amp;#39;).context(function(res){
      console.log(res.context) // 节点对应的 Context 对象。如：选中的节点是 &amp;lt;video&amp;gt; 组件，那么此处即返回 VideoContext 对象
    }).exec()
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="fields">
                <parameters>
                    <parameter name="fields" type="Fields"/>
                    <parameter name="callback" type="FieldsCallback"/>
                </parameters>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.fields.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html"&gt;SelectorQuery&lt;/a&gt; NodesRef.fields(Object fields, function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取节点的相关信息。需要获取的字段在fields中指定。返回值是 &lt;code&gt;nodesRef&lt;/code&gt; 对应的 &lt;code&gt;selectorQuery&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;computedStyle 的优先级高于 size，当同时在 computedStyle 里指定了 width/height 和传入了 size: true，则优先返回 computedStyle 获取到的 width/height。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Page({
  getFields () {
    wx.createSelectorQuery().select(&amp;#39;#the-id&amp;#39;).fields({
      dataset: true,
      size: true,
      scrollOffset: true,
      properties: [&amp;#39;scrollX&amp;#39;, &amp;#39;scrollY&amp;#39;],
      computedStyle: [&amp;#39;margin&amp;#39;, &amp;#39;backgroundColor&amp;#39;],
      context: true,
    }, function (res) {
      res.dataset    // 节点的dataset
      res.width      // 节点的宽度
      res.height     // 节点的高度
      res.scrollLeft // 节点的水平滚动位置
      res.scrollTop  // 节点的竖直滚动位置
      res.scrollX    // 节点 scroll-x 属性的当前值
      res.scrollY    // 节点 scroll-y 属性的当前值
      // 此处返回指定要返回的样式名
      res.margin
      res.backgroundColor
      res.context    // 节点对应的 Context 对象
    }).exec()
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="node">
                <parameters>
                    <parameter name="callback" type="NodeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.node.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html"&gt;SelectorQuery&lt;/a&gt; NodesRef.node(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取 Node 节点实例。目前支持 &lt;a href="(canvas)"&gt;Canvas&lt;/a&gt; 的获取。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Page({
  getNode() {
    wx.createSelectorQuery().select(&amp;#39;.canvas&amp;#39;).node(function(res){
      console.log(res.node) // 节点对应的 Canvas 实例。
    }).exec()
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="scrollOffset">
                <parameters>
                    <parameter name="callback" type="ScrollOffsetCallback"/>
                </parameters>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.scrollOffset.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html"&gt;SelectorQuery&lt;/a&gt; NodesRef.scrollOffset(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加节点的滚动位置查询请求。以像素为单位。节点必须是 &lt;code&gt;scroll-view&lt;/code&gt; 或者 &lt;code&gt;viewport&lt;/code&gt;，返回 &lt;code&gt;NodesRef&lt;/code&gt; 对应的 &lt;code&gt;SelectorQuery&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Page({
  getScrollOffset () {
    wx.createSelectorQuery().selectViewport().scrollOffset(function(res){
      res.id      // 节点的ID
      res.dataset // 节点的dataset
      res.scrollLeft // 节点的水平滚动位置
      res.scrollTop  // 节点的竖直滚动位置
    }).exec()
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="OffscreenCanvas" superclass="None">
        <methods>
            <method name="getContext">
                <parameters>
                    <parameter name="contextType" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="RenderingContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/OffscreenCanvas.getContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/RenderingContext.html"&gt;RenderingContext&lt;/a&gt; OffscreenCanvas.getContext(string contextType)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该方法返回 OffscreenCanvas 的绘图上下文&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;当前仅支持获取 WebGL 绘图上下文&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="RealtimeLogManager" superclass="None">
        <methods>
            <method name="addFilterMsg">
                <parameters>
                    <parameter name="msg" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.addFilterMsg.html"&gt;RealtimeLogManager.addFilterMsg(string msg)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加过滤关键字&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="error">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.error.html"&gt;RealtimeLogManager.error()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写 error 日志&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="info">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.info.html"&gt;RealtimeLogManager.info()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写 info 日志&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setFilterMsg">
                <parameters>
                    <parameter name="msg" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.setFilterMsg.html"&gt;RealtimeLogManager.setFilterMsg(string msg)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置过滤关键字&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.3&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="warn">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.warn.html"&gt;RealtimeLogManager.warn()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写 warn 日志&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="RecorderManager" superclass="None">
        <methods>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="RecorderManagerOnErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.onError.html"&gt;RecorderManager.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听录音错误事件&lt;/p&gt;
</description>
            </method>
            <method name="onFrameRecorded">
                <parameters>
                    <parameter name="callback" type="OnFrameRecordedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.onFrameRecorded.html"&gt;RecorderManager.onFrameRecorded(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听已录制完指定帧大小的文件事件。如果设置了 frameSize，则会回调此事件。&lt;/p&gt;
</description>
            </method>
            <method name="onInterruptionBegin">
                <parameters>
                    <parameter name="callback" type="OnInterruptionBeginCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.onInterruptionBegin.html"&gt;RecorderManager.onInterruptionBegin(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听录音因为受到系统占用而被中断开始事件。以下场景会触发此事件：微信语音聊天、微信视频聊天。此事件触发后，录音会被暂停。pause 事件在此事件后触发&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onInterruptionEnd">
                <parameters>
                    <parameter name="callback" type="OnInterruptionEndCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.onInterruptionEnd.html"&gt;RecorderManager.onInterruptionEnd(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听录音中断结束事件。在收到 interruptionBegin 事件之后，小程序内所有录音会暂停，收到此事件之后才可再次录音成功。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onPause">
                <parameters>
                    <parameter name="callback" type="RecorderManagerOnPauseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.onPause.html"&gt;RecorderManager.onPause(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听录音暂停事件&lt;/p&gt;
</description>
            </method>
            <method name="onResume">
                <parameters>
                    <parameter name="callback" type="OnResumeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.onResume.html"&gt;RecorderManager.onResume(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听录音继续事件&lt;/p&gt;
</description>
            </method>
            <method name="onStart">
                <parameters>
                    <parameter name="callback" type="OnStartCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.onStart.html"&gt;RecorderManager.onStart(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听录音开始事件&lt;/p&gt;
</description>
            </method>
            <method name="onStop">
                <parameters>
                    <parameter name="callback" type="RecorderManagerOnStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.onStop.html"&gt;RecorderManager.onStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听录音结束事件&lt;/p&gt;
</description>
            </method>
            <method name="pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.pause.html"&gt;RecorderManager.pause()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停录音&lt;/p&gt;
</description>
            </method>
            <method name="resume">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.resume.html"&gt;RecorderManager.resume()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;继续录音&lt;/p&gt;
</description>
            </method>
            <method name="start">
                <parameters>
                    <parameter name="option" type="RecorderManagerStartOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.start.html"&gt;RecorderManager.start(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始录音&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;采样率与编码码率限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每种采样率有对应的编码码率范围有效值，设置不合法的采样率或编码码率会导致录音失败，具体对应关系如下表。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;采样率&lt;/th&gt;
&lt;th&gt;编码码率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;8000&lt;/td&gt;
&lt;td&gt;16000 ~ 48000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11025&lt;/td&gt;
&lt;td&gt;16000 ~ 48000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12000&lt;/td&gt;
&lt;td&gt;24000 ~ 64000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16000&lt;/td&gt;
&lt;td&gt;24000 ~ 96000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22050&lt;/td&gt;
&lt;td&gt;32000 ~ 128000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24000&lt;/td&gt;
&lt;td&gt;32000 ~ 128000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32000&lt;/td&gt;
&lt;td&gt;48000 ~ 192000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;44100&lt;/td&gt;
&lt;td&gt;64000 ~ 320000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48000&lt;/td&gt;
&lt;td&gt;64000 ~ 320000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </method>
            <method name="stop">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.stop.html"&gt;RecorderManager.stop()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止录音&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="RequestTask" superclass="None">
        <methods>
            <method name="abort">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/RequestTask.abort.html"&gt;RequestTask.abort()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中断请求任务&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offHeadersReceived">
                <parameters>
                    <parameter name="callback" type="RequestTaskOffHeadersReceivedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/RequestTask.offHeadersReceived.html"&gt;RequestTask.offHeadersReceived(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 HTTP Response Header 事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onHeadersReceived">
                <parameters>
                    <parameter name="callback" type="RequestTaskOnHeadersReceivedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/RequestTask.onHeadersReceived.html"&gt;RequestTask.onHeadersReceived(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 HTTP Response Header 事件。会比请求完成事件更早&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="RewardedVideoAd" superclass="None">
        <methods>
            <method name="load">
                <parameters/>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.load.html"&gt;Promise RewardedVideoAd.load()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;加载激励视频广告。&lt;/p&gt;
</description>
            </method>
            <method name="show">
                <parameters/>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.show.html"&gt;Promise RewardedVideoAd.show()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示激励视频广告。激励视频广告将从屏幕下方推入。&lt;/p&gt;
</description>
            </method>
            <method name="destroy">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.destroy.html"&gt;RewardedVideoAd.destroy()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;销毁激励视频广告实例。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offClose">
                <parameters>
                    <parameter name="callback" type="RewardedVideoAdOffCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.offClose.html"&gt;RewardedVideoAd.offClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听用户点击 &lt;code&gt;关闭广告&lt;/code&gt; 按钮的事件&lt;/p&gt;
</description>
            </method>
            <method name="offError">
                <parameters>
                    <parameter name="callback" type="RewardedVideoAdOffErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.offError.html"&gt;RewardedVideoAd.offError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听激励视频错误事件&lt;/p&gt;
</description>
            </method>
            <method name="offLoad">
                <parameters>
                    <parameter name="callback" type="RewardedVideoAdOffLoadCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.offLoad.html"&gt;RewardedVideoAd.offLoad(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听激励视频广告加载事件&lt;/p&gt;
</description>
            </method>
            <method name="onClose">
                <parameters>
                    <parameter name="callback" type="RewardedVideoAdOnCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.onClose.html"&gt;RewardedVideoAd.onClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听用户点击 &lt;code&gt;关闭广告&lt;/code&gt; 按钮的事件。&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="RewardedVideoAdOnErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.onError.html"&gt;RewardedVideoAd.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听激励视频错误事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误码信息与解决方案表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;错误码是通过onError获取到的错误信息。调试期间，可以通过异常返回来捕获信息。
在小程序发布上线之后，如果遇到异常问题，可以在&lt;a href="https://mp.weixin.qq.com/"&gt;“运维中心“&lt;/a&gt;里面搜寻错误日志，还可以针对异常返回加上适当的监控信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;异常情况&lt;/th&gt;
&lt;th&gt;理由&lt;/th&gt;
&lt;th&gt;解决方案&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;后端错误调用失败&lt;/td&gt;
&lt;td&gt;该项错误不是开发者的异常情况&lt;/td&gt;
&lt;td&gt;一般情况下忽略一段时间即可恢复。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;参数错误&lt;/td&gt;
&lt;td&gt;使用方法错误&lt;/td&gt;
&lt;td&gt;可以前往developers.weixin.qq.com确认具体教程（小程序和小游戏分别有各自的教程，可以在顶部选项中，“设计”一栏的右侧进行切换。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1002&lt;/td&gt;
&lt;td&gt;广告单元无效&lt;/td&gt;
&lt;td&gt;可能是拼写错误、或者误用了其他APP的广告ID&lt;/td&gt;
&lt;td&gt;请重新前往mp.weixin.qq.com确认广告位ID。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1003&lt;/td&gt;
&lt;td&gt;内部错误&lt;/td&gt;
&lt;td&gt;该项错误不是开发者的异常情况&lt;/td&gt;
&lt;td&gt;一般情况下忽略一段时间即可恢复。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1004&lt;/td&gt;
&lt;td&gt;无适合的广告&lt;/td&gt;
&lt;td&gt;广告不是每一次都会出现，这次没有出现可能是由于该用户不适合浏览广告&lt;/td&gt;
&lt;td&gt;属于正常情况，且开发者需要针对这种情况做形态上的兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1005&lt;/td&gt;
&lt;td&gt;广告组件审核中&lt;/td&gt;
&lt;td&gt;你的广告正在被审核，无法展现广告&lt;/td&gt;
&lt;td&gt;请前往mp.weixin.qq.com确认审核状态，且开发者需要针对这种情况做形态上的兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1006&lt;/td&gt;
&lt;td&gt;广告组件被驳回&lt;/td&gt;
&lt;td&gt;你的广告审核失败，无法展现广告&lt;/td&gt;
&lt;td&gt;请前往mp.weixin.qq.com确认审核状态，且开发者需要针对这种情况做形态上的兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1007&lt;/td&gt;
&lt;td&gt;广告组件被驳回&lt;/td&gt;
&lt;td&gt;你的广告能力已经被封禁，封禁期间无法展现广告&lt;/td&gt;
&lt;td&gt;请前往mp.weixin.qq.com确认小程序广告封禁状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1008&lt;/td&gt;
&lt;td&gt;广告单元已关闭&lt;/td&gt;
&lt;td&gt;该广告位的广告能力已经被关闭&lt;/td&gt;
&lt;td&gt;请前往mp.weixin.qq.com重新打开对应广告位的展现。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </method>
            <method name="onLoad">
                <parameters>
                    <parameter name="callback" type="RewardedVideoAdOnLoadCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.onLoad.html"&gt;RewardedVideoAd.onLoad(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听激励视频广告加载事件。&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="SelectorQuery" superclass="None">
        <methods>
            <method name="exec">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="NodesRef"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.exec.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.html"&gt;NodesRef&lt;/a&gt; SelectorQuery.exec(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;执行所有的请求。请求结果按请求次序构成数组，在callback的第一个参数中返回。&lt;/p&gt;
</description>
            </method>
            <method name="select">
                <parameters>
                    <parameter name="selector" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="NodesRef"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.select.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.html"&gt;NodesRef&lt;/a&gt; SelectorQuery.select(string selector)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在当前页面下选择第一个匹配选择器 &lt;code&gt;selector&lt;/code&gt; 的节点。返回一个 &lt;code&gt;NodesRef&lt;/code&gt; 对象实例，可以用于获取节点信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selector 语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;selector类似于 CSS 的选择器，但仅支持下列语法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID选择器：#the-id&lt;/li&gt;
&lt;li&gt;class选择器（可以连续指定多个）：.a-class.another-class&lt;/li&gt;
&lt;li&gt;子元素选择器：.the-parent &amp;gt; .the-child&lt;/li&gt;
&lt;li&gt;后代选择器：.the-ancestor .the-descendant&lt;/li&gt;
&lt;li&gt;跨自定义组件的后代选择器：.the-ancestor &amp;gt;&amp;gt;&amp;gt; .the-descendant&lt;/li&gt;
&lt;li&gt;多选择器的并集：#a-node, .some-other-nodes&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="selectAll">
                <parameters>
                    <parameter name="selector" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="NodesRef"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.selectAll.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.html"&gt;NodesRef&lt;/a&gt; SelectorQuery.selectAll(string selector)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在当前页面下选择匹配选择器 selector 的所有节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selector 语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;selector类似于 CSS 的选择器，但仅支持下列语法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID选择器：#the-id&lt;/li&gt;
&lt;li&gt;class选择器（可以连续指定多个）：.a-class.another-class&lt;/li&gt;
&lt;li&gt;子元素选择器：.the-parent &amp;gt; .the-child&lt;/li&gt;
&lt;li&gt;后代选择器：.the-ancestor .the-descendant&lt;/li&gt;
&lt;li&gt;跨自定义组件的后代选择器：.the-ancestor &amp;gt;&amp;gt;&amp;gt; .the-descendant&lt;/li&gt;
&lt;li&gt;多选择器的并集：#a-node, .some-other-nodes&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="selectViewport">
                <parameters/>
                <return-types>
                    <return-type type="NodesRef"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.selectViewport.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.html"&gt;NodesRef&lt;/a&gt; SelectorQuery.selectViewport()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择显示区域。可用于获取显示区域的尺寸、滚动位置等信息。&lt;/p&gt;
</description>
            </method>
            <method name="in">
                <parameters>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.in.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html"&gt;SelectorQuery&lt;/a&gt; SelectorQuery.in(Component component)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将选择器的选取范围更改为自定义组件 &lt;code&gt;component&lt;/code&gt; 内。（初始时，选择器仅选取页面范围的节点，不会选取任何自定义组件中的节点）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Component({
  queryMultipleNodes (){
    const query = wx.createSelectorQuery().in(this)
    query.select(&amp;#39;#the-id&amp;#39;).boundingClientRect(function(res){
      res.top // 这个组件内 #the-id 节点的上边界坐标
    }).exec()
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="SocketTask" superclass="None">
        <methods>
            <method name="close">
                <parameters>
                    <parameter name="option" type="CloseOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.close.html"&gt;SocketTask.close(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭 WebSocket 连接&lt;/p&gt;
</description>
            </method>
            <method name="onClose">
                <parameters>
                    <parameter name="callback" type="SocketTaskOnCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.onClose.html"&gt;SocketTask.onClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 连接关闭事件&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="SocketTaskOnErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.onError.html"&gt;SocketTask.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 错误事件&lt;/p&gt;
</description>
            </method>
            <method name="onMessage">
                <parameters>
                    <parameter name="callback" type="SocketTaskOnMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.onMessage.html"&gt;SocketTask.onMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 接受到服务器的消息事件&lt;/p&gt;
</description>
            </method>
            <method name="onOpen">
                <parameters>
                    <parameter name="callback" type="OnOpenCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.onOpen.html"&gt;SocketTask.onOpen(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 连接打开事件&lt;/p&gt;
</description>
            </method>
            <method name="send">
                <parameters>
                    <parameter name="option" type="SocketTaskSendOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.send.html"&gt;SocketTask.send(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过 WebSocket 连接发送数据&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="UDPSocket" superclass="None">
        <methods>
            <method name="close">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.close.html"&gt;UDPSocket.close()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭 UDP Socket 实例，相当于销毁。 在关闭之后，UDP Socket 实例不能再发送消息，每次调用 &lt;code&gt;UDPSocket.send&lt;/code&gt; 将会触发错误事件，并且 message 事件回调函数也不会再也执行。在 &lt;code&gt;UDPSocket&lt;/code&gt; 实例被创建后将被 Native 强引用，保证其不被 GC。在 &lt;code&gt;UDPSocket.close&lt;/code&gt; 后将解除对其的强引用，让 UDPSocket 实例遵从 GC。&lt;/p&gt;
</description>
            </method>
            <method name="offClose">
                <parameters>
                    <parameter name="callback" type="UDPSocketOffCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.offClose.html"&gt;UDPSocket.offClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听关闭事件&lt;/p&gt;
</description>
            </method>
            <method name="offError">
                <parameters>
                    <parameter name="callback" type="UDPSocketOffErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.offError.html"&gt;UDPSocket.offError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听错误事件&lt;/p&gt;
</description>
            </method>
            <method name="offListening">
                <parameters>
                    <parameter name="callback" type="OffListeningCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.offListening.html"&gt;UDPSocket.offListening(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听开始监听数据包消息的事件&lt;/p&gt;
</description>
            </method>
            <method name="offMessage">
                <parameters>
                    <parameter name="callback" type="OffMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.offMessage.html"&gt;UDPSocket.offMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听收到消息的事件&lt;/p&gt;
</description>
            </method>
            <method name="onClose">
                <parameters>
                    <parameter name="callback" type="UDPSocketOnCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.onClose.html"&gt;UDPSocket.onClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听关闭事件&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="UDPSocketOnErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.onError.html"&gt;UDPSocket.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听错误事件&lt;/p&gt;
</description>
            </method>
            <method name="onListening">
                <parameters>
                    <parameter name="callback" type="OnListeningCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.onListening.html"&gt;UDPSocket.onListening(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听开始监听数据包消息的事件&lt;/p&gt;
</description>
            </method>
            <method name="onMessage">
                <parameters>
                    <parameter name="callback" type="UDPSocketOnMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.onMessage.html"&gt;UDPSocket.onMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听收到消息的事件&lt;/p&gt;
</description>
            </method>
            <method name="send">
                <parameters>
                    <parameter name="option" type="UDPSocketSendOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.send.html"&gt;UDPSocket.send(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向指定的 IP 和 port 发送消息&lt;/p&gt;
</description>
            </method>
            <method name="bind">
                <parameters/>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.bind.html"&gt;number UDPSocket.bind()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;绑定一个系统随机分配的可用端口&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="UpdateManager" superclass="None">
        <methods>
            <method name="applyUpdate">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.applyUpdate.html"&gt;UpdateManager.applyUpdate()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;强制小程序重启并使用新版本。在小程序新版本下载完成后（即收到 &lt;code&gt;onUpdateReady&lt;/code&gt; 回调）调用。&lt;/p&gt;
</description>
            </method>
            <method name="onCheckForUpdate">
                <parameters>
                    <parameter name="callback" type="OnCheckForUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.onCheckForUpdate.html"&gt;UpdateManager.onCheckForUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听向微信后台请求检查更新结果事件。微信在小程序冷启动时自动检查更新，不需由开发者主动触发。&lt;/p&gt;
</description>
            </method>
            <method name="onUpdateFailed">
                <parameters>
                    <parameter name="callback" type="OnUpdateFailedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.onUpdateFailed.html"&gt;UpdateManager.onUpdateFailed(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序更新失败事件。小程序有新版本，客户端主动触发下载（无需开发者触发），下载失败（可能是网络原因等）后回调&lt;/p&gt;
</description>
            </method>
            <method name="onUpdateReady">
                <parameters>
                    <parameter name="callback" type="OnUpdateReadyCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.onUpdateReady.html"&gt;UpdateManager.onUpdateReady(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序有版本更新事件。客户端主动触发下载（无需开发者触发），下载成功后回调&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="UploadTask" superclass="None">
        <methods>
            <method name="abort">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.abort.html"&gt;UploadTask.abort()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中断上传任务&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offHeadersReceived">
                <parameters>
                    <parameter name="callback" type="UploadTaskOffHeadersReceivedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.offHeadersReceived.html"&gt;UploadTask.offHeadersReceived(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 HTTP Response Header 事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offProgressUpdate">
                <parameters>
                    <parameter name="callback" type="UploadTaskOffProgressUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.offProgressUpdate.html"&gt;UploadTask.offProgressUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听上传进度变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onHeadersReceived">
                <parameters>
                    <parameter name="callback" type="UploadTaskOnHeadersReceivedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.onHeadersReceived.html"&gt;UploadTask.onHeadersReceived(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 HTTP Response Header 事件。会比请求完成事件更早&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onProgressUpdate">
                <parameters>
                    <parameter name="callback" type="UploadTaskOnProgressUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.onProgressUpdate.html"&gt;UploadTask.onProgressUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听上传进度变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="VideoContext" superclass="None">
        <methods>
            <method name="exitFullScreen">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.exitFullScreen.html"&gt;VideoContext.exitFullScreen()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;退出全屏&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideStatusBar">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.hideStatusBar.html"&gt;VideoContext.hideStatusBar()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏状态栏，仅在iOS全屏下有效&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.pause.html"&gt;VideoContext.pause()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停视频&lt;/p&gt;
</description>
            </method>
            <method name="play">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.play.html"&gt;VideoContext.play()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;播放视频&lt;/p&gt;
</description>
            </method>
            <method name="playbackRate">
                <parameters>
                    <parameter name="rate" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.playbackRate.html"&gt;VideoContext.playbackRate(number rate)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置倍速播放&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="requestFullScreen">
                <parameters>
                    <parameter name="option" type="VideoContextRequestFullScreenOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.requestFullScreen.html"&gt;VideoContext.requestFullScreen(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进入全屏&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="seek">
                <parameters>
                    <parameter name="position" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.seek.html"&gt;VideoContext.seek(number position)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跳转到指定位置&lt;/p&gt;
</description>
            </method>
            <method name="sendDanmu">
                <parameters>
                    <parameter name="data" type="Danmu"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.sendDanmu.html"&gt;VideoContext.sendDanmu(Object data)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发送弹幕&lt;/p&gt;
</description>
            </method>
            <method name="showStatusBar">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.showStatusBar.html"&gt;VideoContext.showStatusBar()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示状态栏，仅在iOS全屏下有效&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stop">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.stop.html"&gt;VideoContext.stop()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止视频&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="WifiError" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description>&lt;p&gt;错误信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ok&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12000&lt;/td&gt;
&lt;td&gt;not init&lt;/td&gt;
&lt;td&gt;未先调用 &lt;code&gt;startWifi&lt;/code&gt; 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12001&lt;/td&gt;
&lt;td&gt;system not support&lt;/td&gt;
&lt;td&gt;当前系统不支持相关能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12002&lt;/td&gt;
&lt;td&gt;password error Wi-Fi&lt;/td&gt;
&lt;td&gt;密码错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12003&lt;/td&gt;
&lt;td&gt;connection timeout&lt;/td&gt;
&lt;td&gt;连接超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12004&lt;/td&gt;
&lt;td&gt;duplicate request&lt;/td&gt;
&lt;td&gt;重复连接 Wi-Fi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12005&lt;/td&gt;
&lt;td&gt;wifi not turned on&lt;/td&gt;
&lt;td&gt;Android 特有，未打开 Wi-Fi 开关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12006&lt;/td&gt;
&lt;td&gt;gps not turned on&lt;/td&gt;
&lt;td&gt;Android 特有，未打开 GPS 定位开关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12007&lt;/td&gt;
&lt;td&gt;user denied&lt;/td&gt;
&lt;td&gt;用户拒绝授权链接 Wi-Fi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12008&lt;/td&gt;
&lt;td&gt;invalid SSID&lt;/td&gt;
&lt;td&gt;无效 SSID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12009&lt;/td&gt;
&lt;td&gt;system config err&lt;/td&gt;
&lt;td&gt;系统运营商配置拒绝连接 Wi-Fi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12010&lt;/td&gt;
&lt;td&gt;system internal error&lt;/td&gt;
&lt;td&gt;系统其他错误，需要在 errmsg 打印具体的错误原因&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12011&lt;/td&gt;
&lt;td&gt;weapp in background&lt;/td&gt;
&lt;td&gt;应用在后台无法配置 Wi-Fi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12013&lt;/td&gt;
&lt;td&gt;wifi config may be expired&lt;/td&gt;
&lt;td&gt;系统保存的 Wi-Fi 配置过期，建议忘记 Wi-Fi 后重试&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
            <property name="errCode" type="Number">
                <description>&lt;p&gt;错误码&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;错误码&lt;/th&gt;
&lt;th&gt;错误信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;ok&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12000&lt;/td&gt;
&lt;td&gt;not init&lt;/td&gt;
&lt;td&gt;未先调用 &lt;code&gt;startWifi&lt;/code&gt; 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12001&lt;/td&gt;
&lt;td&gt;system not support&lt;/td&gt;
&lt;td&gt;当前系统不支持相关能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12002&lt;/td&gt;
&lt;td&gt;password error Wi-Fi&lt;/td&gt;
&lt;td&gt;密码错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12003&lt;/td&gt;
&lt;td&gt;connection timeout&lt;/td&gt;
&lt;td&gt;连接超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12004&lt;/td&gt;
&lt;td&gt;duplicate request&lt;/td&gt;
&lt;td&gt;重复连接 Wi-Fi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12005&lt;/td&gt;
&lt;td&gt;wifi not turned on&lt;/td&gt;
&lt;td&gt;Android 特有，未打开 Wi-Fi 开关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12006&lt;/td&gt;
&lt;td&gt;gps not turned on&lt;/td&gt;
&lt;td&gt;Android 特有，未打开 GPS 定位开关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12007&lt;/td&gt;
&lt;td&gt;user denied&lt;/td&gt;
&lt;td&gt;用户拒绝授权链接 Wi-Fi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12008&lt;/td&gt;
&lt;td&gt;invalid SSID&lt;/td&gt;
&lt;td&gt;无效 SSID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12009&lt;/td&gt;
&lt;td&gt;system config err&lt;/td&gt;
&lt;td&gt;系统运营商配置拒绝连接 Wi-Fi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12010&lt;/td&gt;
&lt;td&gt;system internal error&lt;/td&gt;
&lt;td&gt;系统其他错误，需要在 errmsg 打印具体的错误原因&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12011&lt;/td&gt;
&lt;td&gt;weapp in background&lt;/td&gt;
&lt;td&gt;应用在后台无法配置 Wi-Fi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12013&lt;/td&gt;
&lt;td&gt;wifi config may be expired&lt;/td&gt;
&lt;td&gt;系统保存的 Wi-Fi 配置过期，建议忘记 Wi-Fi 后重试&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Worker" superclass="None">
        <methods>
            <method name="onMessage">
                <parameters>
                    <parameter name="callback" type="WorkerOnMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/Worker.onMessage.html"&gt;Worker.onMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听主线程/Worker 线程向当前线程发送的消息的事件。&lt;/p&gt;
</description>
            </method>
            <method name="postMessage">
                <parameters>
                    <parameter name="message" type="IAnyObject"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/Worker.postMessage.html"&gt;Worker.postMessage(Object message)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向主线程/Worker 线程发送的消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;worker 线程中&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;worker.postMessage({
  msg: &amp;#39;hello from worker&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主线程中&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const worker = wx.createWorker(&amp;#39;workers/request/index.js&amp;#39;)

worker.postMessage({
  msg: &amp;#39;hello from main&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="terminate">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/Worker.terminate.html"&gt;Worker.terminate()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;结束当前 Worker 线程。仅限在主线程 worker 对象上调用。&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="Wx" superclass="None">
        <methods>
            <method name="base64ToArrayBuffer">
                <parameters>
                    <parameter name="base64" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="ArrayBuffer"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.base64ToArrayBuffer.html"&gt;ArrayBuffer wx.base64ToArrayBuffer(string base64)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将 Base64 字符串转成 ArrayBuffer 对象&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getAccountInfoSync">
                <parameters/>
                <return-types>
                    <return-type type="AccountInfo"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/account-info/wx.getAccountInfoSync.html"&gt;Object wx.getAccountInfoSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前帐号信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const accountInfo = wx.getAccountInfoSync();
console.log(accountInfo.miniProgram.appId) // 小程序 appId
console.log(accountInfo.plugin.appId) // 插件 appId
console.log(accountInfo.plugin.version) // 插件版本号， &amp;#39;a.b.c&amp;#39; 这样的形式&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.2.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBatteryInfoSync">
                <parameters/>
                <return-types>
                    <return-type type="GetBatteryInfoSyncResult"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfoSync.html"&gt;Object wx.getBatteryInfoSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfo.html"&gt;wx.getBatteryInfo&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="getExtConfigSync">
                <parameters/>
                <return-types>
                    <return-type type="ExtInfo"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html"&gt;Object wx.getExtConfigSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html"&gt;wx.getExtConfig&lt;/a&gt; 的同步版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本接口暂时无法通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html"&gt;wx.canIUse&lt;/a&gt; 判断是否兼容，开发者需要自行判断 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html"&gt;wx.getExtConfigSync&lt;/a&gt; 是否存在来兼容&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;let extConfig = wx.getExtConfigSync? wx.getExtConfigSync(): {}
console.log(extConfig)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getLaunchOptionsSync">
                <parameters/>
                <return-types>
                    <return-type type="LaunchOptionsApp"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html"&gt;Object wx.getLaunchOptionsSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取小程序启动时的参数。与 &lt;a href="(App#onlaunchobject-object)"&gt;&lt;code&gt;App.onLaunch&lt;/code&gt;&lt;/a&gt; 的回调参数一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回有效 referrerInfo 的场景&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景值&lt;/th&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;appId含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1020&lt;/td&gt;
&lt;td&gt;公众号 profile 页相关小程序列表&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1035&lt;/td&gt;
&lt;td&gt;公众号自定义菜单&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1036&lt;/td&gt;
&lt;td&gt;App 分享消息卡片&lt;/td&gt;
&lt;td&gt;来源App&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1037&lt;/td&gt;
&lt;td&gt;小程序打开小程序&lt;/td&gt;
&lt;td&gt;来源小程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1038&lt;/td&gt;
&lt;td&gt;从另一个小程序返回&lt;/td&gt;
&lt;td&gt;来源小程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1043&lt;/td&gt;
&lt;td&gt;公众号模板消息&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;部分版本在无&lt;code&gt;referrerInfo&lt;/code&gt;的时候会返回 &lt;code&gt;undefined&lt;/code&gt;，建议使用 &lt;code&gt;options.referrerInfo &amp;amp;&amp;amp; options.referrerInfo.appId&lt;/code&gt; 进行判断。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getMenuButtonBoundingClientRect">
                <parameters/>
                <return-types>
                    <return-type type="Rect"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/menu/wx.getMenuButtonBoundingClientRect.html"&gt;Object wx.getMenuButtonBoundingClientRect()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取菜单按钮（右上角胶囊按钮）的布局位置信息。坐标信息以屏幕左上角为原点。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getStorageInfoSync">
                <parameters/>
                <return-types>
                    <return-type type="GetStorageInfoSyncOption"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfoSync.html"&gt;Object wx.getStorageInfoSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfo.html"&gt;wx.getStorageInfo&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getStorageInfo({
  success (res) {
    console.log(res.keys)
    console.log(res.currentSize)
    console.log(res.limitSize)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  const res = wx.getStorageInfoSync()
  console.log(res.keys)
  console.log(res.currentSize)
  console.log(res.limitSize)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getSystemInfoSync">
                <parameters/>
                <return-types>
                    <return-type type="GetSystemInfoSyncResult"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfoSync.html"&gt;Object wx.getSystemInfoSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html"&gt;wx.getSystemInfo&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSystemInfo({
  success (res) {
    console.log(res.model)
    console.log(res.pixelRatio)
    console.log(res.windowWidth)
    console.log(res.windowHeight)
    console.log(res.language)
    console.log(res.version)
    console.log(res.platform)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  const res = wx.getSystemInfoSync()
  console.log(res.model)
  console.log(res.pixelRatio)
  console.log(res.windowWidth)
  console.log(res.windowHeight)
  console.log(res.language)
  console.log(res.version)
  console.log(res.platform)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="createAnimation">
                <parameters>
                    <parameter name="option" type="CreateAnimationOption"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/wx.createAnimation.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; wx.createAnimation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个动画实例 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;animation&lt;/a&gt;。调用实例的方法来描述动画。最后通过动画实例的 export 方法导出动画数据传递给组件的 animation 属性。&lt;/p&gt;
</description>
            </method>
            <method name="createAudioContext">
                <parameters>
                    <parameter name="id" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="AudioContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createAudioContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.html"&gt;AudioContext&lt;/a&gt; wx.createAudioContext(string id, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(audio)"&gt;audio&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.html"&gt;AudioContext&lt;/a&gt; 对象。&lt;/p&gt;
</description>
            </method>
            <method name="getBackgroundAudioManager">
                <parameters/>
                <return-types>
                    <return-type type="BackgroundAudioManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html"&gt;BackgroundAudioManager&lt;/a&gt; wx.getBackgroundAudioManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取&lt;strong&gt;全局唯一&lt;/strong&gt;的背景音频管理器。
小程序切入后台，如果音频处于播放状态，可以继续播放。但是后台状态不能通过调用API操纵音频的播放状态。&lt;/p&gt;
&lt;p&gt;从微信客户端6.7.2版本开始，若需要在小程序切后台后继续播放音频，需要在 &lt;a href="(configuration/app)"&gt;app.json&lt;/a&gt; 中配置 &lt;code&gt;requiredBackgroundModes&lt;/code&gt; 属性。开发版和体验版上可以直接生效，正式版还需通过审核。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createCameraContext">
                <parameters/>
                <return-types>
                    <return-type type="CameraContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/wx.createCameraContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.html"&gt;CameraContext&lt;/a&gt; wx.createCameraContext()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(camera)"&gt;camera&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.html"&gt;CameraContext&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createCanvasContext">
                <parameters>
                    <parameter name="canvasId" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="CanvasContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createCanvasContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html"&gt;CanvasContext&lt;/a&gt; wx.createCanvasContext(string canvasId, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 canvas 的绘图上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html"&gt;CanvasContext&lt;/a&gt; 对象&lt;/p&gt;
</description>
            </method>
            <method name="downloadFile">
                <parameters>
                    <parameter name="option" type="DownloadFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="DownloadTask"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/wx.downloadFile.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.html"&gt;DownloadTask&lt;/a&gt; wx.downloadFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载文件资源到本地。客户端直接发起一个 HTTPS GET 请求，返回文件的本地临时路径，单次下载允许的最大文件为 50MB。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注意：请在服务端响应的 header 中指定合理的 &lt;code&gt;Content-Type&lt;/code&gt; 字段，以保证客户端正确处理文件类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.downloadFile({
  url: &amp;#39;https://example.com/audio/123&amp;#39;, //仅为示例，并非真实的资源
  success (res) {
    // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
    if (res.statusCode === 200) {
      wx.playVoice({
        filePath: res.tempFilePath
      })
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getFileSystemManager">
                <parameters/>
                <return-types>
                    <return-type type="FileSystemManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileSystemManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.html"&gt;FileSystemManager&lt;/a&gt; wx.getFileSystemManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取全局唯一的文件管理器&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.9&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createInnerAudioContext">
                <parameters/>
                <return-types>
                    <return-type type="InnerAudioContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html"&gt;InnerAudioContext&lt;/a&gt; wx.createInnerAudioContext()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建内部 &lt;a href="(audio)"&gt;audio&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html"&gt;InnerAudioContext&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createIntersectionObserver">
                <parameters>
                    <parameter name="component" type="IAnyObject"/>
                    <parameter name="options" type="CreateIntersectionObserverOption"/>
                </parameters>
                <return-types>
                    <return-type type="IntersectionObserver"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createIntersectionObserver.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.html"&gt;IntersectionObserver&lt;/a&gt; wx.createIntersectionObserver(Object component, Object options)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建并返回一个 IntersectionObserver 对象实例。在自定义组件或包含自定义组件的页面中，应使用 &lt;code&gt;this.createIntersectionObserver([options])&lt;/code&gt; 来代替。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;LAbMxkmI7F2A&amp;#39;) %}&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.3&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createInterstitialAd">
                <parameters>
                    <parameter name="option" type="CreateInterstitialAdOption"/>
                </parameters>
                <return-types>
                    <return-type type="InterstitialAd"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/wx.createInterstitialAd.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.html"&gt;InterstitialAd&lt;/a&gt; wx.createInterstitialAd(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建插屏广告组件。请通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfoSync.html"&gt;wx.getSystemInfoSync()&lt;/a&gt; 返回对象的 SDKVersion 判断基础库版本号后再使用该 API。每次调用该方法创建插屏广告都会返回一个全新的实例（小程序端的插屏广告实例不允许跨页面使用）。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createLivePlayerContext">
                <parameters>
                    <parameter name="id" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="LivePlayerContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/wx.createLivePlayerContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html"&gt;LivePlayerContext&lt;/a&gt; wx.createLivePlayerContext(string id, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(live-player)"&gt;live-player&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html"&gt;LivePlayerContext&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createLivePusherContext">
                <parameters/>
                <return-types>
                    <return-type type="LivePusherContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/wx.createLivePusherContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.html"&gt;LivePusherContext&lt;/a&gt; wx.createLivePusherContext()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(live-pusher)"&gt;live-pusher&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.html"&gt;LivePusherContext&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getLogManager">
                <parameters>
                    <parameter name="option" type="GetLogManagerOption"/>
                </parameters>
                <return-types>
                    <return-type type="LogManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.getLogManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/LogManager.html"&gt;LogManager&lt;/a&gt; wx.getLogManager(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取日志管理器对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const logger = wx.getLogManager({level: 1})
logger.log({str: &amp;#39;hello world&amp;#39;}, &amp;#39;basic log&amp;#39;, 100, [1, 2, 3])
logger.info({str: &amp;#39;hello world&amp;#39;}, &amp;#39;info log&amp;#39;, 100, [1, 2, 3])
logger.debug({str: &amp;#39;hello world&amp;#39;}, &amp;#39;debug log&amp;#39;, 100, [1, 2, 3])
logger.warn({str: &amp;#39;hello world&amp;#39;}, &amp;#39;warn log&amp;#39;, 100, [1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createMapContext">
                <parameters>
                    <parameter name="mapId" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="MapContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/wx.createMapContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html"&gt;MapContext&lt;/a&gt; wx.createMapContext(string mapId, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(map)"&gt;map&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html"&gt;MapContext&lt;/a&gt; 对象。&lt;/p&gt;
</description>
            </method>
            <method name="createOffscreenCanvas">
                <parameters/>
                <return-types>
                    <return-type type="OffscreenCanvas"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createOffscreenCanvas.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/OffscreenCanvas.html"&gt;OffscreenCanvas&lt;/a&gt; wx.createOffscreenCanvas()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建离屏 canvas 实例&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getRealtimeLogManager">
                <parameters/>
                <return-types>
                    <return-type type="RealtimeLogManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.getRealtimeLogManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.html"&gt;RealtimeLogManager&lt;/a&gt; wx.getRealtimeLogManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取实时日志管理器对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const logger = wx.getRealtimeLogManager()
logger.info({str: &amp;#39;hello world&amp;#39;}, &amp;#39;info log&amp;#39;, 100, [1, 2, 3])
logger.error({str: &amp;#39;hello world&amp;#39;}, &amp;#39;error log&amp;#39;, 100, [1, 2, 3])
logger.warn({str: &amp;#39;hello world&amp;#39;}, &amp;#39;warn log&amp;#39;, 100, [1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getRecorderManager">
                <parameters/>
                <return-types>
                    <return-type type="RecorderManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.getRecorderManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.html"&gt;RecorderManager&lt;/a&gt; wx.getRecorderManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取&lt;strong&gt;全局唯一&lt;/strong&gt;的录音管理器 RecorderManager&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="request">
                <parameters>
                    <parameter name="option" type="RequestOption"/>
                </parameters>
                <return-types>
                    <return-type type="RequestTask"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/RequestTask.html"&gt;RequestTask&lt;/a&gt; wx.request(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发起 HTTPS 网络请求。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data 参数说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String 。转换规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;GET&lt;/code&gt; 方法的数据，会将数据转换成 query string（&lt;code&gt;encodeURIComponent(k)=encodeURIComponent(v)&amp;amp;encodeURIComponent(k)=encodeURIComponent(v)...&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;POST&lt;/code&gt; 方法且 &lt;code&gt;header[&amp;#39;content-type&amp;#39;]&lt;/code&gt; 为 &lt;code&gt;application/json&lt;/code&gt; 的数据，会对数据进行 JSON 序列化&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;POST&lt;/code&gt; 方法且 &lt;code&gt;header[&amp;#39;content-type&amp;#39;]&lt;/code&gt; 为 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 的数据，会将数据转换成 query string &lt;code&gt;（encodeURIComponent(k)=encodeURIComponent(v)&amp;amp;encodeURIComponent(k)=encodeURIComponent(v)...）&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.request({
  url: &amp;#39;test.php&amp;#39;, //仅为示例，并非真实的接口地址
  data: {
    x: &amp;#39;&amp;#39;,
    y: &amp;#39;&amp;#39;
  },
  header: {
    &amp;#39;content-type&amp;#39;: &amp;#39;application/json&amp;#39; // 默认值
  },
  success (res) {
    console.log(res.data)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="createRewardedVideoAd">
                <parameters>
                    <parameter name="option" type="CreateRewardedVideoAdOption"/>
                </parameters>
                <return-types>
                    <return-type type="RewardedVideoAd"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/wx.createRewardedVideoAd.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.html"&gt;RewardedVideoAd&lt;/a&gt; wx.createRewardedVideoAd(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建激励视频广告组件。请通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfoSync.html"&gt;wx.getSystemInfoSync()&lt;/a&gt; 返回对象的 SDKVersion 判断基础库版本号后再使用该 API（小游戏端要求 &amp;gt;= 2.0.4， 小程序端要求 &amp;gt;= 2.6.0）。调用该方法创建的激励视频广告是一个单例（小游戏端是全局单例，小程序端是页面内单例，在小程序端的单例对象不允许跨页面使用）。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.0.4&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createSelectorQuery">
                <parameters/>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html"&gt;SelectorQuery&lt;/a&gt; wx.createSelectorQuery()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;返回一个 SelectorQuery 对象实例。在自定义组件或包含自定义组件的页面中，应使用 &lt;code&gt;this.createSelectorQuery()&lt;/code&gt; 来代替。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const query = wx.createSelectorQuery()
query.select(&amp;#39;#the-id&amp;#39;).boundingClientRect()
query.selectViewport().scrollOffset()
query.exec(function(res){
  res[0].top       // #the-id节点的上边界坐标
  res[1].scrollTop // 显示区域的竖直滚动位置
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="connectSocket">
                <parameters>
                    <parameter name="option" type="ConnectSocketOption"/>
                </parameters>
                <return-types>
                    <return-type type="SocketTask"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.connectSocket.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html"&gt;SocketTask&lt;/a&gt; wx.connectSocket(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个 WebSocket 连接。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并发数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.7.0 及以上版本，最多可以同时存在 5 个 WebSocket 连接。&lt;/li&gt;
&lt;li&gt;1.7.0 以下版本，一个小程序同时只能有一个 WebSocket 连接，如果当前已存在一个 WebSocket 连接，会自动关闭该连接，并重新创建一个 WebSocket 连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.connectSocket({
  url: &amp;#39;wss://example.qq.com&amp;#39;,
  header:{
    &amp;#39;content-type&amp;#39;: &amp;#39;application/json&amp;#39;
  },
  protocols: [&amp;#39;protocol1&amp;#39;]
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="createUDPSocket">
                <parameters/>
                <return-types>
                    <return-type type="UDPSocket"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/wx.createUDPSocket.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.html"&gt;UDPSocket&lt;/a&gt; wx.createUDPSocket()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个 UDP Socket 实例。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getUpdateManager">
                <parameters/>
                <return-types>
                    <return-type type="UpdateManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.html"&gt;UpdateManager&lt;/a&gt; wx.getUpdateManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取&lt;strong&gt;全局唯一&lt;/strong&gt;的版本更新管理器，用于管理小程序更新。关于小程序的更新机制，可以查看&lt;a href="(operating-mechanism)"&gt;运行机制&lt;/a&gt;文档。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="uploadFile">
                <parameters>
                    <parameter name="option" type="UploadFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="UploadTask"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.html"&gt;UploadTask&lt;/a&gt; wx.uploadFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将本地资源上传到服务器。客户端发起一个 HTTPS POST 请求，其中 &lt;code&gt;content-type&lt;/code&gt; 为 &lt;code&gt;multipart/form-data&lt;/code&gt;。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseImage({
  success (res) {
    const tempFilePaths = res.tempFilePaths
    wx.uploadFile({
      url: &amp;#39;https://example.weixin.qq.com/upload&amp;#39;, //仅为示例，非真实的接口地址
      filePath: tempFilePaths[0],
      name: &amp;#39;file&amp;#39;,
      formData: {
        &amp;#39;user&amp;#39;: &amp;#39;test&amp;#39;
      },
      success (res){
        const data = res.data
        //do something
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="createVideoContext">
                <parameters>
                    <parameter name="id" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="VideoContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.createVideoContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html"&gt;VideoContext&lt;/a&gt; wx.createVideoContext(string id, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(video)"&gt;video&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html"&gt;VideoContext&lt;/a&gt; 对象。&lt;/p&gt;
</description>
            </method>
            <method name="createWorker">
                <parameters>
                    <parameter name="scriptPath" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Worker"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/wx.createWorker.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/wx.createWorker.html"&gt;Worker&lt;/a&gt; wx.createWorker(string scriptPath)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个 &lt;a href="(framework/workers)"&gt;Worker 线程&lt;/a&gt;。目前限制最多只能创建一个 Worker，创建下一个 Worker 前请先调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/Worker.terminate.html"&gt;Worker.terminate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getStorageSync">
                <parameters>
                    <parameter name="key" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html"&gt;any wx.getStorageSync(string key)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorage.html"&gt;wx.getStorage&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getStorage({
  key: &amp;#39;key&amp;#39;,
  success (res) {
    console.log(res.data)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  var value = wx.getStorageSync(&amp;#39;key&amp;#39;)
  if (value) {
    // Do something with return value
  }
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="canIUse">
                <parameters>
                    <parameter name="schema" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html"&gt;boolean wx.canIUse(string schema)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;判断小程序的API，回调，参数，组件等是否在当前版本可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${API}&lt;/code&gt; 代表 API 名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${method}&lt;/code&gt; 代表调用方式，有效值为return, success, object, callback&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${param}&lt;/code&gt; 代表参数或者返回值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${option}&lt;/code&gt; 代表参数的可选值或者返回值的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${component}&lt;/code&gt; 代表组件名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${attribute}&lt;/code&gt; 代表组件属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${option}&lt;/code&gt; 代表组件属性的可选值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 对象的属性或方法
wx.canIUse(&amp;#39;console.log&amp;#39;)
wx.canIUse(&amp;#39;CameraContext.onCameraFrame&amp;#39;)
wx.canIUse(&amp;#39;CameraFrameListener.start&amp;#39;)
wx.canIUse(&amp;#39;Image.src&amp;#39;)

// wx接口参数、回调或者返回值
wx.canIUse(&amp;#39;openBluetoothAdapter&amp;#39;)
wx.canIUse(&amp;#39;getSystemInfoSync.return.safeArea.left&amp;#39;)
wx.canIUse(&amp;#39;getSystemInfo.success.screenWidth&amp;#39;)
wx.canIUse(&amp;#39;showToast.object.image&amp;#39;)
wx.canIUse(&amp;#39;onCompassChange.callback.direction&amp;#39;)
wx.canIUse(&amp;#39;request.object.method.GET&amp;#39;)

// 组件的属性
wx.canIUse(&amp;#39;live-player&amp;#39;)
wx.canIUse(&amp;#39;text.selectable&amp;#39;)
wx.canIUse(&amp;#39;button.open-type.contact&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="arrayBufferToBase64">
                <parameters>
                    <parameter name="arrayBuffer" type="ArrayBuffer"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.arrayBufferToBase64.html"&gt;string wx.arrayBufferToBase64(ArrayBuffer arrayBuffer)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将 ArrayBuffer 对象转成 Base64 字符串&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="addCard">
                <parameters>
                    <parameter name="option" type="AddCardOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.addCard.html"&gt;wx.addCard(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;批量添加卡券。只有通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/product/renzheng.html"&gt;认证&lt;/a&gt; 的小程序或文化互动类目的小游戏才能使用。更多文档请参考 &lt;a href="https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&amp;amp;key=1490190158&amp;amp;version=1&amp;amp;lang=zh_CN&amp;amp;platform=2"&gt;微信卡券接口文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cardExt 说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;cardExt 是卡券的扩展参数，其值是一个 JSON 字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.addCard({
  cardList: [
    {
      cardId: &amp;#39;&amp;#39;,
      cardExt: &amp;#39;{&amp;quot;code&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;openid&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;timestamp&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;signature&amp;quot;:&amp;quot;&amp;quot;}&amp;#39;
    }, {
      cardId: &amp;#39;&amp;#39;,
      cardExt: &amp;#39;{&amp;quot;code&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;openid&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;timestamp&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;signature&amp;quot;:&amp;quot;&amp;quot;}&amp;#39;
    }
  ],
  success (res) {
    console.log(res.cardList) // 卡券添加结果
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="addPhoneContact">
                <parameters>
                    <parameter name="option" type="AddPhoneContactOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html"&gt;wx.addPhoneContact(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加手机通讯录联系人。用户可以选择将该表单以「新增联系人」或「添加到已有联系人」的方式，写入手机系统通讯录。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="authorize">
                <parameters>
                    <parameter name="option" type="AuthorizeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorize.html"&gt;wx.authorize(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。更多用法详见 &lt;a href="(authorize)"&gt;用户授权&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 可以通过 wx.getSetting 先查询一下用户是否授权了 &amp;quot;scope.record&amp;quot; 这个 scope
wx.getSetting({
  success(res) {
    if (!res.authSetting[&amp;#39;scope.record&amp;#39;]) {
      wx.authorize({
        scope: &amp;#39;scope.record&amp;#39;,
        success () {
          // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问
          wx.startRecord()
        }
      })
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="canvasGetImageData">
                <parameters>
                    <parameter name="option" type="CanvasGetImageDataOption"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasGetImageData.html"&gt;wx.canvasGetImageData(Object object, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取 canvas 区域隐含的像素数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;yufmRjmZ7W8f&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.canvasGetImageData({
  canvasId: &amp;#39;myCanvas&amp;#39;,
  x: 0,
  y: 0,
  width: 100,
  height: 100,
  success(res) {
    console.log(res.width) // 100
    console.log(res.height) // 100
    console.log(res.data instanceof Uint8ClampedArray) // true
    console.log(res.data.length) // 100 * 100 * 4
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="canvasPutImageData">
                <parameters>
                    <parameter name="option" type="CanvasPutImageDataOption"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasPutImageData.html"&gt;wx.canvasPutImageData(Object object, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将像素数据绘制到画布。在自定义组件下，第二个参数传入自定义组件实例 this，以操作组件内 &lt;canvas&gt; 组件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="canvasToTempFilePath">
                <parameters>
                    <parameter name="option" type="CanvasToTempFilePathOption"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html"&gt;wx.canvasToTempFilePath(Object object, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把当前画布指定区域的内容导出生成指定大小的图片。在 &lt;code&gt;draw()&lt;/code&gt; 回调里调用该方法才能保证图片导出成功。&lt;/p&gt;
</description>
            </method>
            <method name="checkIsSoterEnrolledInDevice">
                <parameters>
                    <parameter name="option" type="CheckIsSoterEnrolledInDeviceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.checkIsSoterEnrolledInDevice.html"&gt;wx.checkIsSoterEnrolledInDevice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取设备内是否录入如指纹等生物信息的接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.checkIsSoterEnrolledInDevice({
  checkAuthMode: &amp;#39;fingerPrint&amp;#39;,
  success(res) {
    console.log(res.isEnrolled)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="checkIsSupportSoterAuthentication">
                <parameters>
                    <parameter name="option" type="CheckIsSupportSoterAuthenticationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.checkIsSupportSoterAuthentication.html"&gt;wx.checkIsSupportSoterAuthentication(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取本机支持的 SOTER 生物认证方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.checkIsSupportSoterAuthentication({
  success(res) {
    // res.supportMode = [] 不具备任何被SOTER支持的生物识别方式
    // res.supportMode = [&amp;#39;fingerPrint&amp;#39;] 只支持指纹识别
    // res.supportMode = [&amp;#39;fingerPrint&amp;#39;, &amp;#39;facial&amp;#39;] 支持指纹识别和人脸识别
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="checkSession">
                <parameters>
                    <parameter name="option" type="CheckSessionOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.checkSession.html"&gt;wx.checkSession(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;检查登录态是否过期。&lt;/p&gt;
&lt;p&gt;通过 wx.login 接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用 wx.checkSession 接口检测当前用户登录态是否有效。&lt;/p&gt;
&lt;p&gt;登录态过期后开发者可以再调用 wx.login 获取新的用户登录态。调用成功说明当前 session_key 未过期，调用失败说明 session_key 已过期。更多使用方法详见 &lt;a href="(open-ability/login)"&gt;小程序登录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.checkSession({
  success () {
    //session_key 未过期，并且在本生命周期一直有效
  },
  fail () {
    // session_key 已经失效，需要重新执行登录流程
    wx.login() //重新登录
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="chooseAddress">
                <parameters>
                    <parameter name="option" type="ChooseAddressOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/address/wx.chooseAddress.html"&gt;wx.chooseAddress(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取用户收货地址。调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;024hHnmd772y&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseAddress({
  success (res) {
    console.log(res.userName)
    console.log(res.postalCode)
    console.log(res.provinceName)
    console.log(res.cityName)
    console.log(res.countyName)
    console.log(res.detailInfo)
    console.log(res.nationalCode)
    console.log(res.telNumber)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="chooseImage">
                <parameters>
                    <parameter name="option" type="ChooseImageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html"&gt;wx.chooseImage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从本地相册选择图片或使用相机拍照。&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseImage({
  count: 1,
  sizeType: [&amp;#39;original&amp;#39;, &amp;#39;compressed&amp;#39;],
  sourceType: [&amp;#39;album&amp;#39;, &amp;#39;camera&amp;#39;],
  success (res) {
    // tempFilePath可以作为img标签的src属性显示图片
    const tempFilePaths = res.tempFilePaths
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="chooseInvoice">
                <parameters>
                    <parameter name="option" type="ChooseInvoiceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoice.html"&gt;wx.chooseInvoice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择用户已有的发票。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过 cardId 和 encryptCode 获得报销发票的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请参考&lt;a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=21517918939oae3U"&gt;微信电子发票文档&lt;/a&gt;中，「查询报销发票信息」部分。
其中 &lt;code&gt;access_token&lt;/code&gt; 的获取请参考&lt;a href="(auth.getAccessToken)"&gt;auth.getAccessToken&lt;/a&gt;文档&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="chooseInvoiceTitle">
                <parameters>
                    <parameter name="option" type="ChooseInvoiceTitleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoiceTitle.html"&gt;wx.chooseInvoiceTitle(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择用户的发票抬头。当前小程序必须关联一个公众号，且这个公众号是完成了&lt;a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1496554031_RD4xe"&gt;微信认证&lt;/a&gt;的，才能调用 chooseInvoiceTitle。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;GJ4S9nmQ7x2E&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseInvoiceTitle({
  success(res) {}
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="chooseLocation">
                <parameters>
                    <parameter name="option" type="ChooseLocationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html"&gt;wx.chooseLocation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开地图选择位置。&lt;/p&gt;
</description>
            </method>
            <method name="chooseMessageFile">
                <parameters>
                    <parameter name="option" type="ChooseMessageFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html"&gt;wx.chooseMessageFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从客户端会话选择文件。&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseMessageFile({
  count: 10,
  type: &amp;#39;image&amp;#39;,
  success (res) {
    // tempFilePath可以作为img标签的src属性显示图片
    const tempFilePaths = res.tempFilePaths
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="chooseVideo">
                <parameters>
                    <parameter name="option" type="ChooseVideoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html"&gt;wx.chooseVideo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拍摄视频或从手机相册中选视频。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseVideo({
  sourceType: [&amp;#39;album&amp;#39;,&amp;#39;camera&amp;#39;],
  maxDuration: 60,
  camera: &amp;#39;back&amp;#39;,
  success(res) {
    console.log(res.tempFilePath)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="clearStorage">
                <parameters>
                    <parameter name="option" type="ClearStorageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html"&gt;wx.clearStorage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;清理本地数据缓存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.clearStorage()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.clearStorageSync()
} catch(e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="clearStorageSync">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorageSync.html"&gt;wx.clearStorageSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html"&gt;wx.clearStorage&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.clearStorage()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.clearStorageSync()
} catch(e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="closeBLEConnection">
                <parameters>
                    <parameter name="option" type="CloseBLEConnectionOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.closeBLEConnection.html"&gt;wx.closeBLEConnection(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;断开与低功耗蓝牙设备的连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.closeBLEConnection({
  deviceId,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="closeBluetoothAdapter">
                <parameters>
                    <parameter name="option" type="CloseBluetoothAdapterOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.closeBluetoothAdapter.html"&gt;wx.closeBluetoothAdapter(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭蓝牙模块。调用该方法将断开所有已建立的连接并释放系统资源。建议在使用蓝牙流程后，与 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html"&gt;wx.openBluetoothAdapter&lt;/a&gt; 成对调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.closeBluetoothAdapter({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="closeSocket">
                <parameters>
                    <parameter name="option" type="CloseSocketOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.closeSocket.html"&gt;wx.closeSocket(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭 WebSocket 连接&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.connectSocket({
  url: &amp;#39;test.php&amp;#39;
})

//注意这里有时序问题，
//如果 wx.connectSocket 还没回调 wx.onSocketOpen，而先调用 wx.closeSocket，那么就做不到关闭 WebSocket 的目的。
//必须在 WebSocket 打开期间调用 wx.closeSocket 才能关闭。
wx.onSocketOpen(function() {
  wx.closeSocket()
})

wx.onSocketClose(function(res) {
  console.log(&amp;#39;WebSocket 已关闭！&amp;#39;)
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="compressImage">
                <parameters>
                    <parameter name="option" type="CompressImageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html"&gt;wx.compressImage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;压缩图片接口，可选压缩质量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.compressImage({
  src: &amp;#39;&amp;#39;, // 图片路径
  quality: 80 // 压缩质量
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="connectWifi">
                <parameters>
                    <parameter name="option" type="ConnectWifiOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.connectWifi.html"&gt;wx.connectWifi(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.connectWifi({
  SSID: &amp;#39;&amp;#39;,
  password: &amp;#39;&amp;#39;,
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createBLEConnection">
                <parameters>
                    <parameter name="option" type="CreateBLEConnectionOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html"&gt;wx.createBLEConnection(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;连接低功耗蓝牙设备。&lt;/p&gt;
&lt;p&gt;若小程序在之前已有搜索过某个蓝牙设备，并成功建立连接，可直接传入之前搜索获取的 deviceId 直接尝试连接该设备，无需进行搜索操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请保证尽量成对的调用 &lt;code&gt;createBLEConnection&lt;/code&gt; 和 &lt;code&gt;closeBLEConnection&lt;/code&gt; 接口。安卓如果多次调用 &lt;code&gt;createBLEConnection&lt;/code&gt; 创建连接，有可能导致系统持有同一设备多个连接的实例，导致调用 &lt;code&gt;closeBLEConnection&lt;/code&gt; 的时候并不能真正的断开与设备的连接。&lt;/li&gt;
&lt;li&gt;蓝牙连接随时可能断开，建议监听 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEConnectionStateChange.html"&gt;wx.onBLEConnectionStateChange&lt;/a&gt; 回调事件，当蓝牙设备断开时按需执行重连操作&lt;/li&gt;
&lt;li&gt;若对未连接的设备或已断开连接的设备调用数据读写操作的接口，会返回 10006 错误，建议进行重连操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.createBLEConnection({
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getAvailableAudioSources">
                <parameters>
                    <parameter name="option" type="GetAvailableAudioSourcesOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.getAvailableAudioSources.html"&gt;wx.getAvailableAudioSources(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前支持的音频输入源&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBLEDeviceCharacteristics">
                <parameters>
                    <parameter name="option" type="GetBLEDeviceCharacteristicsOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceCharacteristics.html"&gt;wx.getBLEDeviceCharacteristics(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取蓝牙设备某个服务中所有特征值(characteristic)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getBLEDeviceCharacteristics({
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId,
  success (res) {
    console.log(&amp;#39;device getBLEDeviceCharacteristics:&amp;#39;, res.characteristics)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBLEDeviceServices">
                <parameters>
                    <parameter name="option" type="GetBLEDeviceServicesOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceServices.html"&gt;wx.getBLEDeviceServices(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取蓝牙设备所有服务(service)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getBLEDeviceServices({
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  success (res) {
    console.log(&amp;#39;device services:&amp;#39;, res.services)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBackgroundAudioPlayerState">
                <parameters>
                    <parameter name="option" type="GetBackgroundAudioPlayerStateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioPlayerState.html"&gt;wx.getBackgroundAudioPlayerState(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取后台音乐播放状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getBackgroundAudioPlayerState({
  success (res) {
    const status = res.status
    const dataUrl = res.dataUrl
    const currentPosition = res.currentPosition
    const duration = res.duration
    const downloadPercent = res.downloadPercent
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getBackgroundFetchData">
                <parameters>
                    <parameter name="option" type="GetBackgroundFetchDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/backgroundFetch/wx.getBackgroundFetchData.html"&gt;wx.getBackgroundFetchData(object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拉取 backgroundFetch 客户端缓存数据&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBackgroundFetchToken">
                <parameters>
                    <parameter name="option" type="GetBackgroundFetchTokenOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/backgroundFetch/wx.getBackgroundFetchToken.html"&gt;wx.getBackgroundFetchToken(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取设置过的自定义登录态。若无，则返回 fail。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBatteryInfo">
                <parameters>
                    <parameter name="option" type="GetBatteryInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfo.html"&gt;wx.getBatteryInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取设备电量。同步 API &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfoSync.html"&gt;wx.getBatteryInfoSync&lt;/a&gt; 在 iOS 上不可用。&lt;/p&gt;
</description>
            </method>
            <method name="getBeacons">
                <parameters>
                    <parameter name="option" type="GetBeaconsOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.getBeacons.html"&gt;wx.getBeacons(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取所有已搜索到的 iBeacon 设备&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBluetoothAdapterState">
                <parameters>
                    <parameter name="option" type="GetBluetoothAdapterStateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothAdapterState.html"&gt;wx.getBluetoothAdapterState(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取本机蓝牙适配器状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getBluetoothAdapterState({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBluetoothDevices">
                <parameters>
                    <parameter name="option" type="GetBluetoothDevicesOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothDevices.html"&gt;wx.getBluetoothDevices(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取在蓝牙模块生效期间所有已发现的蓝牙设备。包括已经和本机处于连接状态的设备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// ArrayBuffer转16进度字符串示例
function ab2hex(buffer) {
  var hexArr = Array.prototype.map.call(
    new Uint8Array(buffer),
    function(bit) {
      return (&amp;#39;00&amp;#39; + bit.toString(16)).slice(-2)
    }
  )
  return hexArr.join(&amp;#39;&amp;#39;);
}
wx.getBluetoothDevices({
  success: function (res) {
    console.log(res)
    if (res.devices[0]) {
      console.log(ab2hex(res.devices[0].advertisData))
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该接口获取到的设备列表为&lt;strong&gt;蓝牙模块生效期间所有搜索到的蓝牙设备&lt;/strong&gt;，若在蓝牙模块使用流程结束后未及时调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.closeBluetoothAdapter.html"&gt;wx.closeBluetoothAdapter&lt;/a&gt; 释放资源，会存在调用该接口会返回之前的蓝牙使用流程中搜索到的蓝牙设备，可能设备已经不在用户身边，无法连接。&lt;/li&gt;
&lt;li&gt;蓝牙设备在被搜索到时，系统返回的 name 字段一般为广播包中的 LocalName 字段中的设备名称，而如果与蓝牙设备建立连接，系统返回的 name 字段会改为从蓝牙设备上获取到的 &lt;code&gt;GattName&lt;/code&gt;。若需要动态改变设备名称并展示，建议使用 &lt;code&gt;localName&lt;/code&gt; 字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getClipboardData">
                <parameters>
                    <parameter name="option" type="GetClipboardDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html"&gt;wx.getClipboardData(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取系统剪贴板的内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getClipboardData({
  success (res){
    console.log(res.data)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getConnectedBluetoothDevices">
                <parameters>
                    <parameter name="option" type="GetConnectedBluetoothDevicesOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getConnectedBluetoothDevices.html"&gt;wx.getConnectedBluetoothDevices(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据 uuid 获取处于已连接状态的设备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getConnectedBluetoothDevices({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getConnectedWifi">
                <parameters>
                    <parameter name="option" type="GetConnectedWifiOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.getConnectedWifi.html"&gt;wx.getConnectedWifi(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取已连接中的 Wi-Fi 信息。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getExtConfig">
                <parameters>
                    <parameter name="option" type="GetExtConfigOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html"&gt;wx.getExtConfig(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取&lt;a href="(devtools/ext)"&gt;第三方平台&lt;/a&gt;自定义的数据字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本接口暂时无法通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html"&gt;wx.canIUse&lt;/a&gt; 判断是否兼容，开发者需要自行判断 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html"&gt;wx.getExtConfig&lt;/a&gt; 是否存在来兼容&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;if (wx.getExtConfig) {
  wx.getExtConfig({
    success (res) {
      console.log(res.extConfig)
    }
  })
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getFileInfo">
                <parameters>
                    <parameter name="option" type="WxGetFileInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileInfo.html"&gt;wx.getFileInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取文件信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getFileInfo({
  success (res) {
    console.log(res.size)
    console.log(res.digest)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getHCEState">
                <parameters>
                    <parameter name="option" type="GetHCEStateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.getHCEState.html"&gt;wx.getHCEState(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;判断当前设备是否支持 HCE 能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getHCEState({
  success (res) {
    console.log(res.errCode)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getImageInfo">
                <parameters>
                    <parameter name="option" type="GetImageInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html"&gt;wx.getImageInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取图片信息。网络图片需先配置download域名才能生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;Kd47Sbmr6yYu&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getImageInfo({
  src: &amp;#39;images/a.jpg&amp;#39;,
  success (res) {
    console.log(res.width)
    console.log(res.height)
  }
})

wx.chooseImage({
  success (res) {
    wx.getImageInfo({
      src: res.tempFilePaths[0],
      success (res) {
        console.log(res.width)
        console.log(res.height)
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getLocation">
                <parameters>
                    <parameter name="option" type="GetLocationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getLocation.html"&gt;wx.getLocation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt; wx.getLocation({
  type: &amp;#39;wgs84&amp;#39;,
  success (res) {
    const latitude = res.latitude
    const longitude = res.longitude
    const speed = res.speed
    const accuracy = res.accuracy
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工具中定位模拟使用IP定位，可能会有一定误差。且工具目前仅支持 gcj02 坐标。&lt;/li&gt;
&lt;li&gt;使用第三方服务进行逆地址解析时，请确认第三方服务默认的坐标系，正确进行坐标转换。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="getNetworkType">
                <parameters>
                    <parameter name="option" type="GetNetworkTypeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getNetworkType.html"&gt;wx.getNetworkType(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取网络类型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getNetworkType({
  success (res) {
    const networkType = res.networkType
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getSavedFileInfo">
                <parameters>
                    <parameter name="option" type="GetSavedFileInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getSavedFileInfo.html"&gt;wx.getSavedFileInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileInfo.html"&gt;wx.getFileInfo()&lt;/a&gt; 接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSavedFileList({
  success (res) {
    console.log(res.fileList)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getSavedFileList">
                <parameters>
                    <parameter name="option" type="WxGetSavedFileListOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getSavedFileList.html"&gt;wx.getSavedFileList(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取该小程序下已保存的本地缓存文件列表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSavedFileList({
  success (res) {
    console.log(res.fileList)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getScreenBrightness">
                <parameters>
                    <parameter name="option" type="GetScreenBrightnessOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.getScreenBrightness.html"&gt;wx.getScreenBrightness(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取屏幕亮度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若安卓系统设置中开启了自动调节亮度功能，则屏幕亮度会根据光线自动调整，该接口仅能获取自动调节亮度之前的值，而非实时的亮度值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getSelectedTextRange">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/keyboard/wx.getSelectedTextRange.html"&gt;wx.getSelectedTextRange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在input、textarea等focus之后，获取输入框的光标位置。注意：只有在focus的时候调用此接口才有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSelectedTextRange({
  complete: res =&amp;gt; {
    console.log(&amp;#39;getSelectedTextRange res&amp;#39;, res.start, res.end)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getSetting">
                <parameters>
                    <parameter name="option" type="GetSettingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html"&gt;wx.getSetting(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取用户的当前设置。&lt;strong&gt;返回值中只会出现小程序已经向用户请求过的&lt;a href="(authorize)"&gt;权限&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSetting({
  success (res) {
    console.log(res.authSetting)
    // res.authSetting = {
    //   &amp;quot;scope.userInfo&amp;quot;: true,
    //   &amp;quot;scope.userLocation&amp;quot;: true
    // }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getShareInfo">
                <parameters>
                    <parameter name="option" type="GetShareInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.getShareInfo.html"&gt;wx.getShareInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取转发详细信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;敏感数据有两种获取方式，一是使用 &lt;a href="(open-ability/signature#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95)"&gt;加密数据解密算法&lt;/a&gt; 。
获取得到的开放数据为以下 json 结构（其中 openGId 为当前群的唯一标识）：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
 &amp;quot;openGId&amp;quot;: &amp;quot;OPENGID&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如需要展示群名称，可以使用&lt;a href="(open-data)"&gt;开放数据组件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getStorage">
                <parameters>
                    <parameter name="option" type="GetStorageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorage.html"&gt;wx.getStorage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从本地缓存中异步获取指定 key 的内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getStorage({
  key: &amp;#39;key&amp;#39;,
  success (res) {
    console.log(res.data)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  var value = wx.getStorageSync(&amp;#39;key&amp;#39;)
  if (value) {
    // Do something with return value
  }
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getStorageInfo">
                <parameters>
                    <parameter name="option" type="GetStorageInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfo.html"&gt;wx.getStorageInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;异步获取当前storage的相关信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getStorageInfo({
  success (res) {
    console.log(res.keys)
    console.log(res.currentSize)
    console.log(res.limitSize)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  const res = wx.getStorageInfoSync()
  console.log(res.keys)
  console.log(res.currentSize)
  console.log(res.limitSize)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getSystemInfo">
                <parameters>
                    <parameter name="option" type="GetSystemInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html"&gt;wx.getSystemInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取系统信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSystemInfo({
  success (res) {
    console.log(res.model)
    console.log(res.pixelRatio)
    console.log(res.windowWidth)
    console.log(res.windowHeight)
    console.log(res.language)
    console.log(res.version)
    console.log(res.platform)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  const res = wx.getSystemInfoSync()
  console.log(res.model)
  console.log(res.pixelRatio)
  console.log(res.windowWidth)
  console.log(res.windowHeight)
  console.log(res.language)
  console.log(res.version)
  console.log(res.platform)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getUserInfo">
                <parameters>
                    <parameter name="option" type="GetUserInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html"&gt;wx.getUserInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取用户信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口调整说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在用户未授权过的情况下调用此接口，将不再出现授权弹窗，会直接进入 fail 回调（详见[《公告》]({% postUrl(0000a26e1aca6012e896a517556c01) %}))。在用户已授权的情况下调用此接口，可成功获取用户信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 必须是在用户已经授权的情况下调用
wx.getUserInfo({
  success: function(res) {
    var userInfo = res.userInfo
    var nickName = userInfo.nickName
    var avatarUrl = userInfo.avatarUrl
    var gender = userInfo.gender //性别 0：未知、1：男、2：女
    var province = userInfo.province
    var city = userInfo.city
    var country = userInfo.country
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;敏感数据有两种获取方式，一是使用 &lt;a href="(open-ability/signature#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95)"&gt;加密数据解密算法&lt;/a&gt; 。
获取得到的开放数据为以下 json 结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;openId&amp;quot;: &amp;quot;OPENID&amp;quot;,
  &amp;quot;nickName&amp;quot;: &amp;quot;NICKNAME&amp;quot;,
  &amp;quot;gender&amp;quot;: GENDER,
  &amp;quot;city&amp;quot;: &amp;quot;CITY&amp;quot;,
  &amp;quot;province&amp;quot;: &amp;quot;PROVINCE&amp;quot;,
  &amp;quot;country&amp;quot;: &amp;quot;COUNTRY&amp;quot;,
  &amp;quot;avatarUrl&amp;quot;: &amp;quot;AVATARURL&amp;quot;,
  &amp;quot;unionId&amp;quot;: &amp;quot;UNIONID&amp;quot;,
  &amp;quot;watermark&amp;quot;: {
    &amp;quot;appid&amp;quot;:&amp;quot;APPID&amp;quot;,
    &amp;quot;timestamp&amp;quot;:TIMESTAMP
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;小程序用户信息组件示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;* &amp;lt;!-- 如果只是展示用户头像昵称，可以使用 &amp;lt;open-data /&amp;gt; 组件 --&amp;gt;
* &amp;lt;open-data type=&amp;quot;userAvatarUrl&amp;quot;&amp;gt;&amp;lt;/open-data&amp;gt;
* &amp;lt;open-data type=&amp;quot;userNickName&amp;quot;&amp;gt;&amp;lt;/open-data&amp;gt;
* &amp;lt;!-- 需要使用 button 来授权登录 --&amp;gt;
* &amp;lt;button wx:if=&amp;quot;{{canIUse}}&amp;quot; open-type=&amp;quot;getUserInfo&amp;quot; bindgetuserinfo=&amp;quot;bindGetUserInfo&amp;quot;&amp;gt;授权登录&amp;lt;/button&amp;gt;
* &amp;lt;view wx:else&amp;gt;请升级微信版本&amp;lt;/view&amp;gt;
* ```

```js
Page({
  data: {
    canIUse: wx.canIUse(&amp;#39;button.open-type.getUserInfo&amp;#39;)
  },
  onLoad: function() {
    // 查看是否授权
    wx.getSetting({
      success (res){
        if (res.authSetting[&amp;#39;scope.userInfo&amp;#39;]) {
          // 已经授权，可以直接调用 getUserInfo 获取头像昵称
          wx.getUserInfo({
            success: function(res) {
              console.log(res.userInfo)
            }
          })
        }
      }
    })
  },
  bindGetUserInfo (e) {
    console.log(e.detail.userInfo)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getWeRunData">
                <parameters>
                    <parameter name="option" type="GetWeRunDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/werun/wx.getWeRunData.html"&gt;wx.getWeRunData(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取用户过去三十天微信运动步数。需要先调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html"&gt;wx.login&lt;/a&gt; 接口。步数信息会在用户主动进入小程序时更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getWeRunData({
  success (res) {
    // 拿 encryptedData 到开发者后台解密开放数据
    const encryptedData = res.encryptedData
    // 或拿 cloudID 通过云调用直接获取开放数据
    const cloudID = res.cloudID
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;开放数据 JSON 结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;敏感数据有两种获取方式，一是使用 &lt;a href="(open-ability/signature#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95)"&gt;加密数据解密算法&lt;/a&gt; 。
获取得到的开放数据为以下 json 结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;stepInfoList&amp;quot;: [
    {
      &amp;quot;timestamp&amp;quot;: 1445866601,
      &amp;quot;step&amp;quot;: 100
    },
    {
      &amp;quot;timestamp&amp;quot;: 1445876601,
      &amp;quot;step&amp;quot;: 120
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stepInfoList 中，每一项结构如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;时间戳，表示数据对应的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;微信运动步数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getWifiList">
                <parameters>
                    <parameter name="option" type="GetWifiListOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.getWifiList.html"&gt;wx.getWifiList(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请求获取 Wi-Fi 列表。在 &lt;code&gt;onGetWifiList&lt;/code&gt; 注册的回调中返回 &lt;code&gt;wifiList&lt;/code&gt; 数据。 &lt;strong&gt;Android 调用前需要 &lt;a href="(open-ability/authorize)"&gt;用户授权&lt;/a&gt; scope.userLocation。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;iOS 将跳转到系统的 Wi-Fi 界面，Android 不会跳转。 iOS 11.0 及 iOS 11.1 两个版本因系统问题，该方法失效。但在 iOS 11.2 中已修复。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideLoading">
                <parameters>
                    <parameter name="option" type="HideLoadingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html"&gt;wx.hideLoading(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏 loading 提示框&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideNavigationBarLoading">
                <parameters>
                    <parameter name="option" type="HideNavigationBarLoadingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.hideNavigationBarLoading.html"&gt;wx.hideNavigationBarLoading(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在当前页面隐藏导航条加载动画&lt;/p&gt;
</description>
            </method>
            <method name="hideShareMenu">
                <parameters>
                    <parameter name="option" type="HideShareMenuOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.hideShareMenu.html"&gt;wx.hideShareMenu(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏转发按钮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.hideShareMenu()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideTabBar">
                <parameters>
                    <parameter name="option" type="HideTabBarOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.hideTabBar.html"&gt;wx.hideTabBar(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏 tabBar&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideTabBarRedDot">
                <parameters>
                    <parameter name="option" type="HideTabBarRedDotOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.hideTabBarRedDot.html"&gt;wx.hideTabBarRedDot(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏 tabBar 某一项的右上角的红点&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideToast">
                <parameters>
                    <parameter name="option" type="HideToastOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html"&gt;wx.hideToast(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏消息提示框&lt;/p&gt;
</description>
            </method>
            <method name="loadFontFace">
                <parameters>
                    <parameter name="option" type="LoadFontFaceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/font/wx.loadFontFace.html"&gt;wx.loadFontFace(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态加载网络字体。文件地址需为下载类型。iOS 仅支持 https 格式文件地址。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字体文件返回的 contet-type 参考 &lt;a href="https://www.iana.org/assignments/media-types/media-types.xhtml#font"&gt;font&lt;/a&gt;，格式不正确时会解析失败。&lt;/li&gt;
&lt;li&gt;字体链接必须是https（ios不支持http)&lt;/li&gt;
&lt;li&gt;字体链接必须是同源下的，或开启了cors支持，小程序的域名是&lt;code&gt;servicewechat.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;canvas等原生组件不支持使用接口添加的字体&lt;/li&gt;
&lt;li&gt;工具里提示 Faild to load font可以忽略&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;b6Zrajm67R2x&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.loadFontFace({
  family: &amp;#39;Bitstream Vera Serif Bold&amp;#39;,
  source: &amp;#39;url(&amp;quot;https://sungd.github.io/Pacifico.ttf&amp;quot;)&amp;#39;,
  success: console.log
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="login">
                <parameters>
                    <parameter name="option" type="LoginOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html"&gt;wx.login(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调用接口获取登录凭证（code）。通过凭证进而换取用户登录态信息，包括用户的唯一标识（openid）及本次登录的会话密钥（session_key）等。用户数据的加解密通讯需要依赖会话密钥完成。更多使用方法详见 &lt;a href="(open-ability/login)"&gt;小程序登录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.login({
  success (res) {
    if (res.code) {
      //发起网络请求
      wx.request({
        url: &amp;#39;https://test.com/onLogin&amp;#39;,
        data: {
          code: res.code
        }
      })
    } else {
      console.log(&amp;#39;登录失败！&amp;#39; + res.errMsg)
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="makePhoneCall">
                <parameters>
                    <parameter name="option" type="MakePhoneCallOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/phone/wx.makePhoneCall.html"&gt;wx.makePhoneCall(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拨打电话&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.makePhoneCall({
  phoneNumber: &amp;#39;1340000&amp;#39; //仅为示例，并非真实的电话号码
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="navigateBack">
                <parameters>
                    <parameter name="option" type="NavigateBackOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html"&gt;wx.navigateBack(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭当前页面，返回上一页面或多级页面。可通过 &lt;a href="(api/getCurrentPages)"&gt;getCurrentPages&lt;/a&gt; 获取当前的页面栈，决定需要返回几层。&lt;/p&gt;
</description>
            </method>
            <method name="navigateBackMiniProgram">
                <parameters>
                    <parameter name="option" type="NavigateBackMiniProgramOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateBackMiniProgram.html"&gt;wx.navigateBackMiniProgram(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;返回到上一个小程序。只有在当前小程序是被其他小程序打开时可以调用成功&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;微信客户端 iOS 6.5.9，Android 6.5.10 及以上版本支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.navigateBackMiniProgram({
  extraData: {
  foo: &amp;#39;bar&amp;#39;
},
success(res) {
  // 返回成功
}
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="navigateTo">
                <parameters>
                    <parameter name="option" type="NavigateToOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html"&gt;wx.navigateTo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html"&gt;wx.navigateBack&lt;/a&gt; 可以返回到原页面。小程序中页面栈最多十层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.navigateTo({
  url: &amp;#39;test?id=1&amp;#39;,
  events: {
    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据
    acceptDataFromOpenedPage: function(data) {
      console.log(data)
    },
    someEvent: function(data) {
      console.log(data)
    }
    ...
  },
  success: function(res) {
    // 通过eventChannel向被打开页面传送数据
    res.eventChannel.emit(&amp;#39;acceptDataFromOpenerPage&amp;#39;, { data: &amp;#39;test&amp;#39; })
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;//test.js
Page({
  onLoad: function(option){
    console.log(option.query)
    const eventChannel = this.getOpenerEventChannel()
    eventChannel.emit(&amp;#39;acceptDataFromOpenedPage&amp;#39;, {data: &amp;#39;test&amp;#39;});
    eventChannel.emit(&amp;#39;someEvent&amp;#39;, {data: &amp;#39;test&amp;#39;});
    // 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据
    eventChannel.on(&amp;#39;acceptDataFromOpenerPage&amp;#39;, function(data) {
      console.log(data)
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="navigateToMiniProgram">
                <parameters>
                    <parameter name="option" type="NavigateToMiniProgramOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html"&gt;wx.navigateToMiniProgram(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开另一个小程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用限制&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id="需要用户触发跳转"&gt;需要用户触发跳转&lt;/h5&gt;
&lt;p&gt;从 2.3.0 版本开始，若用户未点击小程序页面任意位置，则开发者将无法调用此接口自动跳转至其他小程序。&lt;/p&gt;
&lt;h5 id="需要用户确认跳转"&gt;需要用户确认跳转&lt;/h5&gt;
&lt;p&gt;从 2.3.0 版本开始，在跳转至其他小程序前，将统一增加弹窗，询问是否跳转，用户确认后才可以跳转其他小程序。如果用户点击取消，则回调 &lt;code&gt;fail cancel&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id="每个小程序可跳转的其他小程序数量限制为不超过-10-个"&gt;每个小程序可跳转的其他小程序数量限制为不超过 10 个&lt;/h5&gt;
&lt;p&gt;从 2.4.0 版本以及指定日期（具体待定）开始，开发者提交新版小程序代码时，如使用了跳转其他小程序功能，则需要在代码配置中声明将要跳转的小程序名单，限定不超过 10 个，否则将无法通过审核。该名单可在发布新版时更新，不支持动态修改。配置方法详见 &lt;a href="(configuration/app)"&gt;小程序全局配置&lt;/a&gt;。调用此接口时，所跳转的 appId 必须在配置列表中，否则回调 &lt;code&gt;fail appId &amp;quot;${appId}&amp;quot; is not in navigateToMiniProgramAppIdList&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于调试&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在开发者工具上调用此 API 并不会真实的跳转到另外的小程序，但是开发者工具会校验本次调用跳转是否成功。&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81"&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发者工具上支持被跳转的小程序处理接收参数的调试。&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81"&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.navigateToMiniProgram({
  appId: &amp;#39;&amp;#39;,
  path: &amp;#39;page/index/index?id=123&amp;#39;,
  extraData: {
    foo: &amp;#39;bar&amp;#39;
  },
  envVersion: &amp;#39;develop&amp;#39;,
  success(res) {
    // 打开成功
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="nextTick">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/custom-component/wx.nextTick.html"&gt;wx.nextTick(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;延迟一部分操作到下一个时间片再执行。（类似于 setTimeout）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为自定义组件中的 setData 和 triggerEvent 等接口本身是同步的操作，当这几个接口被连续调用时，都是在一个同步流程中执行完的，因此若逻辑不当可能会导致出错。&lt;/p&gt;
&lt;p&gt;一个极端的案例：当父组件的 setData 引发了子组件的 triggerEvent，进而使得父组件又进行了一次 setData，期间有通过 wx:if 语句对子组件进行卸载，就有可能引发奇怪的错误，所以对于不需要在一个同步流程内完成的逻辑，可以使用此接口延迟到下一个时间片再执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Component({
  doSth() {
    this.setData({ number: 1 }) // 直接在当前同步流程中执行

    wx.nextTick(() =&amp;gt; {
      this.setData({ number: 3 }) // 在当前同步流程结束后，下一个时间片执行
    })

    this.setData({ number: 2 }) // 直接在当前同步流程中执行
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.2.3&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="notifyBLECharacteristicValueChange">
                <parameters>
                    <parameter name="option" type="NotifyBLECharacteristicValueChangeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html"&gt;wx.notifyBLECharacteristicValueChange(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持 notify 或者 indicate 才可以成功调用。&lt;/p&gt;
&lt;p&gt;另外，必须先启用 &lt;code&gt;notifyBLECharacteristicValueChange&lt;/code&gt; 才能监听到设备 &lt;code&gt;characteristicValueChange&lt;/code&gt; 事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订阅操作成功后需要设备主动更新特征值的 value，才会触发 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html"&gt;wx.onBLECharacteristicValueChange&lt;/a&gt; 回调。&lt;/li&gt;
&lt;li&gt;安卓平台上，在调用 &lt;code&gt;notifyBLECharacteristicValueChange&lt;/code&gt; 成功后立即调用 &lt;code&gt;writeBLECharacteristicValue&lt;/code&gt; 接口，在部分机型上会发生 10008 系统错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.notifyBLECharacteristicValueChange({
  state: true, // 启用 notify 功能
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId,
  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
  characteristicId,
  success (res) {
    console.log(&amp;#39;notifyBLECharacteristicValueChange success&amp;#39;, res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAccelerometerChange">
                <parameters>
                    <parameter name="callback" type="OffAccelerometerChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.offAccelerometerChange.html"&gt;wx.offAccelerometerChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听加速度数据事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAppHide">
                <parameters>
                    <parameter name="callback" type="OffAppHideCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAppHide.html"&gt;wx.offAppHide(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听小程序切后台事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAppShow">
                <parameters>
                    <parameter name="callback" type="OffAppShowCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAppShow.html"&gt;wx.offAppShow(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听小程序切前台事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAudioInterruptionBegin">
                <parameters>
                    <parameter name="callback" type="OffAudioInterruptionBeginCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAudioInterruptionBegin.html"&gt;wx.offAudioInterruptionBegin(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频因为受到系统占用而被中断开始事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAudioInterruptionEnd">
                <parameters>
                    <parameter name="callback" type="OffAudioInterruptionEndCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAudioInterruptionEnd.html"&gt;wx.offAudioInterruptionEnd(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频中断结束事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offBeaconServiceChange">
                <parameters>
                    <parameter name="callback" type="OffBeaconServiceChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.offBeaconServiceChange.html"&gt;wx.offBeaconServiceChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 iBeacon 服务状态变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offBeaconUpdate">
                <parameters>
                    <parameter name="callback" type="OffBeaconUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.offBeaconUpdate.html"&gt;wx.offBeaconUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 iBeacon 设备更新事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offCompassChange">
                <parameters>
                    <parameter name="callback" type="OffCompassChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.offCompassChange.html"&gt;wx.offCompassChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听罗盘数据变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offDeviceMotionChange">
                <parameters>
                    <parameter name="callback" type="OffDeviceMotionChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.offDeviceMotionChange.html"&gt;wx.offDeviceMotionChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听设备方向变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offError">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offError.html"&gt;wx.offError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听小程序错误事件。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offGyroscopeChange">
                <parameters>
                    <parameter name="callback" type="OffGyroscopeChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.offGyroscopeChange.html"&gt;wx.offGyroscopeChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听陀螺仪数据变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offHCEMessage">
                <parameters>
                    <parameter name="callback" type="OffHCEMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.offHCEMessage.html"&gt;wx.offHCEMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听接收 NFC 设备消息事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocalServiceDiscoveryStop">
                <parameters>
                    <parameter name="callback" type="OffLocalServiceDiscoveryStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceDiscoveryStop.html"&gt;wx.offLocalServiceDiscoveryStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 mDNS 服务停止搜索的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocalServiceFound">
                <parameters>
                    <parameter name="callback" type="OffLocalServiceFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceFound.html"&gt;wx.offLocalServiceFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 mDNS 服务发现的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocalServiceLost">
                <parameters>
                    <parameter name="callback" type="OffLocalServiceLostCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceLost.html"&gt;wx.offLocalServiceLost(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 mDNS 服务离开的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocalServiceResolveFail">
                <parameters>
                    <parameter name="callback" type="OffLocalServiceResolveFailCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceResolveFail.html"&gt;wx.offLocalServiceResolveFail(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 mDNS 服务解析失败的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocationChange">
                <parameters>
                    <parameter name="callback" type="OffLocationChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.offLocationChange.html"&gt;wx.offLocationChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听实时地理位置变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offNetworkStatusChange">
                <parameters>
                    <parameter name="callback" type="OffNetworkStatusChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.offNetworkStatusChange.html"&gt;wx.offNetworkStatusChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听网络状态变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offPageNotFound">
                <parameters>
                    <parameter name="callback" type="OffPageNotFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offPageNotFound.html"&gt;wx.offPageNotFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听小程序要打开的页面不存在事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offUserCaptureScreen">
                <parameters>
                    <parameter name="callback" type="OffUserCaptureScreenCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.offUserCaptureScreen.html"&gt;wx.offUserCaptureScreen(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听用户主动截屏事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offWindowResize">
                <parameters>
                    <parameter name="callback" type="OffWindowResizeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.offWindowResize.html"&gt;wx.offWindowResize(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听窗口尺寸变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onAccelerometerChange">
                <parameters>
                    <parameter name="callback" type="OnAccelerometerChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.onAccelerometerChange.html"&gt;wx.onAccelerometerChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听加速度数据事件。频率根据 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.startAccelerometer.html"&gt;wx.startAccelerometer()&lt;/a&gt; 的 interval 参数, 接口调用后会自动开始监听。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onAccelerometerChange(callback)&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="onAppHide">
                <parameters>
                    <parameter name="callback" type="OnAppHideCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppHide.html"&gt;wx.onAppHide(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序切后台事件。该事件与 &lt;a href="(App#onhide)"&gt;&lt;code&gt;App.onHide&lt;/code&gt;&lt;/a&gt; 的回调时机一致。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onAppShow">
                <parameters>
                    <parameter name="callback" type="OnAppShowCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppShow.html"&gt;wx.onAppShow(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序切前台事件。该事件与 &lt;a href="(App#onshowobject-object)"&gt;&lt;code&gt;App.onShow&lt;/code&gt;&lt;/a&gt; 的回调参数一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回有效 referrerInfo 的场景&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景值&lt;/th&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;appId含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1020&lt;/td&gt;
&lt;td&gt;公众号 profile 页相关小程序列表&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1035&lt;/td&gt;
&lt;td&gt;公众号自定义菜单&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1036&lt;/td&gt;
&lt;td&gt;App 分享消息卡片&lt;/td&gt;
&lt;td&gt;来源App&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1037&lt;/td&gt;
&lt;td&gt;小程序打开小程序&lt;/td&gt;
&lt;td&gt;来源小程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1038&lt;/td&gt;
&lt;td&gt;从另一个小程序返回&lt;/td&gt;
&lt;td&gt;来源小程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1043&lt;/td&gt;
&lt;td&gt;公众号模板消息&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;部分版本在无&lt;code&gt;referrerInfo&lt;/code&gt;的时候会返回 &lt;code&gt;undefined&lt;/code&gt;，建议使用 &lt;code&gt;options.referrerInfo &amp;amp;&amp;amp; options.referrerInfo.appId&lt;/code&gt; 进行判断。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onAudioInterruptionBegin">
                <parameters>
                    <parameter name="callback" type="OnAudioInterruptionBeginCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAudioInterruptionBegin.html"&gt;wx.onAudioInterruptionBegin(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频因为受到系统占用而被中断开始事件。以下场景会触发此事件：闹钟、电话、FaceTime 通话、微信语音聊天、微信视频聊天。此事件触发后，小程序内所有音频会暂停。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onAudioInterruptionEnd">
                <parameters>
                    <parameter name="callback" type="OnAudioInterruptionEndCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAudioInterruptionEnd.html"&gt;wx.onAudioInterruptionEnd(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频中断结束事件。在收到 onAudioInterruptionBegin 事件之后，小程序内所有音频会暂停，收到此事件之后才可再次播放成功&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBLECharacteristicValueChange">
                <parameters>
                    <parameter name="callback" type="OnBLECharacteristicValueChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html"&gt;wx.onBLECharacteristicValueChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听低功耗蓝牙设备的特征值变化事件。必须先启用 &lt;code&gt;notifyBLECharacteristicValueChange&lt;/code&gt; 接口才能接收到设备推送的 notification。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// ArrayBuffer转16进制字符串示例
function ab2hex(buffer) {
  let hexArr = Array.prototype.map.call(
    new Uint8Array(buffer),
    function(bit) {
      return (&amp;#39;00&amp;#39; + bit.toString(16)).slice(-2)
    }
  )
  return hexArr.join(&amp;#39;&amp;#39;);
}
wx.onBLECharacteristicValueChange(function(res) {
  console.log(`characteristic ${res.characteristicId} has changed, now is ${res.value}`)
  console.log(ab2hex(res.value))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBLEConnectionStateChange">
                <parameters>
                    <parameter name="callback" type="OnBLEConnectionStateChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEConnectionStateChange.html"&gt;wx.onBLEConnectionStateChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听低功耗蓝牙连接状态的改变事件。包括开发者主动连接或断开连接，设备丢失，连接异常断开等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onBLEConnectionStateChange(function(res) {
  // 该方法回调中可以用于处理连接意外断开等异常情况
  console.log(`device ${res.deviceId} state has changed, connected: ${res.connected}`)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBackgroundAudioPause">
                <parameters>
                    <parameter name="callback" type="OnBackgroundAudioPauseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioPause.html"&gt;wx.onBackgroundAudioPause(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音乐暂停事件。&lt;/p&gt;
</description>
            </method>
            <method name="onBackgroundAudioPlay">
                <parameters>
                    <parameter name="callback" type="OnBackgroundAudioPlayCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioPlay.html"&gt;wx.onBackgroundAudioPlay(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音乐播放事件。&lt;/p&gt;
</description>
            </method>
            <method name="onBackgroundAudioStop">
                <parameters>
                    <parameter name="callback" type="OnBackgroundAudioStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioStop.html"&gt;wx.onBackgroundAudioStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音乐停止事件。&lt;/p&gt;
</description>
            </method>
            <method name="onBackgroundFetchData">
                <parameters>
                    <parameter name="option" type="OnBackgroundFetchDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/backgroundFetch/wx.onBackgroundFetchData.html"&gt;wx.onBackgroundFetchData(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;收到 backgroundFetch 数据时的回调&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBeaconServiceChange">
                <parameters>
                    <parameter name="callback" type="OnBeaconServiceChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.onBeaconServiceChange.html"&gt;wx.onBeaconServiceChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 iBeacon 服务状态变化事件，仅能注册一个监听&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBeaconUpdate">
                <parameters>
                    <parameter name="callback" type="OnBeaconUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.onBeaconUpdate.html"&gt;wx.onBeaconUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 iBeacon 设备更新事件，仅能注册一个监听&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBluetoothAdapterStateChange">
                <parameters>
                    <parameter name="callback" type="OnBluetoothAdapterStateChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothAdapterStateChange.html"&gt;wx.onBluetoothAdapterStateChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听蓝牙适配器状态变化事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onBluetoothAdapterStateChange(function (res) {
  console.log(&amp;#39;adapterState changed, now is&amp;#39;, res)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBluetoothDeviceFound">
                <parameters>
                    <parameter name="callback" type="OnBluetoothDeviceFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothDeviceFound.html"&gt;wx.onBluetoothDeviceFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听寻找到新设备的事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若在 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothDeviceFound.html"&gt;wx.onBluetoothDeviceFound&lt;/a&gt; 回调了某个设备，则此设备会添加到 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothDevices.html"&gt;wx.getBluetoothDevices&lt;/a&gt; 接口获取到的数组中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// ArrayBuffer转16进度字符串示例
function ab2hex(buffer) {
  var hexArr = Array.prototype.map.call(
    new Uint8Array(buffer),
    function(bit) {
      return (&amp;#39;00&amp;#39; + bit.toString(16)).slice(-2)
    }
  )
  return hexArr.join(&amp;#39;&amp;#39;);
}
wx.onBluetoothDeviceFound(function(devices) {
  console.log(&amp;#39;new device list has founded&amp;#39;)
  console.dir(devices)
  console.log(ab2hex(devices[0].advertisData))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安卓下部分机型需要有位置权限才能搜索到设备，需留意是否开启了位置权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onCompassChange">
                <parameters>
                    <parameter name="callback" type="OnCompassChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.onCompassChange.html"&gt;wx.onCompassChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听罗盘数据变化事件。频率：5 次/秒，接口调用后会自动开始监听，可使用 wx.stopCompass 停止监听。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;accuracy 在 iOS/Android 的差异&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于平台差异，accuracy 在 iOS/Android 的值不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS：accuracy 是一个 number 类型的值，表示相对于磁北极的偏差。0 表示设备指向磁北，90 表示指向东，180 表示指向南，依此类推。&lt;/li&gt;
&lt;li&gt;Android：accuracy 是一个 string 类型的枚举值。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;高精度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;中等精度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;低精度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no-contact&lt;/td&gt;
&lt;td&gt;不可信，传感器失去连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unreliable&lt;/td&gt;
&lt;td&gt;不可信，原因未知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unknow ${value}&lt;/td&gt;
&lt;td&gt;未知的精度枚举值，即该 Android 系统此时返回的表示精度的 value 不是一个标准的精度枚举值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </method>
            <method name="onDeviceMotionChange">
                <parameters>
                    <parameter name="callback" type="OnDeviceMotionChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.onDeviceMotionChange.html"&gt;wx.onDeviceMotionChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听设备方向变化事件。频率根据 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.startDeviceMotionListening.html"&gt;wx.startDeviceMotionListening()&lt;/a&gt; 的 interval 参数。可以使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.stopDeviceMotionListening.html"&gt;wx.stopDeviceMotionListening()&lt;/a&gt; 停止监听。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="OnAppErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onError.html"&gt;wx.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序错误事件。如脚本错误或 API 调用报错等。该事件与 &lt;a href="(App#onerrorstring-error)"&gt;&lt;code&gt;App.onError&lt;/code&gt;&lt;/a&gt; 的回调时机与参数一致。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onGetWifiList">
                <parameters>
                    <parameter name="callback" type="OnGetWifiListCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onGetWifiList.html"&gt;wx.onGetWifiList(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听获取到 Wi-Fi 列表数据事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onGyroscopeChange">
                <parameters>
                    <parameter name="callback" type="OnGyroscopeChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.onGyroscopeChange.html"&gt;wx.onGyroscopeChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听陀螺仪数据变化事件。频率根据 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.startGyroscope.html"&gt;wx.startGyroscope()&lt;/a&gt; 的 interval 参数。可以使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.stopGyroscope.html"&gt;wx.stopGyroscope()&lt;/a&gt; 停止监听。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onHCEMessage">
                <parameters>
                    <parameter name="callback" type="OnHCEMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.onHCEMessage.html"&gt;wx.onHCEMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听接收 NFC 设备消息事件，仅能注册一个监听&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onKeyboardHeightChange">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/keyboard/wx.onKeyboardHeightChange.html"&gt;wx.onKeyboardHeightChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听键盘高度变化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onKeyboardHeightChange(res =&amp;gt; {
  console.log(res.height)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocalServiceDiscoveryStop">
                <parameters>
                    <parameter name="callback" type="OnLocalServiceDiscoveryStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceDiscoveryStop.html"&gt;wx.onLocalServiceDiscoveryStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 mDNS 服务停止搜索的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocalServiceFound">
                <parameters>
                    <parameter name="callback" type="OnLocalServiceFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceFound.html"&gt;wx.onLocalServiceFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 mDNS 服务发现的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocalServiceLost">
                <parameters>
                    <parameter name="callback" type="OnLocalServiceLostCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceLost.html"&gt;wx.onLocalServiceLost(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 mDNS 服务离开的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocalServiceResolveFail">
                <parameters>
                    <parameter name="callback" type="OnLocalServiceResolveFailCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceResolveFail.html"&gt;wx.onLocalServiceResolveFail(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 mDNS 服务解析失败的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocationChange">
                <parameters>
                    <parameter name="callback" type="OnLocationChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.onLocationChange.html"&gt;wx.onLocationChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听实时地理位置变化事件，需结合 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html"&gt;wx.startLocationUpdateBackground&lt;/a&gt;、&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdate.html"&gt;wx.startLocationUpdate&lt;/a&gt;使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt; const _locationChangeFn = function(res) {
  console.log(&amp;#39;location change&amp;#39;, res)
 }
 wx.onLocationChange(_locationChangeFn)
 wx.offLocationChange(_locationChangeFn)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onMemoryWarning">
                <parameters>
                    <parameter name="callback" type="OnMemoryWarningCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/performance/wx.onMemoryWarning.html"&gt;wx.onMemoryWarning(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听内存不足告警事件。&lt;/p&gt;
&lt;p&gt;当 iOS/Android 向小程序进程发出内存警告时，触发该事件。触发该事件不意味小程序被杀，大部分情况下仅仅是告警，开发者可在收到通知后回收一些不必要资源避免进一步加剧内存紧张。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;```js
         * wx.onMemoryWarning(function () {
         *   console.log(&amp;#39;onMemoryWarningReceive&amp;#39;)
         * })
         * ``
         *
         * 最低基础库： &lt;code&gt;2.0.2&lt;/code&gt; *&lt;/p&gt;
</description>
            </method>
            <method name="onNetworkStatusChange">
                <parameters>
                    <parameter name="callback" type="OnNetworkStatusChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.onNetworkStatusChange.html"&gt;wx.onNetworkStatusChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听网络状态变化事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onNetworkStatusChange(function (res) {
  console.log(res.isConnected)
  console.log(res.networkType)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onPageNotFound">
                <parameters>
                    <parameter name="callback" type="OnPageNotFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html"&gt;wx.onPageNotFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序要打开的页面不存在事件。该事件与 &lt;a href="(App#onpagenotfoundobject-object)"&gt;&lt;code&gt;App.onPageNotFound&lt;/code&gt;&lt;/a&gt; 的回调时机一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者可以在回调中进行页面重定向，但必须在回调中&lt;strong&gt;同步&lt;/strong&gt;处理，异步处理（例如 &lt;code&gt;setTimeout&lt;/code&gt; 异步执行）无效。&lt;/li&gt;
&lt;li&gt;若开发者没有调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html"&gt;wx.onPageNotFound&lt;/a&gt; 绑定监听，也没有声明 &lt;code&gt;App.onPageNotFound&lt;/code&gt;，当跳转页面不存在时，将推入微信客户端原生的页面不存在提示页面。&lt;/li&gt;
&lt;li&gt;如果回调中又重定向到另一个不存在的页面，将推入微信客户端原生的页面不存在提示页面，并且不再第二次回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onSocketClose">
                <parameters>
                    <parameter name="callback" type="OnSocketCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketClose.html"&gt;wx.onSocketClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 连接关闭事件&lt;/p&gt;
</description>
            </method>
            <method name="onSocketError">
                <parameters>
                    <parameter name="callback" type="OnSocketErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketError.html"&gt;wx.onSocketError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 错误事件&lt;/p&gt;
</description>
            </method>
            <method name="onSocketMessage">
                <parameters>
                    <parameter name="callback" type="OnSocketMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketMessage.html"&gt;wx.onSocketMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 接受到服务器的消息事件&lt;/p&gt;
</description>
            </method>
            <method name="onSocketOpen">
                <parameters>
                    <parameter name="callback" type="OnSocketOpenCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketOpen.html"&gt;wx.onSocketOpen(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 连接打开事件&lt;/p&gt;
</description>
            </method>
            <method name="onUserCaptureScreen">
                <parameters>
                    <parameter name="callback" type="OnUserCaptureScreenCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.onUserCaptureScreen.html"&gt;wx.onUserCaptureScreen(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听用户主动截屏事件。用户使用系统截屏按键截屏时触发，只能注册一个监听&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onUserCaptureScreen(function (res) {
  console.log(&amp;#39;用户截屏了&amp;#39;)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onWifiConnected">
                <parameters>
                    <parameter name="callback" type="OnWifiConnectedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onWifiConnected.html"&gt;wx.onWifiConnected(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听连接上 Wi-Fi 的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onWindowResize">
                <parameters>
                    <parameter name="callback" type="OnWindowResizeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.onWindowResize.html"&gt;wx.onWindowResize(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听窗口尺寸变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="openBluetoothAdapter">
                <parameters>
                    <parameter name="option" type="OpenBluetoothAdapterOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html"&gt;wx.openBluetoothAdapter(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化蓝牙模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他蓝牙相关 API 必须在 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html"&gt;wx.openBluetoothAdapter&lt;/a&gt; 调用之后使用。否则 API 会返回错误（errCode=10000）。&lt;/li&gt;
&lt;li&gt;在用户蓝牙开关未开启或者手机不支持蓝牙功能的情况下，调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html"&gt;wx.openBluetoothAdapter&lt;/a&gt; 会返回错误（errCode=10001），表示手机蓝牙功能不可用。此时小程序蓝牙模块已经初始化完成，可通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothAdapterStateChange.html"&gt;wx.onBluetoothAdapterStateChange&lt;/a&gt; 监听手机蓝牙状态的改变，也可以调用蓝牙模块的所有API。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.openBluetoothAdapter({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="openCard">
                <parameters>
                    <parameter name="option" type="OpenCardOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.openCard.html"&gt;wx.openCard(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看微信卡包中的卡券。只有通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/product/renzheng.html"&gt;认证&lt;/a&gt; 的小程序或文化互动类目的小游戏才能使用。更多文档请参考 &lt;a href="https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&amp;amp;key=1490190158&amp;amp;version=1&amp;amp;lang=zh_CN&amp;amp;platform=2"&gt;微信卡券接口文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.openCard({
  cardList: [{
    cardId: &amp;#39;&amp;#39;,
    code: &amp;#39;&amp;#39;
  }, {
    cardId: &amp;#39;&amp;#39;,
    code: &amp;#39;&amp;#39;
  }],
  success (res) { }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="openDocument">
                <parameters>
                    <parameter name="option" type="OpenDocumentOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html"&gt;wx.openDocument(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新开页面打开文档&lt;/p&gt;
</description>
            </method>
            <method name="openLocation">
                <parameters>
                    <parameter name="option" type="OpenLocationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.openLocation.html"&gt;wx.openLocation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用微信内置地图查看位置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt; wx.getLocation({
  type: &amp;#39;gcj02&amp;#39;, //返回可以用于wx.openLocation的经纬度
  success (res) {
    const latitude = res.latitude
    const longitude = res.longitude
    wx.openLocation({
      latitude,
      longitude,
      scale: 18
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="openSetting">
                <parameters>
                    <parameter name="option" type="OpenSettingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.openSetting.html"&gt;wx.openSetting(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调起客户端小程序设置界面，返回用户设置的操作结果。&lt;strong&gt;设置界面只会出现小程序已经向用户请求过的&lt;a href="(authorize)"&gt;权限&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意：{% version(2.3.0) %} 版本开始，用户发生点击行为后，才可以跳转打开设置页，管理授权信息。[详情]({% postUrl(000cea2305cc5047af5733de751008) %})&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.openSetting({
  success (res) {
    console.log(res.authSetting)
    // res.authSetting = {
    //   &amp;quot;scope.userInfo&amp;quot;: true,
    //   &amp;quot;scope.userLocation&amp;quot;: true
    // }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="pageScrollTo">
                <parameters>
                    <parameter name="option" type="PageScrollToOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html"&gt;wx.pageScrollTo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将页面滚动到目标位置，支持选择器和滚动距离两种方式定位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selector 语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;selector类似于 CSS 的选择器，但仅支持下列语法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID选择器：#the-id&lt;/li&gt;
&lt;li&gt;class选择器（可以连续指定多个）：.a-class.another-class&lt;/li&gt;
&lt;li&gt;子元素选择器：.the-parent &amp;gt; .the-child&lt;/li&gt;
&lt;li&gt;后代选择器：.the-ancestor .the-descendant&lt;/li&gt;
&lt;li&gt;跨自定义组件的后代选择器：.the-ancestor &amp;gt;&amp;gt;&amp;gt; .the-descendant&lt;/li&gt;
&lt;li&gt;多选择器的并集：#a-node, .some-other-nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.pageScrollTo({
  scrollTop: 0,
  duration: 300
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="pauseBackgroundAudio">
                <parameters>
                    <parameter name="option" type="PauseBackgroundAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.pauseBackgroundAudio.html"&gt;wx.pauseBackgroundAudio(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停播放音乐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.pauseBackgroundAudio()&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="pauseVoice">
                <parameters>
                    <parameter name="option" type="PauseVoiceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.pauseVoice.html"&gt;wx.pauseVoice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停正在播放的语音。再次调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.playVoice.html"&gt;wx.playVoice&lt;/a&gt; 播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.stopVoice.html"&gt;wx.stopVoice&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
    wx.playVoice({
      filePath: tempFilePath
    })

    setTimeout(() =&amp;gt; { wx.pauseVoice() }, 5000)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="playBackgroundAudio">
                <parameters>
                    <parameter name="option" type="PlayBackgroundAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.playBackgroundAudio.html"&gt;wx.playBackgroundAudio(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用后台播放器播放音乐。对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.playBackgroundAudio({
  dataUrl: &amp;#39;&amp;#39;,
  title: &amp;#39;&amp;#39;,
  coverImgUrl: &amp;#39;&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="playVoice">
                <parameters>
                    <parameter name="option" type="PlayVoiceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.playVoice.html"&gt;wx.playVoice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始播放语音。同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
    wx.playVoice({
      filePath: tempFilePath,
      complete () { }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="previewImage">
                <parameters>
                    <parameter name="option" type="PreviewImageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html"&gt;wx.previewImage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.previewImage({
  current: &amp;#39;&amp;#39;, // 当前显示图片的http链接
  urls: [] // 需要预览的图片http链接列表
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="reLaunch">
                <parameters>
                    <parameter name="option" type="ReLaunchOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html"&gt;wx.reLaunch(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭所有页面，打开到应用内的某个页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.reLaunch({
  url: &amp;#39;test?id=1&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;// test&lt;/li&gt;
&lt;li&gt;Page({&lt;/li&gt;
&lt;li&gt;onLoad (option) {&lt;/li&gt;
&lt;li&gt;console.log(option.query)&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;})&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="readBLECharacteristicValue">
                <parameters>
                    <parameter name="option" type="ReadBLECharacteristicValueOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.readBLECharacteristicValue.html"&gt;wx.readBLECharacteristicValue(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持 read 才可以成功调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行调用多次会存在读失败的可能性。&lt;/li&gt;
&lt;li&gt;接口读取到的信息需要在 &lt;code&gt;onBLECharacteristicValueChange&lt;/code&gt; 方法注册的回调中获取。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 必须在这里的回调才能获取
wx.onBLECharacteristicValueChange(function(characteristic) {
  console.log(&amp;#39;characteristic value comed:&amp;#39;, characteristic)
})

wx.readBLECharacteristicValue({
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId,
  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
  characteristicId,
  success (res) {
    console.log(&amp;#39;readBLECharacteristicValue:&amp;#39;, res.errCode)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="redirectTo">
                <parameters>
                    <parameter name="option" type="RedirectToOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html"&gt;wx.redirectTo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.redirectTo({
  url: &amp;#39;test?id=1&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="removeSavedFile">
                <parameters>
                    <parameter name="option" type="WxRemoveSavedFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.removeSavedFile.html"&gt;wx.removeSavedFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;删除本地缓存文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSavedFileList({
 success (res) {
   if (res.fileList.length &amp;gt; 0){
     wx.removeSavedFile({
       filePath: res.fileList[0].filePath,
       complete (res) {
         console.log(res)
       }
     })
   }
 }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="removeStorage">
                <parameters>
                    <parameter name="option" type="RemoveStorageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorage.html"&gt;wx.removeStorage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从本地缓存中移除指定 key&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.removeStorage({
  key: &amp;#39;key&amp;#39;,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.removeStorageSync(&amp;#39;key&amp;#39;)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="removeStorageSync">
                <parameters>
                    <parameter name="key" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorageSync.html"&gt;wx.removeStorageSync(string key)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorage.html"&gt;wx.removeStorage&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.removeStorage({
  key: &amp;#39;key&amp;#39;,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.removeStorageSync(&amp;#39;key&amp;#39;)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="removeTabBarBadge">
                <parameters>
                    <parameter name="option" type="RemoveTabBarBadgeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.removeTabBarBadge.html"&gt;wx.removeTabBarBadge(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;移除 tabBar 某一项右上角的文本&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="reportAnalytics">
                <parameters>
                    <parameter name="eventName" type="String"/>
                    <parameter name="data" type="IAnyObject"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/data-analysis/wx.reportAnalytics.html"&gt;wx.reportAnalytics(string eventName, Object data)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自定义分析数据上报接口。使用前，需要在小程序管理后台自定义分析中新建事件，配置好事件名与字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.reportAnalytics(&amp;#39;purchase&amp;#39;, {
  price: 120,
  color: &amp;#39;red&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="reportMonitor">
                <parameters>
                    <parameter name="name" type="String"/>
                    <parameter name="value" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/report/wx.reportMonitor.html"&gt;wx.reportMonitor(string name, number value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自定义业务数据监控上报接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用前，需要在「小程序管理后台-运维中心-性能监控-业务数据监控」中新建监控事件，配置监控描述与告警类型。每一个监控事件对应唯一的监控ID，开发者最多可以创建128个监控事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.reportMonitor(&amp;#39;1&amp;#39;, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.0.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="requestPayment">
                <parameters>
                    <parameter name="option" type="RequestPaymentOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/payment/wx.requestPayment.html"&gt;wx.requestPayment(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发起微信支付。了解更多信息，请查看&lt;a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&amp;amp;index=1"&gt;微信支付接口文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.requestPayment({
  timeStamp: &amp;#39;&amp;#39;,
  nonceStr: &amp;#39;&amp;#39;,
  package: &amp;#39;&amp;#39;,
  signType: &amp;#39;MD5&amp;#39;,
  paySign: &amp;#39;&amp;#39;,
  success (res) { },
  fail (res) { }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="saveFile">
                <parameters>
                    <parameter name="option" type="WxSaveFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFile.html"&gt;wx.saveFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保存文件到本地。注意：&lt;strong&gt;saveFile 会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseImage({
  success: function(res) {
    const tempFilePaths = res.tempFilePaths
    wx.saveFile({
      tempFilePath: tempFilePaths[0],
      success (res) {
        const savedFilePath = res.savedFilePath
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本地文件存储的大小限制为 10M&lt;/p&gt;
</description>
            </method>
            <method name="saveImageToPhotosAlbum">
                <parameters>
                    <parameter name="option" type="SaveImageToPhotosAlbumOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html"&gt;wx.saveImageToPhotosAlbum(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保存图片到系统相册。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.saveImageToPhotosAlbum({
  success(res) { }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="saveVideoToPhotosAlbum">
                <parameters>
                    <parameter name="option" type="SaveVideoToPhotosAlbumOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.saveVideoToPhotosAlbum.html"&gt;wx.saveVideoToPhotosAlbum(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保存视频到系统相册。支持mp4视频格式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.saveVideoToPhotosAlbum({
  filePath: &amp;#39;wxfile://xxx&amp;#39;,
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="scanCode">
                <parameters>
                    <parameter name="option" type="ScanCodeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/scan/wx.scanCode.html"&gt;wx.scanCode(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调起客户端扫码界面进行扫码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 允许从相机和相册扫码
wx.scanCode({
  success (res) {
    console.log(res)
  }
})

// 只允许从相机扫码
wx.scanCode({
  onlyFromCamera: true,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="seekBackgroundAudio">
                <parameters>
                    <parameter name="option" type="SeekBackgroundAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.seekBackgroundAudio.html"&gt;wx.seekBackgroundAudio(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;控制音乐播放进度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.seekBackgroundAudio({
  position: 30
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="sendHCEMessage">
                <parameters>
                    <parameter name="option" type="SendHCEMessageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.sendHCEMessage.html"&gt;wx.sendHCEMessage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发送 NFC 消息。仅在安卓系统下有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const buffer = new ArrayBuffer(1)
const dataView = new DataView(buffer)
dataView.setUint8(0, 0)

wx.startHCE({
  success (res) {
    wx.onHCEMessage(function(res) {
      if (res.messageType === 1) {
        wx.sendHCEMessage({data: buffer})
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="sendSocketMessage">
                <parameters>
                    <parameter name="option" type="SendSocketMessageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.sendSocketMessage.html"&gt;wx.sendSocketMessage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过 WebSocket 连接发送数据。需要先 wx.connectSocket，并在 wx.onSocketOpen 回调之后才能发送。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;let socketOpen = false
const socketMsgQueue = []
wx.connectSocket({
  url: &amp;#39;test.php&amp;#39;
})

wx.onSocketOpen(function(res) {
  socketOpen = true
  for (let i = 0; i &amp;lt; socketMsgQueue.length; i++){
    sendSocketMessage(socketMsgQueue[i])
  }
  socketMsgQueue = []
})

function sendSocketMessage(msg) {
  if (socketOpen) {
    wx.sendSocketMessage({
      data:msg
    })
  } else {
    socketMsgQueue.push(msg)
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="setBackgroundColor">
                <parameters>
                    <parameter name="option" type="SetBackgroundColorOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/background/wx.setBackgroundColor.html"&gt;wx.setBackgroundColor(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置窗口的背景色&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setBackgroundColor({
  backgroundColor: &amp;#39;#ffffff&amp;#39;, // 窗口的背景色为白色
})

wx.setBackgroundColor({
  backgroundColorTop: &amp;#39;#ffffff&amp;#39;, // 顶部窗口的背景色为白色
  backgroundColorBottom: &amp;#39;#ffffff&amp;#39;, // 底部窗口的背景色为白色
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setBackgroundFetchToken">
                <parameters>
                    <parameter name="option" type="SetBackgroundFetchTokenOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/backgroundFetch/wx.setBackgroundFetchToken.html"&gt;wx.setBackgroundFetchToken(object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置自定义登录态，在周期性拉取数据时带上，便于第三方服务器验证请求合法性&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setBackgroundTextStyle">
                <parameters>
                    <parameter name="option" type="SetBackgroundTextStyleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/background/wx.setBackgroundTextStyle.html"&gt;wx.setBackgroundTextStyle(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置下拉背景字体、loading 图的样式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setBackgroundTextStyle({
  textStyle: &amp;#39;dark&amp;#39; // 下拉背景字体、loading 图的样式为dark
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setClipboardData">
                <parameters>
                    <parameter name="option" type="SetClipboardDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html"&gt;wx.setClipboardData(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置系统剪贴板的内容。调用成功后，会弹出 toast 提示&amp;quot;内容已复制&amp;quot;，持续 1.5s&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setClipboardData({
  data: &amp;#39;data&amp;#39;,
  success (res) {
    wx.getClipboardData({
      success (res) {
        console.log(res.data) // data
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setEnableDebug">
                <parameters>
                    <parameter name="option" type="SetEnableDebugOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.setEnableDebug.html"&gt;wx.setEnableDebug(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置是否打开调试开关。此开关对正式版也能生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;// 打开调试
wx.setEnableDebug({
  enableDebug: true
})

// 关闭调试
wx.setEnableDebug({
  enableDebug: false
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在正式版打开调试还有一种方法，就是先在开发版或体验版打开调试，再切到正式版就能看到vConsole。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setInnerAudioOption">
                <parameters>
                    <parameter name="option" type="SetInnerAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.setInnerAudioOption.html"&gt;wx.setInnerAudioOption(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html"&gt;InnerAudioContext&lt;/a&gt; 的播放选项。设置之后对当前小程序全局生效。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setKeepScreenOn">
                <parameters>
                    <parameter name="option" type="SetKeepScreenOnOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setKeepScreenOn.html"&gt;wx.setKeepScreenOn(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setKeepScreenOn({
  keepScreenOn: true
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setNavigationBarColor">
                <parameters>
                    <parameter name="option" type="SetNavigationBarColorOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarColor.html"&gt;wx.setNavigationBarColor(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置页面导航条颜色&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setNavigationBarTitle">
                <parameters>
                    <parameter name="option" type="SetNavigationBarTitleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html"&gt;wx.setNavigationBarTitle(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置当前页面的标题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setNavigationBarTitle({
  title: &amp;#39;当前页面&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="setScreenBrightness">
                <parameters>
                    <parameter name="option" type="SetScreenBrightnessOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setScreenBrightness.html"&gt;wx.setScreenBrightness(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置屏幕亮度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setStorage">
                <parameters>
                    <parameter name="option" type="SetStorageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html"&gt;wx.setStorage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setStorage({
  key:&amp;quot;key&amp;quot;,
  data:&amp;quot;value&amp;quot;
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.setStorageSync(&amp;#39;key&amp;#39;, &amp;#39;value&amp;#39;)
} catch (e) { }&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="setStorageSync">
                <parameters>
                    <parameter name="key" type="String"/>
                    <parameter name="data" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html"&gt;wx.setStorageSync(string key, any data)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html"&gt;wx.setStorage&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setStorage({
  key:&amp;quot;key&amp;quot;,
  data:&amp;quot;value&amp;quot;
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.setStorageSync(&amp;#39;key&amp;#39;, &amp;#39;value&amp;#39;)
} catch (e) { }&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="setTabBarBadge">
                <parameters>
                    <parameter name="option" type="SetTabBarBadgeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarBadge.html"&gt;wx.setTabBarBadge(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为 tabBar 某一项的右上角添加文本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setTabBarBadge({
  index: 0,
  text: &amp;#39;1&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTabBarItem">
                <parameters>
                    <parameter name="option" type="SetTabBarItemOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarItem.html"&gt;wx.setTabBarItem(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置 tabBar 某一项的内容，&lt;code&gt;2.7.0&lt;/code&gt; 起图片支持临时文件和网络文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setTabBarItem({
  index: 0,
  text: &amp;#39;text&amp;#39;,
  iconPath: &amp;#39;/path/to/iconPath&amp;#39;,
  selectedIconPath: &amp;#39;/path/to/selectedIconPath&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTabBarStyle">
                <parameters>
                    <parameter name="option" type="SetTabBarStyleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarStyle.html"&gt;wx.setTabBarStyle(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置 tabBar 的整体样式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setTabBarStyle({
  color: &amp;#39;#FF0000&amp;#39;,
  selectedColor: &amp;#39;#00FF00&amp;#39;,
  backgroundColor: &amp;#39;#0000FF&amp;#39;,
  borderStyle: &amp;#39;white&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTopBarText">
                <parameters>
                    <parameter name="option" type="SetTopBarTextOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/sticky/wx.setTopBarText.html"&gt;wx.setTopBarText(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置置顶栏文字内容。只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setTopBarText({
  text: &amp;#39;hello, world!&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用成功后，需间隔 5s 才能再次调用此接口，如果在 5s 内再次调用此接口，会回调 fail，errMsg：&amp;quot;setTopBarText: fail invoke too frequently&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.3&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setWifiList">
                <parameters>
                    <parameter name="option" type="SetWifiListOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.setWifiList.html"&gt;wx.setWifiList(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 &lt;code&gt;wifiList&lt;/code&gt; 中 AP 的相关信息。在 &lt;code&gt;onGetWifiList&lt;/code&gt; 回调后调用，&lt;strong&gt;iOS特有接口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该接口只能在 &lt;code&gt;onGetWifiList&lt;/code&gt; 回调之后才能调用。&lt;/li&gt;
&lt;li&gt;此时客户端会挂起，等待小程序设置 Wi-Fi 信息，请务必尽快调用该接口，若无数据请传入一个空数组。&lt;/li&gt;
&lt;li&gt;有可能随着周边 Wi-Fi 列表的刷新，单个流程内收到多次带有存在重复的 Wi-Fi 列表的回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onGetWifiList(function(res) {
  if (res.wifiList.length) {
    wx.setWifiList({
      wifiList: [{
        SSID: res.wifiList[0].SSID,
        BSSID: res.wifiList[0].BSSID,
        password: &amp;#39;123456&amp;#39;
      }]
    })
  } else {
    wx.setWifiList({
      wifiList: []
    })
  }
})
wx.getWifiList()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showActionSheet">
                <parameters>
                    <parameter name="option" type="ShowActionSheetOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showActionSheet.html"&gt;wx.showActionSheet(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示操作菜单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showActionSheet({
  itemList: [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;],
  success (res) {
    console.log(res.tapIndex)
  },
  fail (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 6.7.2 以下版本，点击取消或蒙层时，回调 fail, errMsg 为 &amp;quot;fail cancel&amp;quot;；&lt;/li&gt;
&lt;li&gt;Android 6.7.2 及以上版本 和 iOS 点击蒙层不会关闭模态弹窗，所以尽量避免使用「取消」分支中实现业务逻辑&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="showLoading">
                <parameters>
                    <parameter name="option" type="ShowLoadingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html"&gt;wx.showLoading(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示 loading 提示框。需主动调用 wx.hideLoading 才能关闭提示框&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showLoading({
  title: &amp;#39;加载中&amp;#39;,
})

setTimeout(function () {
  wx.hideLoading()
}, 2000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html"&gt;wx.showLoading&lt;/a&gt; 和 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html"&gt;wx.showToast&lt;/a&gt; 同时只能显示一个&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html"&gt;wx.showLoading&lt;/a&gt; 应与 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html"&gt;wx.hideLoading&lt;/a&gt; 配对使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showModal">
                <parameters>
                    <parameter name="option" type="ShowModalOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html"&gt;wx.showModal(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示模态对话框&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showModal({
  title: &amp;#39;提示&amp;#39;,
  content: &amp;#39;这是一个模态弹窗&amp;#39;,
  success (res) {
    if (res.confirm) {
      console.log(&amp;#39;用户点击确定&amp;#39;)
    } else if (res.cancel) {
      console.log(&amp;#39;用户点击取消&amp;#39;)
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 6.7.2 以下版本，点击取消或蒙层时，回调 fail, errMsg 为 &amp;quot;fail cancel&amp;quot;；&lt;/li&gt;
&lt;li&gt;Android 6.7.2 及以上版本 和 iOS 点击蒙层不会关闭模态弹窗，所以尽量避免使用「取消」分支中实现业务逻辑&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="showNavigationBarLoading">
                <parameters>
                    <parameter name="option" type="ShowNavigationBarLoadingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.showNavigationBarLoading.html"&gt;wx.showNavigationBarLoading(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在当前页面显示导航条加载动画&lt;/p&gt;
</description>
            </method>
            <method name="showShareMenu">
                <parameters>
                    <parameter name="option" type="ShowShareMenuOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.showShareMenu.html"&gt;wx.showShareMenu(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示当前页面的转发按钮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showShareMenu({
  withShareTicket: true
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showTabBar">
                <parameters>
                    <parameter name="option" type="ShowTabBarOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.showTabBar.html"&gt;wx.showTabBar(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示 tabBar&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showTabBarRedDot">
                <parameters>
                    <parameter name="option" type="ShowTabBarRedDotOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.showTabBarRedDot.html"&gt;wx.showTabBarRedDot(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示 tabBar 某一项的右上角的红点&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showToast">
                <parameters>
                    <parameter name="option" type="ShowToastOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html"&gt;wx.showToast(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示消息提示框&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showToast({
  title: &amp;#39;成功&amp;#39;,
  icon: &amp;#39;success&amp;#39;,
  duration: 2000
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html"&gt;wx.showLoading&lt;/a&gt; 和 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html"&gt;wx.showToast&lt;/a&gt; 同时只能显示一个&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html"&gt;wx.showToast&lt;/a&gt; 应与 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html"&gt;wx.hideToast&lt;/a&gt; 配对使用&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="startAccelerometer">
                <parameters>
                    <parameter name="option" type="StartAccelerometerOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.startAccelerometer.html"&gt;wx.startAccelerometer(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听加速度数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startAccelerometer({
  interval: &amp;#39;game&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据机型性能、当前 CPU 与内存的占用情况，&lt;code&gt;interval&lt;/code&gt; 的设置与实际 &lt;code&gt;wx.onAccelerometerChange()&lt;/code&gt; 回调函数的执行频率会有一些出入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startBeaconDiscovery">
                <parameters>
                    <parameter name="option" type="StartBeaconDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.startBeaconDiscovery.html"&gt;wx.startBeaconDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始搜索附近的 iBeacon 设备&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startBeaconDiscovery({
  success(res) { }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startBluetoothDevicesDiscovery">
                <parameters>
                    <parameter name="option" type="StartBluetoothDevicesDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.startBluetoothDevicesDiscovery.html"&gt;wx.startBluetoothDevicesDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始搜寻附近的蓝牙外围设备。&lt;strong&gt;此操作比较耗费系统资源，请在搜索并连接到设备后调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.stopBluetoothDevicesDiscovery.html"&gt;wx.stopBluetoothDevicesDiscovery&lt;/a&gt; 方法停止搜索。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 以微信硬件平台的蓝牙智能灯为例，主服务的 UUID 是 FEE7。传入这个参数，只搜索主服务 UUID 为 FEE7 的设备
wx.startBluetoothDevicesDiscovery({
  services: [&amp;#39;FEE7&amp;#39;],
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startCompass">
                <parameters>
                    <parameter name="option" type="StartCompassOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.startCompass.html"&gt;wx.startCompass(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听罗盘数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startCompass()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startDeviceMotionListening">
                <parameters>
                    <parameter name="option" type="StartDeviceMotionListeningOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.startDeviceMotionListening.html"&gt;wx.startDeviceMotionListening(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听设备方向的变化。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startGyroscope">
                <parameters>
                    <parameter name="option" type="StartGyroscopeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.startGyroscope.html"&gt;wx.startGyroscope(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听陀螺仪数据。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startHCE">
                <parameters>
                    <parameter name="option" type="StartHCEOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.startHCE.html"&gt;wx.startHCE(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化 NFC 模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startHCE({
  aid_list: [&amp;#39;F222222222&amp;#39;],
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startLocalServiceDiscovery">
                <parameters>
                    <parameter name="option" type="StartLocalServiceDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.startLocalServiceDiscovery.html"&gt;wx.startLocalServiceDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始搜索局域网下的 mDNS 服务。搜索的结果会通过 wx.onLocalService* 事件返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;wx.startLocalServiceDiscovery 是一个消耗性能的行为，开始 30 秒后会自动 stop 并执行 wx.onLocalServiceDiscoveryStop 注册的回调函数。&lt;/li&gt;
&lt;li&gt;在调用 wx.startLocalServiceDiscovery 后，在这次搜索行为停止后才能发起下次 wx.startLocalServiceDiscovery。停止本次搜索行为的操作包括调用 wx.stopLocalServiceDiscovery 和 30 秒后系统自动 stop 本次搜索。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startLocationUpdate">
                <parameters>
                    <parameter name="option" type="StartLocationUpdateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdate.html"&gt;wx.startLocationUpdate(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开启小程序进入前台时接收位置消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取位置信息需配置&lt;a href="(configuration/app#permission)"&gt;地理位置用途说明&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startLocationUpdateBackground">
                <parameters>
                    <parameter name="option" type="StartLocationUpdateBackgroundOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html"&gt;wx.startLocationUpdateBackground(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开启小程序进入前后台时均接收位置消息，需引导用户开启&lt;a href="(open-ability/authorize#%E5%90%8E%E5%8F%B0%E5%AE%9A%E4%BD%8D)"&gt;授权&lt;/a&gt;。授权以后，小程序在运行中或进入后台均可接受位置消息变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安卓微信7.0.6版本，iOS 7.0.5版本起支持该接口&lt;/li&gt;
&lt;li&gt;需在app.json中配置requireBackgroundModes: [&amp;#39;location&amp;#39;]后使用&lt;/li&gt;
&lt;li&gt;获取位置信息需配置&lt;a href="(configuration/app#permission)"&gt;地理位置用途说明&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startPullDownRefresh">
                <parameters>
                    <parameter name="option" type="StartPullDownRefreshOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.startPullDownRefresh.html"&gt;wx.startPullDownRefresh(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始下拉刷新。调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startPullDownRefresh()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startRecord">
                <parameters>
                    <parameter name="option" type="WxStartRecordOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.startRecord.html"&gt;wx.startRecord(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始录音。当主动调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.stopRecord.html"&gt;wx.stopRecord&lt;/a&gt;，或者录音超过1分钟时自动结束录音。当用户离开小程序时，此接口无法调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
  }
})
setTimeout(function () {
  wx.stopRecord() // 结束录音
}, 10000)&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="startSoterAuthentication">
                <parameters>
                    <parameter name="option" type="StartSoterAuthenticationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.startSoterAuthentication.html"&gt;wx.startSoterAuthentication(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始 SOTER 生物认证。验证流程请参考&lt;a href="(open-ability/bio-auth)"&gt;说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;resultJSON 说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此数据为设备TEE中，将传入的challenge和TEE内其他安全信息组成的数据进行组装而来的JSON，对下述字段的解释如下表。例子如下：
| 字段名  | 说明                                                                                      |
|---------|-------------------------------------------------------------------------------------------|
| raw     | 调用者传入的challenge                                                                     |
| fid     | （仅Android支持）本次生物识别认证的生物信息编号（如指纹识别则是指纹信息在本设备内部编号） |
| counter | 防重放特征参数                                                                            |
| tee_n   | TEE名称（如高通或者trustonic等）                                                          |
| tee_v   | TEE版本号                                                                                 |
| fp_n    | 指纹以及相关逻辑模块提供商（如FPC等）                                                     |
| fp_v    | 指纹以及相关模块版本号                                                                    |
| cpu_id  | 机器唯一识别ID                                                                            |
| uid     | 概念同Android系统定义uid，即应用程序编号                                                  |&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;raw&amp;quot;:&amp;quot;msg&amp;quot;,
  &amp;quot;fid&amp;quot;:&amp;quot;2&amp;quot;,
  &amp;quot;counter&amp;quot;:123,
  &amp;quot;tee_n&amp;quot;:&amp;quot;TEE Name&amp;quot;,
  &amp;quot;tee_v&amp;quot;:&amp;quot;TEE Version&amp;quot;,
  &amp;quot;fp_n&amp;quot;:&amp;quot;Fingerprint Sensor Name&amp;quot;,
  &amp;quot;fp_v&amp;quot;:&amp;quot;Fingerprint Sensor Version&amp;quot;,
  &amp;quot;cpu_id&amp;quot;:&amp;quot;CPU Id&amp;quot;,
  &amp;quot;uid&amp;quot;:&amp;quot;21&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;q3tCKkmJ7g2e&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startSoterAuthentication({
   requestAuthModes: [&amp;#39;fingerPrint&amp;#39;],
   challenge: &amp;#39;123456&amp;#39;,
   authContent: &amp;#39;请用指纹解锁&amp;#39;,
   success(res) {
   }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startWifi">
                <parameters>
                    <parameter name="option" type="StartWifiOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.startWifi.html"&gt;wx.startWifi(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化 Wi-Fi 模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;8P7zrkmd7r2n&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startWifi({
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopAccelerometer">
                <parameters>
                    <parameter name="option" type="StopAccelerometerOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.stopAccelerometer.html"&gt;wx.stopAccelerometer(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听加速度数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopAccelerometer()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopBackgroundAudio">
                <parameters>
                    <parameter name="option" type="StopBackgroundAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.stopBackgroundAudio.html"&gt;wx.stopBackgroundAudio(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止播放音乐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopBackgroundAudio()&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="stopBeaconDiscovery">
                <parameters>
                    <parameter name="option" type="StopBeaconDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.stopBeaconDiscovery.html"&gt;wx.stopBeaconDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止搜索附近的 iBeacon 设备&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopBluetoothDevicesDiscovery">
                <parameters>
                    <parameter name="option" type="StopBluetoothDevicesDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.stopBluetoothDevicesDiscovery.html"&gt;wx.stopBluetoothDevicesDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopBluetoothDevicesDiscovery({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopCompass">
                <parameters>
                    <parameter name="option" type="StopCompassOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.stopCompass.html"&gt;wx.stopCompass(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听罗盘数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopCompass()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopDeviceMotionListening">
                <parameters>
                    <parameter name="option" type="StopDeviceMotionListeningOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.stopDeviceMotionListening.html"&gt;wx.stopDeviceMotionListening(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听设备方向的变化。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopGyroscope">
                <parameters>
                    <parameter name="option" type="StopGyroscopeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.stopGyroscope.html"&gt;wx.stopGyroscope(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听陀螺仪数据。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopHCE">
                <parameters>
                    <parameter name="option" type="StopHCEOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.stopHCE.html"&gt;wx.stopHCE(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭 NFC 模块。仅在安卓系统下有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopHCE({
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopLocalServiceDiscovery">
                <parameters>
                    <parameter name="option" type="StopLocalServiceDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.stopLocalServiceDiscovery.html"&gt;wx.stopLocalServiceDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止搜索 mDNS 服务&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopLocationUpdate">
                <parameters>
                    <parameter name="option" type="StopLocationUpdateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.stopLocationUpdate.html"&gt;wx.stopLocationUpdate(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭监听实时位置变化，前后台都停止消息接收&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopPullDownRefresh">
                <parameters>
                    <parameter name="option" type="StopPullDownRefreshOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.stopPullDownRefresh.html"&gt;wx.stopPullDownRefresh(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止当前页面下拉刷新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Page({
  onPullDownRefresh () {
    wx.stopPullDownRefresh()
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopRecord">
                <parameters>
                    <parameter name="option" type="WxStopRecordOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.stopRecord.html"&gt;wx.stopRecord(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止录音。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
  }
})
setTimeout(function () {
  wx.stopRecord() // 结束录音
}, 10000)&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="stopVoice">
                <parameters>
                    <parameter name="option" type="StopVoiceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.stopVoice.html"&gt;wx.stopVoice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;结束播放语音。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
    wx.playVoice({
      filePath: tempFilePath,
    })

    setTimeout(() =&amp;gt; { wx.stopVoice() }, 5000)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="stopWifi">
                <parameters>
                    <parameter name="option" type="StopWifiOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.stopWifi.html"&gt;wx.stopWifi(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭 Wi-Fi 模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopWifi({
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="switchTab">
                <parameters>
                    <parameter name="option" type="SwitchTabOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html"&gt;wx.switchTab(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;tabBar&amp;quot;: {
    &amp;quot;list&amp;quot;: [{
      &amp;quot;pagePath&amp;quot;: &amp;quot;index&amp;quot;,
      &amp;quot;text&amp;quot;: &amp;quot;首页&amp;quot;
    },{
      &amp;quot;pagePath&amp;quot;: &amp;quot;other&amp;quot;,
      &amp;quot;text&amp;quot;: &amp;quot;其他&amp;quot;
    }]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.switchTab({
  url: &amp;#39;/index&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="updateShareMenu">
                <parameters>
                    <parameter name="option" type="UpdateShareMenuOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.updateShareMenu.html"&gt;wx.updateShareMenu(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更新转发属性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.updateShareMenu({
  withShareTicket: true,
  success () { }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="vibrateLong">
                <parameters>
                    <parameter name="option" type="VibrateLongOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html"&gt;wx.vibrateLong(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使手机发生较长时间的振动（400 ms)&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="vibrateShort">
                <parameters>
                    <parameter name="option" type="VibrateShortOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateShort.html"&gt;wx.vibrateShort(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使手机发生较短时间的振动（15 ms）。仅在 iPhone &lt;code&gt;7 / 7 Plus&lt;/code&gt; 以上及 Android 机型生效&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="writeBLECharacteristicValue">
                <parameters>
                    <parameter name="option" type="WriteBLECharacteristicValueOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.writeBLECharacteristicValue.html"&gt;wx.writeBLECharacteristicValue(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持 write 才可以成功调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行调用多次会存在写失败的可能性。&lt;/li&gt;
&lt;li&gt;小程序不会对写入数据包大小做限制，但系统与蓝牙设备会限制蓝牙4.0单次传输的数据大小，超过最大字节数后会发生写入错误，建议每次写入不超过20字节。&lt;/li&gt;
&lt;li&gt;若单次写入数据过长，iOS 上存在系统不会有任何回调的情况（包括错误回调）。&lt;/li&gt;
&lt;li&gt;安卓平台上，在调用 &lt;code&gt;notifyBLECharacteristicValueChange&lt;/code&gt; 成功后立即调用 &lt;code&gt;writeBLECharacteristicValue&lt;/code&gt; 接口，在部分机型上会发生 10008 系统错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 向蓝牙设备发送一个0x00的16进制数据
let buffer = new ArrayBuffer(1)
let dataView = new DataView(buffer)
dataView.setUint8(0, 0)

wx.writeBLECharacteristicValue({
  // 这里的 deviceId 需要在 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
  deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId,
  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
  characteristicId,
  // 这里的value是ArrayBuffer类型
  value: buffer,
  success (res) {
    console.log(&amp;#39;writeBLECharacteristicValue success&amp;#39;, res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="cloud" type="WxCloud">
                <description></description>
            </property>
            <property name="env" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="Component" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="Property" superclass="None">
        <methods/>
        <properties>
            <property name="properties" type="P">
                <description>&lt;p&gt;组件的对外属性，是属性名到属性设置的映射表&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Method" superclass="None">
        <methods/>
        <properties>
            <property name="methods" type="M">
                <description>&lt;p&gt;object组件的方法，包括事件响应函数和任意的自定义方法，关于事件响应函数的使用，参见 &lt;a href="events.md"&gt;组件事件&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="FullProperty" superclass="None">
        <methods>
            <method name="observer">
                <parameters>
                    <parameter name="newVal" type="ValueType"/>
                    <parameter name="oldVal" type="ValueType"/>
                    <parameter name="changedPath" type="Array"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;属性值被更改时的响应函数&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="type" type="T">
                <description>&lt;p&gt;属性类型&lt;/p&gt;
</description>
            </property>
            <property name="value" type="ValueType">
                <description>&lt;p&gt;属性初始值&lt;/p&gt;
</description>
            </property>
            <property name="optionalTypes" type="None">
                <description>&lt;p&gt;属性的类型（可以指定多个）&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="InstanceMethods" superclass="None">
        <methods>
            <method name="setData">
                <parameters>
                    <parameter name="data" type="None"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;code&gt;setData&lt;/code&gt; 函数用于将数据从逻辑层发送到视图层
（异步），同时改变对应的 &lt;code&gt;this.data&lt;/code&gt; 的值（同步）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;仅支持设置可 JSON 化的数据。&lt;/li&gt;
&lt;li&gt;单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。&lt;/li&gt;
&lt;li&gt;请不要把 data 中任何一项的 value 设为 &lt;code&gt;undefined&lt;/code&gt; ，否则这一项将不被设置并可能遗留一些潜在问题。&lt;/li&gt;
&lt;/ol&gt;
</description>
            </method>
            <method name="hasBehavior">
                <parameters>
                    <parameter name="behavior" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;检查组件是否具有 &lt;code&gt;behavior&lt;/code&gt; （检查时会递归检查被直接或间接引入的所有behavior）&lt;/p&gt;
</description>
            </method>
            <method name="triggerEvent">
                <parameters>
                    <parameter name="name" type="String"/>
                    <parameter name="detail" type="None"/>
                    <parameter name="options" type="TriggerEventOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;触发事件，参见组件事件&lt;/p&gt;
</description>
            </method>
            <method name="createSelectorQuery">
                <parameters/>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;创建一个 SelectorQuery 对象，选择器选取范围为这个组件实例内&lt;/p&gt;
</description>
            </method>
            <method name="createIntersectionObserver">
                <parameters>
                    <parameter name="options" type="CreateIntersectionObserverOption"/>
                </parameters>
                <return-types>
                    <return-type type="IntersectionObserver"/>
                </return-types>
                <description>&lt;p&gt;创建一个 IntersectionObserver 对象，选择器选取范围为这个组件实例内&lt;/p&gt;
</description>
            </method>
            <method name="selectComponent">
                <parameters>
                    <parameter name="selector" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="TrivialInstance"/>
                </return-types>
                <description>&lt;p&gt;使用选择器选择组件实例节点，返回匹配到的第一个组件实例对象（会被 &lt;code&gt;wx://component-export&lt;/code&gt; 影响）&lt;/p&gt;
</description>
            </method>
            <method name="selectAllComponents">
                <parameters>
                    <parameter name="selector" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description>&lt;p&gt;使用选择器选择组件实例节点，返回匹配到的全部组件实例对象组成的数组&lt;/p&gt;
</description>
            </method>
            <method name="getRelationNodes">
                <parameters>
                    <parameter name="relationKey" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description>&lt;p&gt;获取这个关系所对应的所有关联节点，参见 组件间关系&lt;/p&gt;
</description>
            </method>
            <method name="groupSetData">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;立刻执行 callback ，其中的多个 setData 之间不会触发界面绘制（只有某些特殊场景中需要，如用于在不同组件同时 setData 时进行界面绘制同步）&lt;/p&gt;
</description>
            </method>
            <method name="getTabBar">
                <parameters/>
                <return-types>
                    <return-type type="TrivialInstance"/>
                </return-types>
                <description>&lt;p&gt;返回当前页面的 custom-tab-bar 的组件实例&lt;/p&gt;
</description>
            </method>
            <method name="getPageId">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;返回页面标识符（一个字符串），可以用来判断几个自定义组件实例是不是在同一个页面内&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="ComponentOptions" superclass="None">
        <methods/>
        <properties>
            <property name="multipleSlots" type="Boolean">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html#%E7%BB%84%E4%BB%B6wxml%E7%9A%84slot"&gt;启用多slot支持&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="addGlobalClass" type="Boolean">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB"&gt;组件样式隔离&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="styleIsolation" type="None">
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB"&gt;组件样式隔离&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="TriggerEventOption" superclass="None">
        <methods/>
        <properties>
            <property name="bubbles" type="Boolean">
                <description>&lt;p&gt;事件是否冒泡&lt;/p&gt;
&lt;p&gt;默认值： &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="composed" type="Boolean">
                <description>&lt;p&gt;事件是否可以穿越组件边界，为false时，事件将只能在引用组件的节点树上触发，不进入其他任何组件内部&lt;/p&gt;
&lt;p&gt;默认值： &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
            <property name="capturePhase" type="Boolean">
                <description>&lt;p&gt;事件是否拥有捕获阶段&lt;/p&gt;
&lt;p&gt;默认值： &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="RelationOption" superclass="None">
        <methods>
            <method name="linked">
                <parameters>
                    <parameter name="target" type="TrivialInstance"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;关系生命周期函数，当关系被建立在页面节点树中时触发，触发时机在组件attached生命周期之后&lt;/p&gt;
</description>
            </method>
            <method name="linkChanged">
                <parameters>
                    <parameter name="target" type="TrivialInstance"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;关系生命周期函数，当关系在页面节点树中发生改变时触发，触发时机在组件moved生命周期之后&lt;/p&gt;
</description>
            </method>
            <method name="unlinked">
                <parameters>
                    <parameter name="target" type="TrivialInstance"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;关系生命周期函数，当关系脱离页面节点树时触发，触发时机在组件detached生命周期之后&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="type" type="None">
                <description>&lt;p&gt;目标组件的相对关系&lt;/p&gt;
</description>
            </property>
            <property name="target" type="String">
                <description>&lt;p&gt;如果这一项被设置，则它表示关联的目标节点所应具有的behavior，所有拥有这一behavior的组件节点都会被关联&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="PageLifetimes" superclass="None">
        <methods>
            <method name="show">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;页面生命周期回调—监听页面显示&lt;/p&gt;
&lt;p&gt;页面显示/切入前台时触发。&lt;/p&gt;
</description>
            </method>
            <method name="hide">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;页面生命周期回调—监听页面隐藏&lt;/p&gt;
&lt;p&gt;页面隐藏/切入后台时触发。 如 &lt;code&gt;navigateTo&lt;/code&gt; 或底部 &lt;code&gt;tab&lt;/code&gt; 切换到其他页面，小程序切入后台等。&lt;/p&gt;
</description>
            </method>
            <method name="resize">
                <parameters>
                    <parameter name="size" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;页面生命周期回调—监听页面尺寸变化&lt;/p&gt;
&lt;p&gt;所在页面尺寸变化时执行&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="Lifetimes" superclass="None">
        <methods>
            <method name="created">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="attached">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="ready">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="moved">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="detached">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="error">
                <parameters>
                    <parameter name="err" type="Error"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="lifetimes" type="Partial">
                <description>&lt;p&gt;组件生命周期声明对象，组件的生命周期：&lt;code&gt;created&lt;/code&gt;、&lt;code&gt;attached&lt;/code&gt;、&lt;code&gt;ready&lt;/code&gt;、&lt;code&gt;moved&lt;/code&gt;、&lt;code&gt;detached&lt;/code&gt; 将收归到 &lt;code&gt;lifetimes&lt;/code&gt; 字段内进行声明，原有声明方式仍旧有效，如同时存在两种声明方式，则 &lt;code&gt;lifetimes&lt;/code&gt; 字段内声明方式优先级最高&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.2.3&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="OtherOption" superclass="None">
        <methods/>
        <properties>
            <property name="behaviors" type="None">
                <description>&lt;p&gt;类似于mixins和traits的组件间代码复用机制，参见 &lt;a href="behaviors.md"&gt;behaviors&lt;/a&gt;&lt;/p&gt;
</description>
            </property>
            <property name="definitionFilter" type="DefinitionFilter">
                <description>&lt;p&gt;定义段过滤器，用于自定义组件扩展，参见 &lt;a href="extend.md"&gt;自定义组件扩展&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.2.3&lt;/code&gt;&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="Behavior" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="getApp" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="console" superclass="None">
        <methods>
            <method name="debug">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.debug.html"&gt;console.debug()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 debug 日志&lt;/p&gt;
</description>
            </method>
            <method name="error">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.error.html"&gt;console.error()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 error 日志&lt;/p&gt;
</description>
            </method>
            <method name="group">
                <parameters>
                    <parameter name="label" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.group.html"&gt;console.group(string label)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在调试面板中创建一个新的分组。随后输出的内容都会被添加一个缩进，表示该内容属于当前分组。调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.groupEnd.html"&gt;console.groupEnd&lt;/a&gt;之后分组结束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅在工具中有效，在 vConsole 中为空函数实现。&lt;/p&gt;
</description>
            </method>
            <method name="groupEnd">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.groupEnd.html"&gt;console.groupEnd()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;结束由 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.group.html"&gt;console.group&lt;/a&gt; 创建的分组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅在工具中有效，在 vConsole 中为空函数实现。&lt;/p&gt;
</description>
            </method>
            <method name="info">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.info.html"&gt;console.info()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 info 日志&lt;/p&gt;
</description>
            </method>
            <method name="log">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.log.html"&gt;console.log()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 log 日志&lt;/p&gt;
</description>
            </method>
            <method name="warn">
                <parameters>
                    <parameter name="args" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/console.warn.html"&gt;console.warn()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向调试面板中打印 warn 日志&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="wx" superclass="None">
        <methods>
            <method name="base64ToArrayBuffer">
                <parameters>
                    <parameter name="base64" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="ArrayBuffer"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.base64ToArrayBuffer.html"&gt;ArrayBuffer wx.base64ToArrayBuffer(string base64)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将 Base64 字符串转成 ArrayBuffer 对象&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getAccountInfoSync">
                <parameters/>
                <return-types>
                    <return-type type="AccountInfo"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/account-info/wx.getAccountInfoSync.html"&gt;Object wx.getAccountInfoSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前帐号信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const accountInfo = wx.getAccountInfoSync();
console.log(accountInfo.miniProgram.appId) // 小程序 appId
console.log(accountInfo.plugin.appId) // 插件 appId
console.log(accountInfo.plugin.version) // 插件版本号， &amp;#39;a.b.c&amp;#39; 这样的形式&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.2.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBatteryInfoSync">
                <parameters/>
                <return-types>
                    <return-type type="GetBatteryInfoSyncResult"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfoSync.html"&gt;Object wx.getBatteryInfoSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfo.html"&gt;wx.getBatteryInfo&lt;/a&gt; 的同步版本&lt;/p&gt;
</description>
            </method>
            <method name="getExtConfigSync">
                <parameters/>
                <return-types>
                    <return-type type="ExtInfo"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html"&gt;Object wx.getExtConfigSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html"&gt;wx.getExtConfig&lt;/a&gt; 的同步版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本接口暂时无法通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html"&gt;wx.canIUse&lt;/a&gt; 判断是否兼容，开发者需要自行判断 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfigSync.html"&gt;wx.getExtConfigSync&lt;/a&gt; 是否存在来兼容&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;let extConfig = wx.getExtConfigSync? wx.getExtConfigSync(): {}
console.log(extConfig)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getLaunchOptionsSync">
                <parameters/>
                <return-types>
                    <return-type type="LaunchOptionsApp"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html"&gt;Object wx.getLaunchOptionsSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取小程序启动时的参数。与 &lt;a href="(App#onlaunchobject-object)"&gt;&lt;code&gt;App.onLaunch&lt;/code&gt;&lt;/a&gt; 的回调参数一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回有效 referrerInfo 的场景&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景值&lt;/th&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;appId含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1020&lt;/td&gt;
&lt;td&gt;公众号 profile 页相关小程序列表&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1035&lt;/td&gt;
&lt;td&gt;公众号自定义菜单&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1036&lt;/td&gt;
&lt;td&gt;App 分享消息卡片&lt;/td&gt;
&lt;td&gt;来源App&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1037&lt;/td&gt;
&lt;td&gt;小程序打开小程序&lt;/td&gt;
&lt;td&gt;来源小程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1038&lt;/td&gt;
&lt;td&gt;从另一个小程序返回&lt;/td&gt;
&lt;td&gt;来源小程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1043&lt;/td&gt;
&lt;td&gt;公众号模板消息&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;部分版本在无&lt;code&gt;referrerInfo&lt;/code&gt;的时候会返回 &lt;code&gt;undefined&lt;/code&gt;，建议使用 &lt;code&gt;options.referrerInfo &amp;amp;&amp;amp; options.referrerInfo.appId&lt;/code&gt; 进行判断。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getMenuButtonBoundingClientRect">
                <parameters/>
                <return-types>
                    <return-type type="Rect"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/menu/wx.getMenuButtonBoundingClientRect.html"&gt;Object wx.getMenuButtonBoundingClientRect()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取菜单按钮（右上角胶囊按钮）的布局位置信息。坐标信息以屏幕左上角为原点。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getStorageInfoSync">
                <parameters/>
                <return-types>
                    <return-type type="GetStorageInfoSyncOption"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfoSync.html"&gt;Object wx.getStorageInfoSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfo.html"&gt;wx.getStorageInfo&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getStorageInfo({
  success (res) {
    console.log(res.keys)
    console.log(res.currentSize)
    console.log(res.limitSize)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  const res = wx.getStorageInfoSync()
  console.log(res.keys)
  console.log(res.currentSize)
  console.log(res.limitSize)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getSystemInfoSync">
                <parameters/>
                <return-types>
                    <return-type type="GetSystemInfoSyncResult"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfoSync.html"&gt;Object wx.getSystemInfoSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html"&gt;wx.getSystemInfo&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSystemInfo({
  success (res) {
    console.log(res.model)
    console.log(res.pixelRatio)
    console.log(res.windowWidth)
    console.log(res.windowHeight)
    console.log(res.language)
    console.log(res.version)
    console.log(res.platform)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  const res = wx.getSystemInfoSync()
  console.log(res.model)
  console.log(res.pixelRatio)
  console.log(res.windowWidth)
  console.log(res.windowHeight)
  console.log(res.language)
  console.log(res.version)
  console.log(res.platform)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="createAnimation">
                <parameters>
                    <parameter name="option" type="CreateAnimationOption"/>
                </parameters>
                <return-types>
                    <return-type type="Animation"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/wx.createAnimation.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;Animation&lt;/a&gt; wx.createAnimation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个动画实例 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/animation/Animation.html"&gt;animation&lt;/a&gt;。调用实例的方法来描述动画。最后通过动画实例的 export 方法导出动画数据传递给组件的 animation 属性。&lt;/p&gt;
</description>
            </method>
            <method name="createAudioContext">
                <parameters>
                    <parameter name="id" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="AudioContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createAudioContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.html"&gt;AudioContext&lt;/a&gt; wx.createAudioContext(string id, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(audio)"&gt;audio&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/AudioContext.html"&gt;AudioContext&lt;/a&gt; 对象。&lt;/p&gt;
</description>
            </method>
            <method name="getBackgroundAudioManager">
                <parameters/>
                <return-types>
                    <return-type type="BackgroundAudioManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html"&gt;BackgroundAudioManager&lt;/a&gt; wx.getBackgroundAudioManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取&lt;strong&gt;全局唯一&lt;/strong&gt;的背景音频管理器。
小程序切入后台，如果音频处于播放状态，可以继续播放。但是后台状态不能通过调用API操纵音频的播放状态。&lt;/p&gt;
&lt;p&gt;从微信客户端6.7.2版本开始，若需要在小程序切后台后继续播放音频，需要在 &lt;a href="(configuration/app)"&gt;app.json&lt;/a&gt; 中配置 &lt;code&gt;requiredBackgroundModes&lt;/code&gt; 属性。开发版和体验版上可以直接生效，正式版还需通过审核。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createCameraContext">
                <parameters/>
                <return-types>
                    <return-type type="CameraContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/wx.createCameraContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.html"&gt;CameraContext&lt;/a&gt; wx.createCameraContext()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(camera)"&gt;camera&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/camera/CameraContext.html"&gt;CameraContext&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createCanvasContext">
                <parameters>
                    <parameter name="canvasId" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="CanvasContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createCanvasContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html"&gt;CanvasContext&lt;/a&gt; wx.createCanvasContext(string canvasId, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 canvas 的绘图上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.html"&gt;CanvasContext&lt;/a&gt; 对象&lt;/p&gt;
</description>
            </method>
            <method name="downloadFile">
                <parameters>
                    <parameter name="option" type="DownloadFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="DownloadTask"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/wx.downloadFile.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/download/DownloadTask.html"&gt;DownloadTask&lt;/a&gt; wx.downloadFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载文件资源到本地。客户端直接发起一个 HTTPS GET 请求，返回文件的本地临时路径，单次下载允许的最大文件为 50MB。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注意：请在服务端响应的 header 中指定合理的 &lt;code&gt;Content-Type&lt;/code&gt; 字段，以保证客户端正确处理文件类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.downloadFile({
  url: &amp;#39;https://example.com/audio/123&amp;#39;, //仅为示例，并非真实的资源
  success (res) {
    // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
    if (res.statusCode === 200) {
      wx.playVoice({
        filePath: res.tempFilePath
      })
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getFileSystemManager">
                <parameters/>
                <return-types>
                    <return-type type="FileSystemManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileSystemManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/FileSystemManager.html"&gt;FileSystemManager&lt;/a&gt; wx.getFileSystemManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取全局唯一的文件管理器&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.9&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createInnerAudioContext">
                <parameters/>
                <return-types>
                    <return-type type="InnerAudioContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.createInnerAudioContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html"&gt;InnerAudioContext&lt;/a&gt; wx.createInnerAudioContext()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建内部 &lt;a href="(audio)"&gt;audio&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html"&gt;InnerAudioContext&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createIntersectionObserver">
                <parameters>
                    <parameter name="component" type="IAnyObject"/>
                    <parameter name="options" type="CreateIntersectionObserverOption"/>
                </parameters>
                <return-types>
                    <return-type type="IntersectionObserver"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createIntersectionObserver.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.html"&gt;IntersectionObserver&lt;/a&gt; wx.createIntersectionObserver(Object component, Object options)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建并返回一个 IntersectionObserver 对象实例。在自定义组件或包含自定义组件的页面中，应使用 &lt;code&gt;this.createIntersectionObserver([options])&lt;/code&gt; 来代替。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;LAbMxkmI7F2A&amp;#39;) %}&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.3&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createInterstitialAd">
                <parameters>
                    <parameter name="option" type="CreateInterstitialAdOption"/>
                </parameters>
                <return-types>
                    <return-type type="InterstitialAd"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/wx.createInterstitialAd.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/InterstitialAd.html"&gt;InterstitialAd&lt;/a&gt; wx.createInterstitialAd(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建插屏广告组件。请通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfoSync.html"&gt;wx.getSystemInfoSync()&lt;/a&gt; 返回对象的 SDKVersion 判断基础库版本号后再使用该 API。每次调用该方法创建插屏广告都会返回一个全新的实例（小程序端的插屏广告实例不允许跨页面使用）。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createLivePlayerContext">
                <parameters>
                    <parameter name="id" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="LivePlayerContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/wx.createLivePlayerContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html"&gt;LivePlayerContext&lt;/a&gt; wx.createLivePlayerContext(string id, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(live-player)"&gt;live-player&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePlayerContext.html"&gt;LivePlayerContext&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createLivePusherContext">
                <parameters/>
                <return-types>
                    <return-type type="LivePusherContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/wx.createLivePusherContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.html"&gt;LivePusherContext&lt;/a&gt; wx.createLivePusherContext()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(live-pusher)"&gt;live-pusher&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/live/LivePusherContext.html"&gt;LivePusherContext&lt;/a&gt; 对象。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getLogManager">
                <parameters>
                    <parameter name="option" type="GetLogManagerOption"/>
                </parameters>
                <return-types>
                    <return-type type="LogManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.getLogManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/LogManager.html"&gt;LogManager&lt;/a&gt; wx.getLogManager(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取日志管理器对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const logger = wx.getLogManager({level: 1})
logger.log({str: &amp;#39;hello world&amp;#39;}, &amp;#39;basic log&amp;#39;, 100, [1, 2, 3])
logger.info({str: &amp;#39;hello world&amp;#39;}, &amp;#39;info log&amp;#39;, 100, [1, 2, 3])
logger.debug({str: &amp;#39;hello world&amp;#39;}, &amp;#39;debug log&amp;#39;, 100, [1, 2, 3])
logger.warn({str: &amp;#39;hello world&amp;#39;}, &amp;#39;warn log&amp;#39;, 100, [1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createMapContext">
                <parameters>
                    <parameter name="mapId" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="MapContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/wx.createMapContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html"&gt;MapContext&lt;/a&gt; wx.createMapContext(string mapId, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(map)"&gt;map&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/map/MapContext.html"&gt;MapContext&lt;/a&gt; 对象。&lt;/p&gt;
</description>
            </method>
            <method name="createOffscreenCanvas">
                <parameters/>
                <return-types>
                    <return-type type="OffscreenCanvas"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createOffscreenCanvas.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/OffscreenCanvas.html"&gt;OffscreenCanvas&lt;/a&gt; wx.createOffscreenCanvas()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建离屏 canvas 实例&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getRealtimeLogManager">
                <parameters/>
                <return-types>
                    <return-type type="RealtimeLogManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.getRealtimeLogManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/RealtimeLogManager.html"&gt;RealtimeLogManager&lt;/a&gt; wx.getRealtimeLogManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取实时日志管理器对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const logger = wx.getRealtimeLogManager()
logger.info({str: &amp;#39;hello world&amp;#39;}, &amp;#39;info log&amp;#39;, 100, [1, 2, 3])
logger.error({str: &amp;#39;hello world&amp;#39;}, &amp;#39;error log&amp;#39;, 100, [1, 2, 3])
logger.warn({str: &amp;#39;hello world&amp;#39;}, &amp;#39;warn log&amp;#39;, 100, [1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getRecorderManager">
                <parameters/>
                <return-types>
                    <return-type type="RecorderManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.getRecorderManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/RecorderManager.html"&gt;RecorderManager&lt;/a&gt; wx.getRecorderManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取&lt;strong&gt;全局唯一&lt;/strong&gt;的录音管理器 RecorderManager&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="request">
                <parameters>
                    <parameter name="option" type="RequestOption"/>
                </parameters>
                <return-types>
                    <return-type type="RequestTask"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/RequestTask.html"&gt;RequestTask&lt;/a&gt; wx.request(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发起 HTTPS 网络请求。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data 参数说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String 。转换规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;GET&lt;/code&gt; 方法的数据，会将数据转换成 query string（&lt;code&gt;encodeURIComponent(k)=encodeURIComponent(v)&amp;amp;encodeURIComponent(k)=encodeURIComponent(v)...&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;POST&lt;/code&gt; 方法且 &lt;code&gt;header[&amp;#39;content-type&amp;#39;]&lt;/code&gt; 为 &lt;code&gt;application/json&lt;/code&gt; 的数据，会对数据进行 JSON 序列化&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;POST&lt;/code&gt; 方法且 &lt;code&gt;header[&amp;#39;content-type&amp;#39;]&lt;/code&gt; 为 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 的数据，会将数据转换成 query string &lt;code&gt;（encodeURIComponent(k)=encodeURIComponent(v)&amp;amp;encodeURIComponent(k)=encodeURIComponent(v)...）&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.request({
  url: &amp;#39;test.php&amp;#39;, //仅为示例，并非真实的接口地址
  data: {
    x: &amp;#39;&amp;#39;,
    y: &amp;#39;&amp;#39;
  },
  header: {
    &amp;#39;content-type&amp;#39;: &amp;#39;application/json&amp;#39; // 默认值
  },
  success (res) {
    console.log(res.data)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="createRewardedVideoAd">
                <parameters>
                    <parameter name="option" type="CreateRewardedVideoAdOption"/>
                </parameters>
                <return-types>
                    <return-type type="RewardedVideoAd"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/wx.createRewardedVideoAd.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ad/RewardedVideoAd.html"&gt;RewardedVideoAd&lt;/a&gt; wx.createRewardedVideoAd(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建激励视频广告组件。请通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfoSync.html"&gt;wx.getSystemInfoSync()&lt;/a&gt; 返回对象的 SDKVersion 判断基础库版本号后再使用该 API（小游戏端要求 &amp;gt;= 2.0.4， 小程序端要求 &amp;gt;= 2.6.0）。调用该方法创建的激励视频广告是一个单例（小游戏端是全局单例，小程序端是页面内单例，在小程序端的单例对象不允许跨页面使用）。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.0.4&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createSelectorQuery">
                <parameters/>
                <return-types>
                    <return-type type="SelectorQuery"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html"&gt;SelectorQuery&lt;/a&gt; wx.createSelectorQuery()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;返回一个 SelectorQuery 对象实例。在自定义组件或包含自定义组件的页面中，应使用 &lt;code&gt;this.createSelectorQuery()&lt;/code&gt; 来代替。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const query = wx.createSelectorQuery()
query.select(&amp;#39;#the-id&amp;#39;).boundingClientRect()
query.selectViewport().scrollOffset()
query.exec(function(res){
  res[0].top       // #the-id节点的上边界坐标
  res[1].scrollTop // 显示区域的竖直滚动位置
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="connectSocket">
                <parameters>
                    <parameter name="option" type="ConnectSocketOption"/>
                </parameters>
                <return-types>
                    <return-type type="SocketTask"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.connectSocket.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/SocketTask.html"&gt;SocketTask&lt;/a&gt; wx.connectSocket(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个 WebSocket 连接。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并发数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.7.0 及以上版本，最多可以同时存在 5 个 WebSocket 连接。&lt;/li&gt;
&lt;li&gt;1.7.0 以下版本，一个小程序同时只能有一个 WebSocket 连接，如果当前已存在一个 WebSocket 连接，会自动关闭该连接，并重新创建一个 WebSocket 连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.connectSocket({
  url: &amp;#39;wss://example.qq.com&amp;#39;,
  header:{
    &amp;#39;content-type&amp;#39;: &amp;#39;application/json&amp;#39;
  },
  protocols: [&amp;#39;protocol1&amp;#39;]
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="createUDPSocket">
                <parameters/>
                <return-types>
                    <return-type type="UDPSocket"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/wx.createUDPSocket.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/udp/UDPSocket.html"&gt;UDPSocket&lt;/a&gt; wx.createUDPSocket()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个 UDP Socket 实例。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getUpdateManager">
                <parameters/>
                <return-types>
                    <return-type type="UpdateManager"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/update/UpdateManager.html"&gt;UpdateManager&lt;/a&gt; wx.getUpdateManager()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取&lt;strong&gt;全局唯一&lt;/strong&gt;的版本更新管理器，用于管理小程序更新。关于小程序的更新机制，可以查看&lt;a href="(operating-mechanism)"&gt;运行机制&lt;/a&gt;文档。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="uploadFile">
                <parameters>
                    <parameter name="option" type="UploadFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="UploadTask"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/wx.uploadFile.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/upload/UploadTask.html"&gt;UploadTask&lt;/a&gt; wx.uploadFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将本地资源上传到服务器。客户端发起一个 HTTPS POST 请求，其中 &lt;code&gt;content-type&lt;/code&gt; 为 &lt;code&gt;multipart/form-data&lt;/code&gt;。使用前请注意阅读&lt;a href="(network)"&gt;相关说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseImage({
  success (res) {
    const tempFilePaths = res.tempFilePaths
    wx.uploadFile({
      url: &amp;#39;https://example.weixin.qq.com/upload&amp;#39;, //仅为示例，非真实的接口地址
      filePath: tempFilePaths[0],
      name: &amp;#39;file&amp;#39;,
      formData: {
        &amp;#39;user&amp;#39;: &amp;#39;test&amp;#39;
      },
      success (res){
        const data = res.data
        //do something
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="createVideoContext">
                <parameters>
                    <parameter name="id" type="String"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="VideoContext"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.createVideoContext.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html"&gt;VideoContext&lt;/a&gt; wx.createVideoContext(string id, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建 &lt;a href="(video)"&gt;video&lt;/a&gt; 上下文 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html"&gt;VideoContext&lt;/a&gt; 对象。&lt;/p&gt;
</description>
            </method>
            <method name="createWorker">
                <parameters>
                    <parameter name="scriptPath" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Worker"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/wx.createWorker.html"&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/wx.createWorker.html"&gt;Worker&lt;/a&gt; wx.createWorker(string scriptPath)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建一个 &lt;a href="(framework/workers)"&gt;Worker 线程&lt;/a&gt;。目前限制最多只能创建一个 Worker，创建下一个 Worker 前请先调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/worker/Worker.terminate.html"&gt;Worker.terminate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.90&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getStorageSync">
                <parameters>
                    <parameter name="key" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageSync.html"&gt;any wx.getStorageSync(string key)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorage.html"&gt;wx.getStorage&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getStorage({
  key: &amp;#39;key&amp;#39;,
  success (res) {
    console.log(res.data)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  var value = wx.getStorageSync(&amp;#39;key&amp;#39;)
  if (value) {
    // Do something with return value
  }
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="canIUse">
                <parameters>
                    <parameter name="schema" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html"&gt;boolean wx.canIUse(string schema)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;判断小程序的API，回调，参数，组件等是否在当前版本可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${API}&lt;/code&gt; 代表 API 名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${method}&lt;/code&gt; 代表调用方式，有效值为return, success, object, callback&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${param}&lt;/code&gt; 代表参数或者返回值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${option}&lt;/code&gt; 代表参数的可选值或者返回值的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${component}&lt;/code&gt; 代表组件名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${attribute}&lt;/code&gt; 代表组件属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${option}&lt;/code&gt; 代表组件属性的可选值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 对象的属性或方法
wx.canIUse(&amp;#39;console.log&amp;#39;)
wx.canIUse(&amp;#39;CameraContext.onCameraFrame&amp;#39;)
wx.canIUse(&amp;#39;CameraFrameListener.start&amp;#39;)
wx.canIUse(&amp;#39;Image.src&amp;#39;)

// wx接口参数、回调或者返回值
wx.canIUse(&amp;#39;openBluetoothAdapter&amp;#39;)
wx.canIUse(&amp;#39;getSystemInfoSync.return.safeArea.left&amp;#39;)
wx.canIUse(&amp;#39;getSystemInfo.success.screenWidth&amp;#39;)
wx.canIUse(&amp;#39;showToast.object.image&amp;#39;)
wx.canIUse(&amp;#39;onCompassChange.callback.direction&amp;#39;)
wx.canIUse(&amp;#39;request.object.method.GET&amp;#39;)

// 组件的属性
wx.canIUse(&amp;#39;live-player&amp;#39;)
wx.canIUse(&amp;#39;text.selectable&amp;#39;)
wx.canIUse(&amp;#39;button.open-type.contact&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="arrayBufferToBase64">
                <parameters>
                    <parameter name="arrayBuffer" type="ArrayBuffer"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.arrayBufferToBase64.html"&gt;string wx.arrayBufferToBase64(ArrayBuffer arrayBuffer)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将 ArrayBuffer 对象转成 Base64 字符串&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="addCard">
                <parameters>
                    <parameter name="option" type="AddCardOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.addCard.html"&gt;wx.addCard(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;批量添加卡券。只有通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/product/renzheng.html"&gt;认证&lt;/a&gt; 的小程序或文化互动类目的小游戏才能使用。更多文档请参考 &lt;a href="https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&amp;amp;key=1490190158&amp;amp;version=1&amp;amp;lang=zh_CN&amp;amp;platform=2"&gt;微信卡券接口文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cardExt 说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;cardExt 是卡券的扩展参数，其值是一个 JSON 字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.addCard({
  cardList: [
    {
      cardId: &amp;#39;&amp;#39;,
      cardExt: &amp;#39;{&amp;quot;code&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;openid&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;timestamp&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;signature&amp;quot;:&amp;quot;&amp;quot;}&amp;#39;
    }, {
      cardId: &amp;#39;&amp;#39;,
      cardExt: &amp;#39;{&amp;quot;code&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;openid&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;timestamp&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;signature&amp;quot;:&amp;quot;&amp;quot;}&amp;#39;
    }
  ],
  success (res) {
    console.log(res.cardList) // 卡券添加结果
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="addPhoneContact">
                <parameters>
                    <parameter name="option" type="AddPhoneContactOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/contact/wx.addPhoneContact.html"&gt;wx.addPhoneContact(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加手机通讯录联系人。用户可以选择将该表单以「新增联系人」或「添加到已有联系人」的方式，写入手机系统通讯录。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="authorize">
                <parameters>
                    <parameter name="option" type="AuthorizeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/authorize/wx.authorize.html"&gt;wx.authorize(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。更多用法详见 &lt;a href="(authorize)"&gt;用户授权&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 可以通过 wx.getSetting 先查询一下用户是否授权了 &amp;quot;scope.record&amp;quot; 这个 scope
wx.getSetting({
  success(res) {
    if (!res.authSetting[&amp;#39;scope.record&amp;#39;]) {
      wx.authorize({
        scope: &amp;#39;scope.record&amp;#39;,
        success () {
          // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问
          wx.startRecord()
        }
      })
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="canvasGetImageData">
                <parameters>
                    <parameter name="option" type="CanvasGetImageDataOption"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasGetImageData.html"&gt;wx.canvasGetImageData(Object object, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取 canvas 区域隐含的像素数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;yufmRjmZ7W8f&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.canvasGetImageData({
  canvasId: &amp;#39;myCanvas&amp;#39;,
  x: 0,
  y: 0,
  width: 100,
  height: 100,
  success(res) {
    console.log(res.width) // 100
    console.log(res.height) // 100
    console.log(res.data instanceof Uint8ClampedArray) // true
    console.log(res.data.length) // 100 * 100 * 4
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="canvasPutImageData">
                <parameters>
                    <parameter name="option" type="CanvasPutImageDataOption"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasPutImageData.html"&gt;wx.canvasPutImageData(Object object, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将像素数据绘制到画布。在自定义组件下，第二个参数传入自定义组件实例 this，以操作组件内 &lt;canvas&gt; 组件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="canvasToTempFilePath">
                <parameters>
                    <parameter name="option" type="CanvasToTempFilePathOption"/>
                    <parameter name="component" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html"&gt;wx.canvasToTempFilePath(Object object, Object this)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把当前画布指定区域的内容导出生成指定大小的图片。在 &lt;code&gt;draw()&lt;/code&gt; 回调里调用该方法才能保证图片导出成功。&lt;/p&gt;
</description>
            </method>
            <method name="checkIsSoterEnrolledInDevice">
                <parameters>
                    <parameter name="option" type="CheckIsSoterEnrolledInDeviceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.checkIsSoterEnrolledInDevice.html"&gt;wx.checkIsSoterEnrolledInDevice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取设备内是否录入如指纹等生物信息的接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.checkIsSoterEnrolledInDevice({
  checkAuthMode: &amp;#39;fingerPrint&amp;#39;,
  success(res) {
    console.log(res.isEnrolled)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="checkIsSupportSoterAuthentication">
                <parameters>
                    <parameter name="option" type="CheckIsSupportSoterAuthenticationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.checkIsSupportSoterAuthentication.html"&gt;wx.checkIsSupportSoterAuthentication(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取本机支持的 SOTER 生物认证方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.checkIsSupportSoterAuthentication({
  success(res) {
    // res.supportMode = [] 不具备任何被SOTER支持的生物识别方式
    // res.supportMode = [&amp;#39;fingerPrint&amp;#39;] 只支持指纹识别
    // res.supportMode = [&amp;#39;fingerPrint&amp;#39;, &amp;#39;facial&amp;#39;] 支持指纹识别和人脸识别
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="checkSession">
                <parameters>
                    <parameter name="option" type="CheckSessionOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.checkSession.html"&gt;wx.checkSession(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;检查登录态是否过期。&lt;/p&gt;
&lt;p&gt;通过 wx.login 接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用 wx.checkSession 接口检测当前用户登录态是否有效。&lt;/p&gt;
&lt;p&gt;登录态过期后开发者可以再调用 wx.login 获取新的用户登录态。调用成功说明当前 session_key 未过期，调用失败说明 session_key 已过期。更多使用方法详见 &lt;a href="(open-ability/login)"&gt;小程序登录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.checkSession({
  success () {
    //session_key 未过期，并且在本生命周期一直有效
  },
  fail () {
    // session_key 已经失效，需要重新执行登录流程
    wx.login() //重新登录
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="chooseAddress">
                <parameters>
                    <parameter name="option" type="ChooseAddressOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/address/wx.chooseAddress.html"&gt;wx.chooseAddress(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取用户收货地址。调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;024hHnmd772y&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseAddress({
  success (res) {
    console.log(res.userName)
    console.log(res.postalCode)
    console.log(res.provinceName)
    console.log(res.cityName)
    console.log(res.countyName)
    console.log(res.detailInfo)
    console.log(res.nationalCode)
    console.log(res.telNumber)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="chooseImage">
                <parameters>
                    <parameter name="option" type="ChooseImageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html"&gt;wx.chooseImage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从本地相册选择图片或使用相机拍照。&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseImage({
  count: 1,
  sizeType: [&amp;#39;original&amp;#39;, &amp;#39;compressed&amp;#39;],
  sourceType: [&amp;#39;album&amp;#39;, &amp;#39;camera&amp;#39;],
  success (res) {
    // tempFilePath可以作为img标签的src属性显示图片
    const tempFilePaths = res.tempFilePaths
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="chooseInvoice">
                <parameters>
                    <parameter name="option" type="ChooseInvoiceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoice.html"&gt;wx.chooseInvoice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择用户已有的发票。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过 cardId 和 encryptCode 获得报销发票的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请参考&lt;a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=21517918939oae3U"&gt;微信电子发票文档&lt;/a&gt;中，「查询报销发票信息」部分。
其中 &lt;code&gt;access_token&lt;/code&gt; 的获取请参考&lt;a href="(auth.getAccessToken)"&gt;auth.getAccessToken&lt;/a&gt;文档&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="chooseInvoiceTitle">
                <parameters>
                    <parameter name="option" type="ChooseInvoiceTitleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/invoice/wx.chooseInvoiceTitle.html"&gt;wx.chooseInvoiceTitle(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择用户的发票抬头。当前小程序必须关联一个公众号，且这个公众号是完成了&lt;a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1496554031_RD4xe"&gt;微信认证&lt;/a&gt;的，才能调用 chooseInvoiceTitle。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;GJ4S9nmQ7x2E&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseInvoiceTitle({
  success(res) {}
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="chooseLocation">
                <parameters>
                    <parameter name="option" type="ChooseLocationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html"&gt;wx.chooseLocation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开地图选择位置。&lt;/p&gt;
</description>
            </method>
            <method name="chooseMessageFile">
                <parameters>
                    <parameter name="option" type="ChooseMessageFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html"&gt;wx.chooseMessageFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从客户端会话选择文件。&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseMessageFile({
  count: 10,
  type: &amp;#39;image&amp;#39;,
  success (res) {
    // tempFilePath可以作为img标签的src属性显示图片
    const tempFilePaths = res.tempFilePaths
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="chooseVideo">
                <parameters>
                    <parameter name="option" type="ChooseVideoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html"&gt;wx.chooseVideo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拍摄视频或从手机相册中选视频。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseVideo({
  sourceType: [&amp;#39;album&amp;#39;,&amp;#39;camera&amp;#39;],
  maxDuration: 60,
  camera: &amp;#39;back&amp;#39;,
  success(res) {
    console.log(res.tempFilePath)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="clearStorage">
                <parameters>
                    <parameter name="option" type="ClearStorageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html"&gt;wx.clearStorage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;清理本地数据缓存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.clearStorage()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.clearStorageSync()
} catch(e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="clearStorageSync">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorageSync.html"&gt;wx.clearStorageSync()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.clearStorage.html"&gt;wx.clearStorage&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.clearStorage()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.clearStorageSync()
} catch(e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="closeBLEConnection">
                <parameters>
                    <parameter name="option" type="CloseBLEConnectionOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.closeBLEConnection.html"&gt;wx.closeBLEConnection(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;断开与低功耗蓝牙设备的连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.closeBLEConnection({
  deviceId,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="closeBluetoothAdapter">
                <parameters>
                    <parameter name="option" type="CloseBluetoothAdapterOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.closeBluetoothAdapter.html"&gt;wx.closeBluetoothAdapter(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭蓝牙模块。调用该方法将断开所有已建立的连接并释放系统资源。建议在使用蓝牙流程后，与 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html"&gt;wx.openBluetoothAdapter&lt;/a&gt; 成对调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.closeBluetoothAdapter({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="closeSocket">
                <parameters>
                    <parameter name="option" type="CloseSocketOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.closeSocket.html"&gt;wx.closeSocket(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭 WebSocket 连接&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.connectSocket({
  url: &amp;#39;test.php&amp;#39;
})

//注意这里有时序问题，
//如果 wx.connectSocket 还没回调 wx.onSocketOpen，而先调用 wx.closeSocket，那么就做不到关闭 WebSocket 的目的。
//必须在 WebSocket 打开期间调用 wx.closeSocket 才能关闭。
wx.onSocketOpen(function() {
  wx.closeSocket()
})

wx.onSocketClose(function(res) {
  console.log(&amp;#39;WebSocket 已关闭！&amp;#39;)
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="compressImage">
                <parameters>
                    <parameter name="option" type="CompressImageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.compressImage.html"&gt;wx.compressImage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;压缩图片接口，可选压缩质量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.compressImage({
  src: &amp;#39;&amp;#39;, // 图片路径
  quality: 80 // 压缩质量
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="connectWifi">
                <parameters>
                    <parameter name="option" type="ConnectWifiOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.connectWifi.html"&gt;wx.connectWifi(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.connectWifi({
  SSID: &amp;#39;&amp;#39;,
  password: &amp;#39;&amp;#39;,
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="createBLEConnection">
                <parameters>
                    <parameter name="option" type="CreateBLEConnectionOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.createBLEConnection.html"&gt;wx.createBLEConnection(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;连接低功耗蓝牙设备。&lt;/p&gt;
&lt;p&gt;若小程序在之前已有搜索过某个蓝牙设备，并成功建立连接，可直接传入之前搜索获取的 deviceId 直接尝试连接该设备，无需进行搜索操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请保证尽量成对的调用 &lt;code&gt;createBLEConnection&lt;/code&gt; 和 &lt;code&gt;closeBLEConnection&lt;/code&gt; 接口。安卓如果多次调用 &lt;code&gt;createBLEConnection&lt;/code&gt; 创建连接，有可能导致系统持有同一设备多个连接的实例，导致调用 &lt;code&gt;closeBLEConnection&lt;/code&gt; 的时候并不能真正的断开与设备的连接。&lt;/li&gt;
&lt;li&gt;蓝牙连接随时可能断开，建议监听 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEConnectionStateChange.html"&gt;wx.onBLEConnectionStateChange&lt;/a&gt; 回调事件，当蓝牙设备断开时按需执行重连操作&lt;/li&gt;
&lt;li&gt;若对未连接的设备或已断开连接的设备调用数据读写操作的接口，会返回 10006 错误，建议进行重连操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.createBLEConnection({
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getAvailableAudioSources">
                <parameters>
                    <parameter name="option" type="GetAvailableAudioSourcesOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.getAvailableAudioSources.html"&gt;wx.getAvailableAudioSources(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前支持的音频输入源&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBLEDeviceCharacteristics">
                <parameters>
                    <parameter name="option" type="GetBLEDeviceCharacteristicsOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceCharacteristics.html"&gt;wx.getBLEDeviceCharacteristics(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取蓝牙设备某个服务中所有特征值(characteristic)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getBLEDeviceCharacteristics({
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId,
  success (res) {
    console.log(&amp;#39;device getBLEDeviceCharacteristics:&amp;#39;, res.characteristics)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBLEDeviceServices">
                <parameters>
                    <parameter name="option" type="GetBLEDeviceServicesOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.getBLEDeviceServices.html"&gt;wx.getBLEDeviceServices(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取蓝牙设备所有服务(service)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getBLEDeviceServices({
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  success (res) {
    console.log(&amp;#39;device services:&amp;#39;, res.services)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBackgroundAudioPlayerState">
                <parameters>
                    <parameter name="option" type="GetBackgroundAudioPlayerStateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.getBackgroundAudioPlayerState.html"&gt;wx.getBackgroundAudioPlayerState(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取后台音乐播放状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getBackgroundAudioPlayerState({
  success (res) {
    const status = res.status
    const dataUrl = res.dataUrl
    const currentPosition = res.currentPosition
    const duration = res.duration
    const downloadPercent = res.downloadPercent
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getBackgroundFetchData">
                <parameters>
                    <parameter name="option" type="GetBackgroundFetchDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/backgroundFetch/wx.getBackgroundFetchData.html"&gt;wx.getBackgroundFetchData(object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拉取 backgroundFetch 客户端缓存数据&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBackgroundFetchToken">
                <parameters>
                    <parameter name="option" type="GetBackgroundFetchTokenOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/backgroundFetch/wx.getBackgroundFetchToken.html"&gt;wx.getBackgroundFetchToken(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取设置过的自定义登录态。若无，则返回 fail。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBatteryInfo">
                <parameters>
                    <parameter name="option" type="GetBatteryInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfo.html"&gt;wx.getBatteryInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取设备电量。同步 API &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/battery/wx.getBatteryInfoSync.html"&gt;wx.getBatteryInfoSync&lt;/a&gt; 在 iOS 上不可用。&lt;/p&gt;
</description>
            </method>
            <method name="getBeacons">
                <parameters>
                    <parameter name="option" type="GetBeaconsOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.getBeacons.html"&gt;wx.getBeacons(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取所有已搜索到的 iBeacon 设备&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBluetoothAdapterState">
                <parameters>
                    <parameter name="option" type="GetBluetoothAdapterStateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothAdapterState.html"&gt;wx.getBluetoothAdapterState(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取本机蓝牙适配器状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getBluetoothAdapterState({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getBluetoothDevices">
                <parameters>
                    <parameter name="option" type="GetBluetoothDevicesOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothDevices.html"&gt;wx.getBluetoothDevices(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取在蓝牙模块生效期间所有已发现的蓝牙设备。包括已经和本机处于连接状态的设备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// ArrayBuffer转16进度字符串示例
function ab2hex(buffer) {
  var hexArr = Array.prototype.map.call(
    new Uint8Array(buffer),
    function(bit) {
      return (&amp;#39;00&amp;#39; + bit.toString(16)).slice(-2)
    }
  )
  return hexArr.join(&amp;#39;&amp;#39;);
}
wx.getBluetoothDevices({
  success: function (res) {
    console.log(res)
    if (res.devices[0]) {
      console.log(ab2hex(res.devices[0].advertisData))
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该接口获取到的设备列表为&lt;strong&gt;蓝牙模块生效期间所有搜索到的蓝牙设备&lt;/strong&gt;，若在蓝牙模块使用流程结束后未及时调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.closeBluetoothAdapter.html"&gt;wx.closeBluetoothAdapter&lt;/a&gt; 释放资源，会存在调用该接口会返回之前的蓝牙使用流程中搜索到的蓝牙设备，可能设备已经不在用户身边，无法连接。&lt;/li&gt;
&lt;li&gt;蓝牙设备在被搜索到时，系统返回的 name 字段一般为广播包中的 LocalName 字段中的设备名称，而如果与蓝牙设备建立连接，系统返回的 name 字段会改为从蓝牙设备上获取到的 &lt;code&gt;GattName&lt;/code&gt;。若需要动态改变设备名称并展示，建议使用 &lt;code&gt;localName&lt;/code&gt; 字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getClipboardData">
                <parameters>
                    <parameter name="option" type="GetClipboardDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.getClipboardData.html"&gt;wx.getClipboardData(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取系统剪贴板的内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getClipboardData({
  success (res){
    console.log(res.data)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getConnectedBluetoothDevices">
                <parameters>
                    <parameter name="option" type="GetConnectedBluetoothDevicesOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getConnectedBluetoothDevices.html"&gt;wx.getConnectedBluetoothDevices(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据 uuid 获取处于已连接状态的设备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getConnectedBluetoothDevices({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getConnectedWifi">
                <parameters>
                    <parameter name="option" type="GetConnectedWifiOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.getConnectedWifi.html"&gt;wx.getConnectedWifi(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取已连接中的 Wi-Fi 信息。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getExtConfig">
                <parameters>
                    <parameter name="option" type="GetExtConfigOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html"&gt;wx.getExtConfig(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取&lt;a href="(devtools/ext)"&gt;第三方平台&lt;/a&gt;自定义的数据字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本接口暂时无法通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/wx.canIUse.html"&gt;wx.canIUse&lt;/a&gt; 判断是否兼容，开发者需要自行判断 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ext/wx.getExtConfig.html"&gt;wx.getExtConfig&lt;/a&gt; 是否存在来兼容&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;if (wx.getExtConfig) {
  wx.getExtConfig({
    success (res) {
      console.log(res.extConfig)
    }
  })
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getFileInfo">
                <parameters>
                    <parameter name="option" type="WxGetFileInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileInfo.html"&gt;wx.getFileInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取文件信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getFileInfo({
  success (res) {
    console.log(res.size)
    console.log(res.digest)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getHCEState">
                <parameters>
                    <parameter name="option" type="GetHCEStateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.getHCEState.html"&gt;wx.getHCEState(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;判断当前设备是否支持 HCE 能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getHCEState({
  success (res) {
    console.log(res.errCode)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getImageInfo">
                <parameters>
                    <parameter name="option" type="GetImageInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html"&gt;wx.getImageInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取图片信息。网络图片需先配置download域名才能生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;Kd47Sbmr6yYu&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getImageInfo({
  src: &amp;#39;images/a.jpg&amp;#39;,
  success (res) {
    console.log(res.width)
    console.log(res.height)
  }
})

wx.chooseImage({
  success (res) {
    wx.getImageInfo({
      src: res.tempFilePaths[0],
      success (res) {
        console.log(res.width)
        console.log(res.height)
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getLocation">
                <parameters>
                    <parameter name="option" type="GetLocationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.getLocation.html"&gt;wx.getLocation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt; wx.getLocation({
  type: &amp;#39;wgs84&amp;#39;,
  success (res) {
    const latitude = res.latitude
    const longitude = res.longitude
    const speed = res.speed
    const accuracy = res.accuracy
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工具中定位模拟使用IP定位，可能会有一定误差。且工具目前仅支持 gcj02 坐标。&lt;/li&gt;
&lt;li&gt;使用第三方服务进行逆地址解析时，请确认第三方服务默认的坐标系，正确进行坐标转换。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="getNetworkType">
                <parameters>
                    <parameter name="option" type="GetNetworkTypeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.getNetworkType.html"&gt;wx.getNetworkType(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取网络类型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getNetworkType({
  success (res) {
    const networkType = res.networkType
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getSavedFileInfo">
                <parameters>
                    <parameter name="option" type="GetSavedFileInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getSavedFileInfo.html"&gt;wx.getSavedFileInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getFileInfo.html"&gt;wx.getFileInfo()&lt;/a&gt; 接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSavedFileList({
  success (res) {
    console.log(res.fileList)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getSavedFileList">
                <parameters>
                    <parameter name="option" type="WxGetSavedFileListOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.getSavedFileList.html"&gt;wx.getSavedFileList(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取该小程序下已保存的本地缓存文件列表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSavedFileList({
  success (res) {
    console.log(res.fileList)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getScreenBrightness">
                <parameters>
                    <parameter name="option" type="GetScreenBrightnessOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.getScreenBrightness.html"&gt;wx.getScreenBrightness(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取屏幕亮度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若安卓系统设置中开启了自动调节亮度功能，则屏幕亮度会根据光线自动调整，该接口仅能获取自动调节亮度之前的值，而非实时的亮度值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getSelectedTextRange">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/keyboard/wx.getSelectedTextRange.html"&gt;wx.getSelectedTextRange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在input、textarea等focus之后，获取输入框的光标位置。注意：只有在focus的时候调用此接口才有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSelectedTextRange({
  complete: res =&amp;gt; {
    console.log(&amp;#39;getSelectedTextRange res&amp;#39;, res.start, res.end)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getSetting">
                <parameters>
                    <parameter name="option" type="GetSettingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html"&gt;wx.getSetting(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取用户的当前设置。&lt;strong&gt;返回值中只会出现小程序已经向用户请求过的&lt;a href="(authorize)"&gt;权限&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSetting({
  success (res) {
    console.log(res.authSetting)
    // res.authSetting = {
    //   &amp;quot;scope.userInfo&amp;quot;: true,
    //   &amp;quot;scope.userLocation&amp;quot;: true
    // }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getShareInfo">
                <parameters>
                    <parameter name="option" type="GetShareInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.getShareInfo.html"&gt;wx.getShareInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取转发详细信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;敏感数据有两种获取方式，一是使用 &lt;a href="(open-ability/signature#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95)"&gt;加密数据解密算法&lt;/a&gt; 。
获取得到的开放数据为以下 json 结构（其中 openGId 为当前群的唯一标识）：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
 &amp;quot;openGId&amp;quot;: &amp;quot;OPENGID&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如需要展示群名称，可以使用&lt;a href="(open-data)"&gt;开放数据组件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getStorage">
                <parameters>
                    <parameter name="option" type="GetStorageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorage.html"&gt;wx.getStorage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从本地缓存中异步获取指定 key 的内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getStorage({
  key: &amp;#39;key&amp;#39;,
  success (res) {
    console.log(res.data)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  var value = wx.getStorageSync(&amp;#39;key&amp;#39;)
  if (value) {
    // Do something with return value
  }
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getStorageInfo">
                <parameters>
                    <parameter name="option" type="GetStorageInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.getStorageInfo.html"&gt;wx.getStorageInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;异步获取当前storage的相关信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getStorageInfo({
  success (res) {
    console.log(res.keys)
    console.log(res.currentSize)
    console.log(res.limitSize)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  const res = wx.getStorageInfoSync()
  console.log(res.keys)
  console.log(res.currentSize)
  console.log(res.limitSize)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getSystemInfo">
                <parameters>
                    <parameter name="option" type="GetSystemInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html"&gt;wx.getSystemInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取系统信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSystemInfo({
  success (res) {
    console.log(res.model)
    console.log(res.pixelRatio)
    console.log(res.windowWidth)
    console.log(res.windowHeight)
    console.log(res.language)
    console.log(res.version)
    console.log(res.platform)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  const res = wx.getSystemInfoSync()
  console.log(res.model)
  console.log(res.pixelRatio)
  console.log(res.windowWidth)
  console.log(res.windowHeight)
  console.log(res.language)
  console.log(res.version)
  console.log(res.platform)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getUserInfo">
                <parameters>
                    <parameter name="option" type="GetUserInfoOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html"&gt;wx.getUserInfo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取用户信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口调整说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在用户未授权过的情况下调用此接口，将不再出现授权弹窗，会直接进入 fail 回调（详见[《公告》]({% postUrl(0000a26e1aca6012e896a517556c01) %}))。在用户已授权的情况下调用此接口，可成功获取用户信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 必须是在用户已经授权的情况下调用
wx.getUserInfo({
  success: function(res) {
    var userInfo = res.userInfo
    var nickName = userInfo.nickName
    var avatarUrl = userInfo.avatarUrl
    var gender = userInfo.gender //性别 0：未知、1：男、2：女
    var province = userInfo.province
    var city = userInfo.city
    var country = userInfo.country
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;敏感数据有两种获取方式，一是使用 &lt;a href="(open-ability/signature#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95)"&gt;加密数据解密算法&lt;/a&gt; 。
获取得到的开放数据为以下 json 结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;openId&amp;quot;: &amp;quot;OPENID&amp;quot;,
  &amp;quot;nickName&amp;quot;: &amp;quot;NICKNAME&amp;quot;,
  &amp;quot;gender&amp;quot;: GENDER,
  &amp;quot;city&amp;quot;: &amp;quot;CITY&amp;quot;,
  &amp;quot;province&amp;quot;: &amp;quot;PROVINCE&amp;quot;,
  &amp;quot;country&amp;quot;: &amp;quot;COUNTRY&amp;quot;,
  &amp;quot;avatarUrl&amp;quot;: &amp;quot;AVATARURL&amp;quot;,
  &amp;quot;unionId&amp;quot;: &amp;quot;UNIONID&amp;quot;,
  &amp;quot;watermark&amp;quot;: {
    &amp;quot;appid&amp;quot;:&amp;quot;APPID&amp;quot;,
    &amp;quot;timestamp&amp;quot;:TIMESTAMP
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;小程序用户信息组件示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;* &amp;lt;!-- 如果只是展示用户头像昵称，可以使用 &amp;lt;open-data /&amp;gt; 组件 --&amp;gt;
* &amp;lt;open-data type=&amp;quot;userAvatarUrl&amp;quot;&amp;gt;&amp;lt;/open-data&amp;gt;
* &amp;lt;open-data type=&amp;quot;userNickName&amp;quot;&amp;gt;&amp;lt;/open-data&amp;gt;
* &amp;lt;!-- 需要使用 button 来授权登录 --&amp;gt;
* &amp;lt;button wx:if=&amp;quot;{{canIUse}}&amp;quot; open-type=&amp;quot;getUserInfo&amp;quot; bindgetuserinfo=&amp;quot;bindGetUserInfo&amp;quot;&amp;gt;授权登录&amp;lt;/button&amp;gt;
* &amp;lt;view wx:else&amp;gt;请升级微信版本&amp;lt;/view&amp;gt;
* ```

```js
Page({
  data: {
    canIUse: wx.canIUse(&amp;#39;button.open-type.getUserInfo&amp;#39;)
  },
  onLoad: function() {
    // 查看是否授权
    wx.getSetting({
      success (res){
        if (res.authSetting[&amp;#39;scope.userInfo&amp;#39;]) {
          // 已经授权，可以直接调用 getUserInfo 获取头像昵称
          wx.getUserInfo({
            success: function(res) {
              console.log(res.userInfo)
            }
          })
        }
      }
    })
  },
  bindGetUserInfo (e) {
    console.log(e.detail.userInfo)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="getWeRunData">
                <parameters>
                    <parameter name="option" type="GetWeRunDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/werun/wx.getWeRunData.html"&gt;wx.getWeRunData(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取用户过去三十天微信运动步数。需要先调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html"&gt;wx.login&lt;/a&gt; 接口。步数信息会在用户主动进入小程序时更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getWeRunData({
  success (res) {
    // 拿 encryptedData 到开发者后台解密开放数据
    const encryptedData = res.encryptedData
    // 或拿 cloudID 通过云调用直接获取开放数据
    const cloudID = res.cloudID
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;开放数据 JSON 结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;敏感数据有两种获取方式，一是使用 &lt;a href="(open-ability/signature#%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95)"&gt;加密数据解密算法&lt;/a&gt; 。
获取得到的开放数据为以下 json 结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;stepInfoList&amp;quot;: [
    {
      &amp;quot;timestamp&amp;quot;: 1445866601,
      &amp;quot;step&amp;quot;: 100
    },
    {
      &amp;quot;timestamp&amp;quot;: 1445876601,
      &amp;quot;step&amp;quot;: 120
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stepInfoList 中，每一项结构如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;时间戳，表示数据对应的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;微信运动步数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="getWifiList">
                <parameters>
                    <parameter name="option" type="GetWifiListOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.getWifiList.html"&gt;wx.getWifiList(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请求获取 Wi-Fi 列表。在 &lt;code&gt;onGetWifiList&lt;/code&gt; 注册的回调中返回 &lt;code&gt;wifiList&lt;/code&gt; 数据。 &lt;strong&gt;Android 调用前需要 &lt;a href="(open-ability/authorize)"&gt;用户授权&lt;/a&gt; scope.userLocation。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;iOS 将跳转到系统的 Wi-Fi 界面，Android 不会跳转。 iOS 11.0 及 iOS 11.1 两个版本因系统问题，该方法失效。但在 iOS 11.2 中已修复。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideLoading">
                <parameters>
                    <parameter name="option" type="HideLoadingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html"&gt;wx.hideLoading(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏 loading 提示框&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideNavigationBarLoading">
                <parameters>
                    <parameter name="option" type="HideNavigationBarLoadingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.hideNavigationBarLoading.html"&gt;wx.hideNavigationBarLoading(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在当前页面隐藏导航条加载动画&lt;/p&gt;
</description>
            </method>
            <method name="hideShareMenu">
                <parameters>
                    <parameter name="option" type="HideShareMenuOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.hideShareMenu.html"&gt;wx.hideShareMenu(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏转发按钮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.hideShareMenu()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideTabBar">
                <parameters>
                    <parameter name="option" type="HideTabBarOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.hideTabBar.html"&gt;wx.hideTabBar(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏 tabBar&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideTabBarRedDot">
                <parameters>
                    <parameter name="option" type="HideTabBarRedDotOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.hideTabBarRedDot.html"&gt;wx.hideTabBarRedDot(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏 tabBar 某一项的右上角的红点&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="hideToast">
                <parameters>
                    <parameter name="option" type="HideToastOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html"&gt;wx.hideToast(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;隐藏消息提示框&lt;/p&gt;
</description>
            </method>
            <method name="loadFontFace">
                <parameters>
                    <parameter name="option" type="LoadFontFaceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/font/wx.loadFontFace.html"&gt;wx.loadFontFace(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态加载网络字体。文件地址需为下载类型。iOS 仅支持 https 格式文件地址。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字体文件返回的 contet-type 参考 &lt;a href="https://www.iana.org/assignments/media-types/media-types.xhtml#font"&gt;font&lt;/a&gt;，格式不正确时会解析失败。&lt;/li&gt;
&lt;li&gt;字体链接必须是https（ios不支持http)&lt;/li&gt;
&lt;li&gt;字体链接必须是同源下的，或开启了cors支持，小程序的域名是&lt;code&gt;servicewechat.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;canvas等原生组件不支持使用接口添加的字体&lt;/li&gt;
&lt;li&gt;工具里提示 Faild to load font可以忽略&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;b6Zrajm67R2x&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.loadFontFace({
  family: &amp;#39;Bitstream Vera Serif Bold&amp;#39;,
  source: &amp;#39;url(&amp;quot;https://sungd.github.io/Pacifico.ttf&amp;quot;)&amp;#39;,
  success: console.log
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="login">
                <parameters>
                    <parameter name="option" type="LoginOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html"&gt;wx.login(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调用接口获取登录凭证（code）。通过凭证进而换取用户登录态信息，包括用户的唯一标识（openid）及本次登录的会话密钥（session_key）等。用户数据的加解密通讯需要依赖会话密钥完成。更多使用方法详见 &lt;a href="(open-ability/login)"&gt;小程序登录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.login({
  success (res) {
    if (res.code) {
      //发起网络请求
      wx.request({
        url: &amp;#39;https://test.com/onLogin&amp;#39;,
        data: {
          code: res.code
        }
      })
    } else {
      console.log(&amp;#39;登录失败！&amp;#39; + res.errMsg)
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="makePhoneCall">
                <parameters>
                    <parameter name="option" type="MakePhoneCallOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/phone/wx.makePhoneCall.html"&gt;wx.makePhoneCall(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拨打电话&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.makePhoneCall({
  phoneNumber: &amp;#39;1340000&amp;#39; //仅为示例，并非真实的电话号码
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="navigateBack">
                <parameters>
                    <parameter name="option" type="NavigateBackOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html"&gt;wx.navigateBack(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭当前页面，返回上一页面或多级页面。可通过 &lt;a href="(api/getCurrentPages)"&gt;getCurrentPages&lt;/a&gt; 获取当前的页面栈，决定需要返回几层。&lt;/p&gt;
</description>
            </method>
            <method name="navigateBackMiniProgram">
                <parameters>
                    <parameter name="option" type="NavigateBackMiniProgramOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateBackMiniProgram.html"&gt;wx.navigateBackMiniProgram(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;返回到上一个小程序。只有在当前小程序是被其他小程序打开时可以调用成功&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;微信客户端 iOS 6.5.9，Android 6.5.10 及以上版本支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.navigateBackMiniProgram({
  extraData: {
  foo: &amp;#39;bar&amp;#39;
},
success(res) {
  // 返回成功
}
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="navigateTo">
                <parameters>
                    <parameter name="option" type="NavigateToOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html"&gt;wx.navigateTo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html"&gt;wx.navigateBack&lt;/a&gt; 可以返回到原页面。小程序中页面栈最多十层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.navigateTo({
  url: &amp;#39;test?id=1&amp;#39;,
  events: {
    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据
    acceptDataFromOpenedPage: function(data) {
      console.log(data)
    },
    someEvent: function(data) {
      console.log(data)
    }
    ...
  },
  success: function(res) {
    // 通过eventChannel向被打开页面传送数据
    res.eventChannel.emit(&amp;#39;acceptDataFromOpenerPage&amp;#39;, { data: &amp;#39;test&amp;#39; })
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;//test.js
Page({
  onLoad: function(option){
    console.log(option.query)
    const eventChannel = this.getOpenerEventChannel()
    eventChannel.emit(&amp;#39;acceptDataFromOpenedPage&amp;#39;, {data: &amp;#39;test&amp;#39;});
    eventChannel.emit(&amp;#39;someEvent&amp;#39;, {data: &amp;#39;test&amp;#39;});
    // 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据
    eventChannel.on(&amp;#39;acceptDataFromOpenerPage&amp;#39;, function(data) {
      console.log(data)
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="navigateToMiniProgram">
                <parameters>
                    <parameter name="option" type="NavigateToMiniProgramOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/miniprogram-navigate/wx.navigateToMiniProgram.html"&gt;wx.navigateToMiniProgram(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开另一个小程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用限制&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id="需要用户触发跳转"&gt;需要用户触发跳转&lt;/h5&gt;
&lt;p&gt;从 2.3.0 版本开始，若用户未点击小程序页面任意位置，则开发者将无法调用此接口自动跳转至其他小程序。&lt;/p&gt;
&lt;h5 id="需要用户确认跳转"&gt;需要用户确认跳转&lt;/h5&gt;
&lt;p&gt;从 2.3.0 版本开始，在跳转至其他小程序前，将统一增加弹窗，询问是否跳转，用户确认后才可以跳转其他小程序。如果用户点击取消，则回调 &lt;code&gt;fail cancel&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id="每个小程序可跳转的其他小程序数量限制为不超过-10-个"&gt;每个小程序可跳转的其他小程序数量限制为不超过 10 个&lt;/h5&gt;
&lt;p&gt;从 2.4.0 版本以及指定日期（具体待定）开始，开发者提交新版小程序代码时，如使用了跳转其他小程序功能，则需要在代码配置中声明将要跳转的小程序名单，限定不超过 10 个，否则将无法通过审核。该名单可在发布新版时更新，不支持动态修改。配置方法详见 &lt;a href="(configuration/app)"&gt;小程序全局配置&lt;/a&gt;。调用此接口时，所跳转的 appId 必须在配置列表中，否则回调 &lt;code&gt;fail appId &amp;quot;${appId}&amp;quot; is not in navigateToMiniProgramAppIdList&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于调试&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在开发者工具上调用此 API 并不会真实的跳转到另外的小程序，但是开发者工具会校验本次调用跳转是否成功。&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81"&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发者工具上支持被跳转的小程序处理接收参数的调试。&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81"&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.navigateToMiniProgram({
  appId: &amp;#39;&amp;#39;,
  path: &amp;#39;page/index/index?id=123&amp;#39;,
  extraData: {
    foo: &amp;#39;bar&amp;#39;
  },
  envVersion: &amp;#39;develop&amp;#39;,
  success(res) {
    // 打开成功
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="nextTick">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/custom-component/wx.nextTick.html"&gt;wx.nextTick(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;延迟一部分操作到下一个时间片再执行。（类似于 setTimeout）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为自定义组件中的 setData 和 triggerEvent 等接口本身是同步的操作，当这几个接口被连续调用时，都是在一个同步流程中执行完的，因此若逻辑不当可能会导致出错。&lt;/p&gt;
&lt;p&gt;一个极端的案例：当父组件的 setData 引发了子组件的 triggerEvent，进而使得父组件又进行了一次 setData，期间有通过 wx:if 语句对子组件进行卸载，就有可能引发奇怪的错误，所以对于不需要在一个同步流程内完成的逻辑，可以使用此接口延迟到下一个时间片再执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Component({
  doSth() {
    this.setData({ number: 1 }) // 直接在当前同步流程中执行

    wx.nextTick(() =&amp;gt; {
      this.setData({ number: 3 }) // 在当前同步流程结束后，下一个时间片执行
    })

    this.setData({ number: 2 }) // 直接在当前同步流程中执行
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.2.3&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="notifyBLECharacteristicValueChange">
                <parameters>
                    <parameter name="option" type="NotifyBLECharacteristicValueChangeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.notifyBLECharacteristicValueChange.html"&gt;wx.notifyBLECharacteristicValueChange(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持 notify 或者 indicate 才可以成功调用。&lt;/p&gt;
&lt;p&gt;另外，必须先启用 &lt;code&gt;notifyBLECharacteristicValueChange&lt;/code&gt; 才能监听到设备 &lt;code&gt;characteristicValueChange&lt;/code&gt; 事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订阅操作成功后需要设备主动更新特征值的 value，才会触发 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html"&gt;wx.onBLECharacteristicValueChange&lt;/a&gt; 回调。&lt;/li&gt;
&lt;li&gt;安卓平台上，在调用 &lt;code&gt;notifyBLECharacteristicValueChange&lt;/code&gt; 成功后立即调用 &lt;code&gt;writeBLECharacteristicValue&lt;/code&gt; 接口，在部分机型上会发生 10008 系统错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.notifyBLECharacteristicValueChange({
  state: true, // 启用 notify 功能
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId,
  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
  characteristicId,
  success (res) {
    console.log(&amp;#39;notifyBLECharacteristicValueChange success&amp;#39;, res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAccelerometerChange">
                <parameters>
                    <parameter name="callback" type="OffAccelerometerChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.offAccelerometerChange.html"&gt;wx.offAccelerometerChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听加速度数据事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAppHide">
                <parameters>
                    <parameter name="callback" type="OffAppHideCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAppHide.html"&gt;wx.offAppHide(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听小程序切后台事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAppShow">
                <parameters>
                    <parameter name="callback" type="OffAppShowCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAppShow.html"&gt;wx.offAppShow(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听小程序切前台事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAudioInterruptionBegin">
                <parameters>
                    <parameter name="callback" type="OffAudioInterruptionBeginCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAudioInterruptionBegin.html"&gt;wx.offAudioInterruptionBegin(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频因为受到系统占用而被中断开始事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offAudioInterruptionEnd">
                <parameters>
                    <parameter name="callback" type="OffAudioInterruptionEndCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offAudioInterruptionEnd.html"&gt;wx.offAudioInterruptionEnd(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听音频中断结束事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offBeaconServiceChange">
                <parameters>
                    <parameter name="callback" type="OffBeaconServiceChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.offBeaconServiceChange.html"&gt;wx.offBeaconServiceChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 iBeacon 服务状态变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offBeaconUpdate">
                <parameters>
                    <parameter name="callback" type="OffBeaconUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.offBeaconUpdate.html"&gt;wx.offBeaconUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 iBeacon 设备更新事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offCompassChange">
                <parameters>
                    <parameter name="callback" type="OffCompassChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.offCompassChange.html"&gt;wx.offCompassChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听罗盘数据变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offDeviceMotionChange">
                <parameters>
                    <parameter name="callback" type="OffDeviceMotionChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.offDeviceMotionChange.html"&gt;wx.offDeviceMotionChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听设备方向变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offError">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offError.html"&gt;wx.offError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听小程序错误事件。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offGyroscopeChange">
                <parameters>
                    <parameter name="callback" type="OffGyroscopeChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.offGyroscopeChange.html"&gt;wx.offGyroscopeChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听陀螺仪数据变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offHCEMessage">
                <parameters>
                    <parameter name="callback" type="OffHCEMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.offHCEMessage.html"&gt;wx.offHCEMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听接收 NFC 设备消息事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocalServiceDiscoveryStop">
                <parameters>
                    <parameter name="callback" type="OffLocalServiceDiscoveryStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceDiscoveryStop.html"&gt;wx.offLocalServiceDiscoveryStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 mDNS 服务停止搜索的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocalServiceFound">
                <parameters>
                    <parameter name="callback" type="OffLocalServiceFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceFound.html"&gt;wx.offLocalServiceFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 mDNS 服务发现的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocalServiceLost">
                <parameters>
                    <parameter name="callback" type="OffLocalServiceLostCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceLost.html"&gt;wx.offLocalServiceLost(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 mDNS 服务离开的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocalServiceResolveFail">
                <parameters>
                    <parameter name="callback" type="OffLocalServiceResolveFailCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.offLocalServiceResolveFail.html"&gt;wx.offLocalServiceResolveFail(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听 mDNS 服务解析失败的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offLocationChange">
                <parameters>
                    <parameter name="callback" type="OffLocationChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.offLocationChange.html"&gt;wx.offLocationChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听实时地理位置变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offNetworkStatusChange">
                <parameters>
                    <parameter name="callback" type="OffNetworkStatusChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.offNetworkStatusChange.html"&gt;wx.offNetworkStatusChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听网络状态变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offPageNotFound">
                <parameters>
                    <parameter name="callback" type="OffPageNotFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.offPageNotFound.html"&gt;wx.offPageNotFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听小程序要打开的页面不存在事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offUserCaptureScreen">
                <parameters>
                    <parameter name="callback" type="OffUserCaptureScreenCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.offUserCaptureScreen.html"&gt;wx.offUserCaptureScreen(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听用户主动截屏事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="offWindowResize">
                <parameters>
                    <parameter name="callback" type="OffWindowResizeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.offWindowResize.html"&gt;wx.offWindowResize(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;取消监听窗口尺寸变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onAccelerometerChange">
                <parameters>
                    <parameter name="callback" type="OnAccelerometerChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.onAccelerometerChange.html"&gt;wx.onAccelerometerChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听加速度数据事件。频率根据 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.startAccelerometer.html"&gt;wx.startAccelerometer()&lt;/a&gt; 的 interval 参数, 接口调用后会自动开始监听。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onAccelerometerChange(callback)&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="onAppHide">
                <parameters>
                    <parameter name="callback" type="OnAppHideCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppHide.html"&gt;wx.onAppHide(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序切后台事件。该事件与 &lt;a href="(App#onhide)"&gt;&lt;code&gt;App.onHide&lt;/code&gt;&lt;/a&gt; 的回调时机一致。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onAppShow">
                <parameters>
                    <parameter name="callback" type="OnAppShowCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAppShow.html"&gt;wx.onAppShow(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序切前台事件。该事件与 &lt;a href="(App#onshowobject-object)"&gt;&lt;code&gt;App.onShow&lt;/code&gt;&lt;/a&gt; 的回调参数一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回有效 referrerInfo 的场景&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;场景值&lt;/th&gt;
&lt;th&gt;场景&lt;/th&gt;
&lt;th&gt;appId含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1020&lt;/td&gt;
&lt;td&gt;公众号 profile 页相关小程序列表&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1035&lt;/td&gt;
&lt;td&gt;公众号自定义菜单&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1036&lt;/td&gt;
&lt;td&gt;App 分享消息卡片&lt;/td&gt;
&lt;td&gt;来源App&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1037&lt;/td&gt;
&lt;td&gt;小程序打开小程序&lt;/td&gt;
&lt;td&gt;来源小程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1038&lt;/td&gt;
&lt;td&gt;从另一个小程序返回&lt;/td&gt;
&lt;td&gt;来源小程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1043&lt;/td&gt;
&lt;td&gt;公众号模板消息&lt;/td&gt;
&lt;td&gt;来源公众号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;部分版本在无&lt;code&gt;referrerInfo&lt;/code&gt;的时候会返回 &lt;code&gt;undefined&lt;/code&gt;，建议使用 &lt;code&gt;options.referrerInfo &amp;amp;&amp;amp; options.referrerInfo.appId&lt;/code&gt; 进行判断。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onAudioInterruptionBegin">
                <parameters>
                    <parameter name="callback" type="OnAudioInterruptionBeginCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAudioInterruptionBegin.html"&gt;wx.onAudioInterruptionBegin(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频因为受到系统占用而被中断开始事件。以下场景会触发此事件：闹钟、电话、FaceTime 通话、微信语音聊天、微信视频聊天。此事件触发后，小程序内所有音频会暂停。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onAudioInterruptionEnd">
                <parameters>
                    <parameter name="callback" type="OnAudioInterruptionEndCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onAudioInterruptionEnd.html"&gt;wx.onAudioInterruptionEnd(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音频中断结束事件。在收到 onAudioInterruptionBegin 事件之后，小程序内所有音频会暂停，收到此事件之后才可再次播放成功&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.6.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBLECharacteristicValueChange">
                <parameters>
                    <parameter name="callback" type="OnBLECharacteristicValueChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLECharacteristicValueChange.html"&gt;wx.onBLECharacteristicValueChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听低功耗蓝牙设备的特征值变化事件。必须先启用 &lt;code&gt;notifyBLECharacteristicValueChange&lt;/code&gt; 接口才能接收到设备推送的 notification。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// ArrayBuffer转16进制字符串示例
function ab2hex(buffer) {
  let hexArr = Array.prototype.map.call(
    new Uint8Array(buffer),
    function(bit) {
      return (&amp;#39;00&amp;#39; + bit.toString(16)).slice(-2)
    }
  )
  return hexArr.join(&amp;#39;&amp;#39;);
}
wx.onBLECharacteristicValueChange(function(res) {
  console.log(`characteristic ${res.characteristicId} has changed, now is ${res.value}`)
  console.log(ab2hex(res.value))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBLEConnectionStateChange">
                <parameters>
                    <parameter name="callback" type="OnBLEConnectionStateChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.onBLEConnectionStateChange.html"&gt;wx.onBLEConnectionStateChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听低功耗蓝牙连接状态的改变事件。包括开发者主动连接或断开连接，设备丢失，连接异常断开等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onBLEConnectionStateChange(function(res) {
  // 该方法回调中可以用于处理连接意外断开等异常情况
  console.log(`device ${res.deviceId} state has changed, connected: ${res.connected}`)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBackgroundAudioPause">
                <parameters>
                    <parameter name="callback" type="OnBackgroundAudioPauseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioPause.html"&gt;wx.onBackgroundAudioPause(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音乐暂停事件。&lt;/p&gt;
</description>
            </method>
            <method name="onBackgroundAudioPlay">
                <parameters>
                    <parameter name="callback" type="OnBackgroundAudioPlayCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioPlay.html"&gt;wx.onBackgroundAudioPlay(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音乐播放事件。&lt;/p&gt;
</description>
            </method>
            <method name="onBackgroundAudioStop">
                <parameters>
                    <parameter name="callback" type="OnBackgroundAudioStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.onBackgroundAudioStop.html"&gt;wx.onBackgroundAudioStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听音乐停止事件。&lt;/p&gt;
</description>
            </method>
            <method name="onBackgroundFetchData">
                <parameters>
                    <parameter name="option" type="OnBackgroundFetchDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/backgroundFetch/wx.onBackgroundFetchData.html"&gt;wx.onBackgroundFetchData(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;收到 backgroundFetch 数据时的回调&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBeaconServiceChange">
                <parameters>
                    <parameter name="callback" type="OnBeaconServiceChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.onBeaconServiceChange.html"&gt;wx.onBeaconServiceChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 iBeacon 服务状态变化事件，仅能注册一个监听&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBeaconUpdate">
                <parameters>
                    <parameter name="callback" type="OnBeaconUpdateCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.onBeaconUpdate.html"&gt;wx.onBeaconUpdate(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 iBeacon 设备更新事件，仅能注册一个监听&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBluetoothAdapterStateChange">
                <parameters>
                    <parameter name="callback" type="OnBluetoothAdapterStateChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothAdapterStateChange.html"&gt;wx.onBluetoothAdapterStateChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听蓝牙适配器状态变化事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onBluetoothAdapterStateChange(function (res) {
  console.log(&amp;#39;adapterState changed, now is&amp;#39;, res)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onBluetoothDeviceFound">
                <parameters>
                    <parameter name="callback" type="OnBluetoothDeviceFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothDeviceFound.html"&gt;wx.onBluetoothDeviceFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听寻找到新设备的事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若在 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothDeviceFound.html"&gt;wx.onBluetoothDeviceFound&lt;/a&gt; 回调了某个设备，则此设备会添加到 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.getBluetoothDevices.html"&gt;wx.getBluetoothDevices&lt;/a&gt; 接口获取到的数组中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// ArrayBuffer转16进度字符串示例
function ab2hex(buffer) {
  var hexArr = Array.prototype.map.call(
    new Uint8Array(buffer),
    function(bit) {
      return (&amp;#39;00&amp;#39; + bit.toString(16)).slice(-2)
    }
  )
  return hexArr.join(&amp;#39;&amp;#39;);
}
wx.onBluetoothDeviceFound(function(devices) {
  console.log(&amp;#39;new device list has founded&amp;#39;)
  console.dir(devices)
  console.log(ab2hex(devices[0].advertisData))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安卓下部分机型需要有位置权限才能搜索到设备，需留意是否开启了位置权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onCompassChange">
                <parameters>
                    <parameter name="callback" type="OnCompassChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.onCompassChange.html"&gt;wx.onCompassChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听罗盘数据变化事件。频率：5 次/秒，接口调用后会自动开始监听，可使用 wx.stopCompass 停止监听。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;accuracy 在 iOS/Android 的差异&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于平台差异，accuracy 在 iOS/Android 的值不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS：accuracy 是一个 number 类型的值，表示相对于磁北极的偏差。0 表示设备指向磁北，90 表示指向东，180 表示指向南，依此类推。&lt;/li&gt;
&lt;li&gt;Android：accuracy 是一个 string 类型的枚举值。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;td&gt;高精度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;td&gt;中等精度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;td&gt;低精度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no-contact&lt;/td&gt;
&lt;td&gt;不可信，传感器失去连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unreliable&lt;/td&gt;
&lt;td&gt;不可信，原因未知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unknow ${value}&lt;/td&gt;
&lt;td&gt;未知的精度枚举值，即该 Android 系统此时返回的表示精度的 value 不是一个标准的精度枚举值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
            </method>
            <method name="onDeviceMotionChange">
                <parameters>
                    <parameter name="callback" type="OnDeviceMotionChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.onDeviceMotionChange.html"&gt;wx.onDeviceMotionChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听设备方向变化事件。频率根据 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.startDeviceMotionListening.html"&gt;wx.startDeviceMotionListening()&lt;/a&gt; 的 interval 参数。可以使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.stopDeviceMotionListening.html"&gt;wx.stopDeviceMotionListening()&lt;/a&gt; 停止监听。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onError">
                <parameters>
                    <parameter name="callback" type="OnAppErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onError.html"&gt;wx.onError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序错误事件。如脚本错误或 API 调用报错等。该事件与 &lt;a href="(App#onerrorstring-error)"&gt;&lt;code&gt;App.onError&lt;/code&gt;&lt;/a&gt; 的回调时机与参数一致。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onGetWifiList">
                <parameters>
                    <parameter name="callback" type="OnGetWifiListCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onGetWifiList.html"&gt;wx.onGetWifiList(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听获取到 Wi-Fi 列表数据事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onGyroscopeChange">
                <parameters>
                    <parameter name="callback" type="OnGyroscopeChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.onGyroscopeChange.html"&gt;wx.onGyroscopeChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听陀螺仪数据变化事件。频率根据 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.startGyroscope.html"&gt;wx.startGyroscope()&lt;/a&gt; 的 interval 参数。可以使用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.stopGyroscope.html"&gt;wx.stopGyroscope()&lt;/a&gt; 停止监听。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onHCEMessage">
                <parameters>
                    <parameter name="callback" type="OnHCEMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.onHCEMessage.html"&gt;wx.onHCEMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听接收 NFC 设备消息事件，仅能注册一个监听&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onKeyboardHeightChange">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/keyboard/wx.onKeyboardHeightChange.html"&gt;wx.onKeyboardHeightChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听键盘高度变化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onKeyboardHeightChange(res =&amp;gt; {
  console.log(res.height)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocalServiceDiscoveryStop">
                <parameters>
                    <parameter name="callback" type="OnLocalServiceDiscoveryStopCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceDiscoveryStop.html"&gt;wx.onLocalServiceDiscoveryStop(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 mDNS 服务停止搜索的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocalServiceFound">
                <parameters>
                    <parameter name="callback" type="OnLocalServiceFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceFound.html"&gt;wx.onLocalServiceFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 mDNS 服务发现的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocalServiceLost">
                <parameters>
                    <parameter name="callback" type="OnLocalServiceLostCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceLost.html"&gt;wx.onLocalServiceLost(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 mDNS 服务离开的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocalServiceResolveFail">
                <parameters>
                    <parameter name="callback" type="OnLocalServiceResolveFailCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.onLocalServiceResolveFail.html"&gt;wx.onLocalServiceResolveFail(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 mDNS 服务解析失败的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onLocationChange">
                <parameters>
                    <parameter name="callback" type="OnLocationChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.onLocationChange.html"&gt;wx.onLocationChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听实时地理位置变化事件，需结合 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html"&gt;wx.startLocationUpdateBackground&lt;/a&gt;、&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdate.html"&gt;wx.startLocationUpdate&lt;/a&gt;使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt; const _locationChangeFn = function(res) {
  console.log(&amp;#39;location change&amp;#39;, res)
 }
 wx.onLocationChange(_locationChangeFn)
 wx.offLocationChange(_locationChangeFn)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onMemoryWarning">
                <parameters>
                    <parameter name="callback" type="OnMemoryWarningCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/performance/wx.onMemoryWarning.html"&gt;wx.onMemoryWarning(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听内存不足告警事件。&lt;/p&gt;
&lt;p&gt;当 iOS/Android 向小程序进程发出内存警告时，触发该事件。触发该事件不意味小程序被杀，大部分情况下仅仅是告警，开发者可在收到通知后回收一些不必要资源避免进一步加剧内存紧张。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;```js
         * wx.onMemoryWarning(function () {
         *   console.log(&amp;#39;onMemoryWarningReceive&amp;#39;)
         * })
         * ``
         *
         * 最低基础库： &lt;code&gt;2.0.2&lt;/code&gt; *&lt;/p&gt;
</description>
            </method>
            <method name="onNetworkStatusChange">
                <parameters>
                    <parameter name="callback" type="OnNetworkStatusChangeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/network/wx.onNetworkStatusChange.html"&gt;wx.onNetworkStatusChange(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听网络状态变化事件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onNetworkStatusChange(function (res) {
  console.log(res.isConnected)
  console.log(res.networkType)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onPageNotFound">
                <parameters>
                    <parameter name="callback" type="OnPageNotFoundCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html"&gt;wx.onPageNotFound(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听小程序要打开的页面不存在事件。该事件与 &lt;a href="(App#onpagenotfoundobject-object)"&gt;&lt;code&gt;App.onPageNotFound&lt;/code&gt;&lt;/a&gt; 的回调时机一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者可以在回调中进行页面重定向，但必须在回调中&lt;strong&gt;同步&lt;/strong&gt;处理，异步处理（例如 &lt;code&gt;setTimeout&lt;/code&gt; 异步执行）无效。&lt;/li&gt;
&lt;li&gt;若开发者没有调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onPageNotFound.html"&gt;wx.onPageNotFound&lt;/a&gt; 绑定监听，也没有声明 &lt;code&gt;App.onPageNotFound&lt;/code&gt;，当跳转页面不存在时，将推入微信客户端原生的页面不存在提示页面。&lt;/li&gt;
&lt;li&gt;如果回调中又重定向到另一个不存在的页面，将推入微信客户端原生的页面不存在提示页面，并且不再第二次回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.2&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onSocketClose">
                <parameters>
                    <parameter name="callback" type="OnSocketCloseCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketClose.html"&gt;wx.onSocketClose(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 连接关闭事件&lt;/p&gt;
</description>
            </method>
            <method name="onSocketError">
                <parameters>
                    <parameter name="callback" type="OnSocketErrorCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketError.html"&gt;wx.onSocketError(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 错误事件&lt;/p&gt;
</description>
            </method>
            <method name="onSocketMessage">
                <parameters>
                    <parameter name="callback" type="OnSocketMessageCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketMessage.html"&gt;wx.onSocketMessage(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 接受到服务器的消息事件&lt;/p&gt;
</description>
            </method>
            <method name="onSocketOpen">
                <parameters>
                    <parameter name="callback" type="OnSocketOpenCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.onSocketOpen.html"&gt;wx.onSocketOpen(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听 WebSocket 连接打开事件&lt;/p&gt;
</description>
            </method>
            <method name="onUserCaptureScreen">
                <parameters>
                    <parameter name="callback" type="OnUserCaptureScreenCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.onUserCaptureScreen.html"&gt;wx.onUserCaptureScreen(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听用户主动截屏事件。用户使用系统截屏按键截屏时触发，只能注册一个监听&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onUserCaptureScreen(function (res) {
  console.log(&amp;#39;用户截屏了&amp;#39;)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onWifiConnected">
                <parameters>
                    <parameter name="callback" type="OnWifiConnectedCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.onWifiConnected.html"&gt;wx.onWifiConnected(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听连接上 Wi-Fi 的事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="onWindowResize">
                <parameters>
                    <parameter name="callback" type="OnWindowResizeCallback"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.onWindowResize.html"&gt;wx.onWindowResize(function callback)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监听窗口尺寸变化事件&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="openBluetoothAdapter">
                <parameters>
                    <parameter name="option" type="OpenBluetoothAdapterOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html"&gt;wx.openBluetoothAdapter(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化蓝牙模块&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他蓝牙相关 API 必须在 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html"&gt;wx.openBluetoothAdapter&lt;/a&gt; 调用之后使用。否则 API 会返回错误（errCode=10000）。&lt;/li&gt;
&lt;li&gt;在用户蓝牙开关未开启或者手机不支持蓝牙功能的情况下，调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.openBluetoothAdapter.html"&gt;wx.openBluetoothAdapter&lt;/a&gt; 会返回错误（errCode=10001），表示手机蓝牙功能不可用。此时小程序蓝牙模块已经初始化完成，可通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.onBluetoothAdapterStateChange.html"&gt;wx.onBluetoothAdapterStateChange&lt;/a&gt; 监听手机蓝牙状态的改变，也可以调用蓝牙模块的所有API。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.openBluetoothAdapter({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="openCard">
                <parameters>
                    <parameter name="option" type="OpenCardOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/card/wx.openCard.html"&gt;wx.openCard(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看微信卡包中的卡券。只有通过 &lt;a href="https://developers.weixin.qq.com/miniprogram/product/renzheng.html"&gt;认证&lt;/a&gt; 的小程序或文化互动类目的小游戏才能使用。更多文档请参考 &lt;a href="https://mp.weixin.qq.com/cgi-bin/announce?action=getannouncement&amp;amp;key=1490190158&amp;amp;version=1&amp;amp;lang=zh_CN&amp;amp;platform=2"&gt;微信卡券接口文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.openCard({
  cardList: [{
    cardId: &amp;#39;&amp;#39;,
    code: &amp;#39;&amp;#39;
  }, {
    cardId: &amp;#39;&amp;#39;,
    code: &amp;#39;&amp;#39;
  }],
  success (res) { }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="openDocument">
                <parameters>
                    <parameter name="option" type="OpenDocumentOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html"&gt;wx.openDocument(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新开页面打开文档&lt;/p&gt;
</description>
            </method>
            <method name="openLocation">
                <parameters>
                    <parameter name="option" type="OpenLocationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.openLocation.html"&gt;wx.openLocation(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用微信内置地图查看位置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt; wx.getLocation({
  type: &amp;#39;gcj02&amp;#39;, //返回可以用于wx.openLocation的经纬度
  success (res) {
    const latitude = res.latitude
    const longitude = res.longitude
    wx.openLocation({
      latitude,
      longitude,
      scale: 18
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="openSetting">
                <parameters>
                    <parameter name="option" type="OpenSettingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.openSetting.html"&gt;wx.openSetting(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调起客户端小程序设置界面，返回用户设置的操作结果。&lt;strong&gt;设置界面只会出现小程序已经向用户请求过的&lt;a href="(authorize)"&gt;权限&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意：{% version(2.3.0) %} 版本开始，用户发生点击行为后，才可以跳转打开设置页，管理授权信息。[详情]({% postUrl(000cea2305cc5047af5733de751008) %})&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.openSetting({
  success (res) {
    console.log(res.authSetting)
    // res.authSetting = {
    //   &amp;quot;scope.userInfo&amp;quot;: true,
    //   &amp;quot;scope.userLocation&amp;quot;: true
    // }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="pageScrollTo">
                <parameters>
                    <parameter name="option" type="PageScrollToOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/scroll/wx.pageScrollTo.html"&gt;wx.pageScrollTo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将页面滚动到目标位置，支持选择器和滚动距离两种方式定位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;selector 语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;selector类似于 CSS 的选择器，但仅支持下列语法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID选择器：#the-id&lt;/li&gt;
&lt;li&gt;class选择器（可以连续指定多个）：.a-class.another-class&lt;/li&gt;
&lt;li&gt;子元素选择器：.the-parent &amp;gt; .the-child&lt;/li&gt;
&lt;li&gt;后代选择器：.the-ancestor .the-descendant&lt;/li&gt;
&lt;li&gt;跨自定义组件的后代选择器：.the-ancestor &amp;gt;&amp;gt;&amp;gt; .the-descendant&lt;/li&gt;
&lt;li&gt;多选择器的并集：#a-node, .some-other-nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.pageScrollTo({
  scrollTop: 0,
  duration: 300
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="pauseBackgroundAudio">
                <parameters>
                    <parameter name="option" type="PauseBackgroundAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.pauseBackgroundAudio.html"&gt;wx.pauseBackgroundAudio(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停播放音乐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.pauseBackgroundAudio()&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="pauseVoice">
                <parameters>
                    <parameter name="option" type="PauseVoiceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.pauseVoice.html"&gt;wx.pauseVoice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;暂停正在播放的语音。再次调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.playVoice.html"&gt;wx.playVoice&lt;/a&gt; 播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.stopVoice.html"&gt;wx.stopVoice&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
    wx.playVoice({
      filePath: tempFilePath
    })

    setTimeout(() =&amp;gt; { wx.pauseVoice() }, 5000)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="playBackgroundAudio">
                <parameters>
                    <parameter name="option" type="PlayBackgroundAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.playBackgroundAudio.html"&gt;wx.playBackgroundAudio(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用后台播放器播放音乐。对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.playBackgroundAudio({
  dataUrl: &amp;#39;&amp;#39;,
  title: &amp;#39;&amp;#39;,
  coverImgUrl: &amp;#39;&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="playVoice">
                <parameters>
                    <parameter name="option" type="PlayVoiceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.playVoice.html"&gt;wx.playVoice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始播放语音。同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
    wx.playVoice({
      filePath: tempFilePath,
      complete () { }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="previewImage">
                <parameters>
                    <parameter name="option" type="PreviewImageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html"&gt;wx.previewImage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在新页面中全屏预览图片。预览的过程中用户可以进行保存图片、发送给朋友等操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.previewImage({
  current: &amp;#39;&amp;#39;, // 当前显示图片的http链接
  urls: [] // 需要预览的图片http链接列表
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="reLaunch">
                <parameters>
                    <parameter name="option" type="ReLaunchOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.reLaunch.html"&gt;wx.reLaunch(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭所有页面，打开到应用内的某个页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.reLaunch({
  url: &amp;#39;test?id=1&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;// test&lt;/li&gt;
&lt;li&gt;Page({&lt;/li&gt;
&lt;li&gt;onLoad (option) {&lt;/li&gt;
&lt;li&gt;console.log(option.query)&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;})&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="readBLECharacteristicValue">
                <parameters>
                    <parameter name="option" type="ReadBLECharacteristicValueOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.readBLECharacteristicValue.html"&gt;wx.readBLECharacteristicValue(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持 read 才可以成功调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行调用多次会存在读失败的可能性。&lt;/li&gt;
&lt;li&gt;接口读取到的信息需要在 &lt;code&gt;onBLECharacteristicValueChange&lt;/code&gt; 方法注册的回调中获取。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 必须在这里的回调才能获取
wx.onBLECharacteristicValueChange(function(characteristic) {
  console.log(&amp;#39;characteristic value comed:&amp;#39;, characteristic)
})

wx.readBLECharacteristicValue({
  // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
  deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId,
  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
  characteristicId,
  success (res) {
    console.log(&amp;#39;readBLECharacteristicValue:&amp;#39;, res.errCode)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="redirectTo">
                <parameters>
                    <parameter name="option" type="RedirectToOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html"&gt;wx.redirectTo(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.redirectTo({
  url: &amp;#39;test?id=1&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="removeSavedFile">
                <parameters>
                    <parameter name="option" type="WxRemoveSavedFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.removeSavedFile.html"&gt;wx.removeSavedFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;删除本地缓存文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.getSavedFileList({
 success (res) {
   if (res.fileList.length &amp;gt; 0){
     wx.removeSavedFile({
       filePath: res.fileList[0].filePath,
       complete (res) {
         console.log(res)
       }
     })
   }
 }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="removeStorage">
                <parameters>
                    <parameter name="option" type="RemoveStorageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorage.html"&gt;wx.removeStorage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从本地缓存中移除指定 key&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.removeStorage({
  key: &amp;#39;key&amp;#39;,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.removeStorageSync(&amp;#39;key&amp;#39;)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="removeStorageSync">
                <parameters>
                    <parameter name="key" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorageSync.html"&gt;wx.removeStorageSync(string key)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.removeStorage.html"&gt;wx.removeStorage&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.removeStorage({
  key: &amp;#39;key&amp;#39;,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.removeStorageSync(&amp;#39;key&amp;#39;)
} catch (e) {
  // Do something when catch error
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="removeTabBarBadge">
                <parameters>
                    <parameter name="option" type="RemoveTabBarBadgeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.removeTabBarBadge.html"&gt;wx.removeTabBarBadge(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;移除 tabBar 某一项右上角的文本&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="reportAnalytics">
                <parameters>
                    <parameter name="eventName" type="String"/>
                    <parameter name="data" type="IAnyObject"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/data-analysis/wx.reportAnalytics.html"&gt;wx.reportAnalytics(string eventName, Object data)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自定义分析数据上报接口。使用前，需要在小程序管理后台自定义分析中新建事件，配置好事件名与字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.reportAnalytics(&amp;#39;purchase&amp;#39;, {
  price: 120,
  color: &amp;#39;red&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="reportMonitor">
                <parameters>
                    <parameter name="name" type="String"/>
                    <parameter name="value" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/report/wx.reportMonitor.html"&gt;wx.reportMonitor(string name, number value)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自定义业务数据监控上报接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用前，需要在「小程序管理后台-运维中心-性能监控-业务数据监控」中新建监控事件，配置监控描述与告警类型。每一个监控事件对应唯一的监控ID，开发者最多可以创建128个监控事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.reportMonitor(&amp;#39;1&amp;#39;, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.0.1&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="requestPayment">
                <parameters>
                    <parameter name="option" type="RequestPaymentOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/payment/wx.requestPayment.html"&gt;wx.requestPayment(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发起微信支付。了解更多信息，请查看&lt;a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&amp;amp;index=1"&gt;微信支付接口文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.requestPayment({
  timeStamp: &amp;#39;&amp;#39;,
  nonceStr: &amp;#39;&amp;#39;,
  package: &amp;#39;&amp;#39;,
  signType: &amp;#39;MD5&amp;#39;,
  paySign: &amp;#39;&amp;#39;,
  success (res) { },
  fail (res) { }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="saveFile">
                <parameters>
                    <parameter name="option" type="WxSaveFileOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.saveFile.html"&gt;wx.saveFile(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保存文件到本地。注意：&lt;strong&gt;saveFile 会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.chooseImage({
  success: function(res) {
    const tempFilePaths = res.tempFilePaths
    wx.saveFile({
      tempFilePath: tempFilePaths[0],
      success (res) {
        const savedFilePath = res.savedFilePath
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本地文件存储的大小限制为 10M&lt;/p&gt;
</description>
            </method>
            <method name="saveImageToPhotosAlbum">
                <parameters>
                    <parameter name="option" type="SaveImageToPhotosAlbumOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html"&gt;wx.saveImageToPhotosAlbum(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保存图片到系统相册。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.saveImageToPhotosAlbum({
  success(res) { }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="saveVideoToPhotosAlbum">
                <parameters>
                    <parameter name="option" type="SaveVideoToPhotosAlbumOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.saveVideoToPhotosAlbum.html"&gt;wx.saveVideoToPhotosAlbum(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;保存视频到系统相册。支持mp4视频格式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.saveVideoToPhotosAlbum({
  filePath: &amp;#39;wxfile://xxx&amp;#39;,
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="scanCode">
                <parameters>
                    <parameter name="option" type="ScanCodeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/scan/wx.scanCode.html"&gt;wx.scanCode(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调起客户端扫码界面进行扫码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 允许从相机和相册扫码
wx.scanCode({
  success (res) {
    console.log(res)
  }
})

// 只允许从相机扫码
wx.scanCode({
  onlyFromCamera: true,
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="seekBackgroundAudio">
                <parameters>
                    <parameter name="option" type="SeekBackgroundAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.seekBackgroundAudio.html"&gt;wx.seekBackgroundAudio(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;控制音乐播放进度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.seekBackgroundAudio({
  position: 30
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="sendHCEMessage">
                <parameters>
                    <parameter name="option" type="SendHCEMessageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.sendHCEMessage.html"&gt;wx.sendHCEMessage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;发送 NFC 消息。仅在安卓系统下有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const buffer = new ArrayBuffer(1)
const dataView = new DataView(buffer)
dataView.setUint8(0, 0)

wx.startHCE({
  success (res) {
    wx.onHCEMessage(function(res) {
      if (res.messageType === 1) {
        wx.sendHCEMessage({data: buffer})
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="sendSocketMessage">
                <parameters>
                    <parameter name="option" type="SendSocketMessageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/websocket/wx.sendSocketMessage.html"&gt;wx.sendSocketMessage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过 WebSocket 连接发送数据。需要先 wx.connectSocket，并在 wx.onSocketOpen 回调之后才能发送。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;let socketOpen = false
const socketMsgQueue = []
wx.connectSocket({
  url: &amp;#39;test.php&amp;#39;
})

wx.onSocketOpen(function(res) {
  socketOpen = true
  for (let i = 0; i &amp;lt; socketMsgQueue.length; i++){
    sendSocketMessage(socketMsgQueue[i])
  }
  socketMsgQueue = []
})

function sendSocketMessage(msg) {
  if (socketOpen) {
    wx.sendSocketMessage({
      data:msg
    })
  } else {
    socketMsgQueue.push(msg)
  }
}&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="setBackgroundColor">
                <parameters>
                    <parameter name="option" type="SetBackgroundColorOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/background/wx.setBackgroundColor.html"&gt;wx.setBackgroundColor(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置窗口的背景色&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setBackgroundColor({
  backgroundColor: &amp;#39;#ffffff&amp;#39;, // 窗口的背景色为白色
})

wx.setBackgroundColor({
  backgroundColorTop: &amp;#39;#ffffff&amp;#39;, // 顶部窗口的背景色为白色
  backgroundColorBottom: &amp;#39;#ffffff&amp;#39;, // 底部窗口的背景色为白色
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setBackgroundFetchToken">
                <parameters>
                    <parameter name="option" type="SetBackgroundFetchTokenOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/backgroundFetch/wx.setBackgroundFetchToken.html"&gt;wx.setBackgroundFetchToken(object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置自定义登录态，在周期性拉取数据时带上，便于第三方服务器验证请求合法性&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setBackgroundTextStyle">
                <parameters>
                    <parameter name="option" type="SetBackgroundTextStyleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/background/wx.setBackgroundTextStyle.html"&gt;wx.setBackgroundTextStyle(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置下拉背景字体、loading 图的样式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setBackgroundTextStyle({
  textStyle: &amp;#39;dark&amp;#39; // 下拉背景字体、loading 图的样式为dark
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setClipboardData">
                <parameters>
                    <parameter name="option" type="SetClipboardDataOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/clipboard/wx.setClipboardData.html"&gt;wx.setClipboardData(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置系统剪贴板的内容。调用成功后，会弹出 toast 提示&amp;quot;内容已复制&amp;quot;，持续 1.5s&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setClipboardData({
  data: &amp;#39;data&amp;#39;,
  success (res) {
    wx.getClipboardData({
      success (res) {
        console.log(res.data) // data
      }
    })
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setEnableDebug">
                <parameters>
                    <parameter name="option" type="SetEnableDebugOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/debug/wx.setEnableDebug.html"&gt;wx.setEnableDebug(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置是否打开调试开关。此开关对正式版也能生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;// 打开调试
wx.setEnableDebug({
  enableDebug: true
})

// 关闭调试
wx.setEnableDebug({
  enableDebug: false
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在正式版打开调试还有一种方法，就是先在开发版或体验版打开调试，再切到正式版就能看到vConsole。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setInnerAudioOption">
                <parameters>
                    <parameter name="option" type="SetInnerAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.setInnerAudioOption.html"&gt;wx.setInnerAudioOption(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/InnerAudioContext.html"&gt;InnerAudioContext&lt;/a&gt; 的播放选项。设置之后对当前小程序全局生效。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setKeepScreenOn">
                <parameters>
                    <parameter name="option" type="SetKeepScreenOnOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setKeepScreenOn.html"&gt;wx.setKeepScreenOn(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setKeepScreenOn({
  keepScreenOn: true
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setNavigationBarColor">
                <parameters>
                    <parameter name="option" type="SetNavigationBarColorOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarColor.html"&gt;wx.setNavigationBarColor(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置页面导航条颜色&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setNavigationBarTitle">
                <parameters>
                    <parameter name="option" type="SetNavigationBarTitleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.setNavigationBarTitle.html"&gt;wx.setNavigationBarTitle(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置当前页面的标题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setNavigationBarTitle({
  title: &amp;#39;当前页面&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="setScreenBrightness">
                <parameters>
                    <parameter name="option" type="SetScreenBrightnessOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/screen/wx.setScreenBrightness.html"&gt;wx.setScreenBrightness(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置屏幕亮度&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setStorage">
                <parameters>
                    <parameter name="option" type="SetStorageOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html"&gt;wx.setStorage(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。除非用户主动删除或因存储空间原因被系统清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setStorage({
  key:&amp;quot;key&amp;quot;,
  data:&amp;quot;value&amp;quot;
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.setStorageSync(&amp;#39;key&amp;#39;, &amp;#39;value&amp;#39;)
} catch (e) { }&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="setStorageSync">
                <parameters>
                    <parameter name="key" type="String"/>
                    <parameter name="data" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorageSync.html"&gt;wx.setStorageSync(string key, any data)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html"&gt;wx.setStorage&lt;/a&gt; 的同步版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setStorage({
  key:&amp;quot;key&amp;quot;,
  data:&amp;quot;value&amp;quot;
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;try {
  wx.setStorageSync(&amp;#39;key&amp;#39;, &amp;#39;value&amp;#39;)
} catch (e) { }&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="setTabBarBadge">
                <parameters>
                    <parameter name="option" type="SetTabBarBadgeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarBadge.html"&gt;wx.setTabBarBadge(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为 tabBar 某一项的右上角添加文本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setTabBarBadge({
  index: 0,
  text: &amp;#39;1&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTabBarItem">
                <parameters>
                    <parameter name="option" type="SetTabBarItemOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarItem.html"&gt;wx.setTabBarItem(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置 tabBar 某一项的内容，&lt;code&gt;2.7.0&lt;/code&gt; 起图片支持临时文件和网络文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setTabBarItem({
  index: 0,
  text: &amp;#39;text&amp;#39;,
  iconPath: &amp;#39;/path/to/iconPath&amp;#39;,
  selectedIconPath: &amp;#39;/path/to/selectedIconPath&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTabBarStyle">
                <parameters>
                    <parameter name="option" type="SetTabBarStyleOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.setTabBarStyle.html"&gt;wx.setTabBarStyle(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置 tabBar 的整体样式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setTabBarStyle({
  color: &amp;#39;#FF0000&amp;#39;,
  selectedColor: &amp;#39;#00FF00&amp;#39;,
  backgroundColor: &amp;#39;#0000FF&amp;#39;,
  borderStyle: &amp;#39;white&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setTopBarText">
                <parameters>
                    <parameter name="option" type="SetTopBarTextOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/sticky/wx.setTopBarText.html"&gt;wx.setTopBarText(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态设置置顶栏文字内容。只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.setTopBarText({
  text: &amp;#39;hello, world!&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用成功后，需间隔 5s 才能再次调用此接口，如果在 5s 内再次调用此接口，会回调 fail，errMsg：&amp;quot;setTopBarText: fail invoke too frequently&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.4.3&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="setWifiList">
                <parameters>
                    <parameter name="option" type="SetWifiListOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.setWifiList.html"&gt;wx.setWifiList(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置 &lt;code&gt;wifiList&lt;/code&gt; 中 AP 的相关信息。在 &lt;code&gt;onGetWifiList&lt;/code&gt; 回调后调用，&lt;strong&gt;iOS特有接口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该接口只能在 &lt;code&gt;onGetWifiList&lt;/code&gt; 回调之后才能调用。&lt;/li&gt;
&lt;li&gt;此时客户端会挂起，等待小程序设置 Wi-Fi 信息，请务必尽快调用该接口，若无数据请传入一个空数组。&lt;/li&gt;
&lt;li&gt;有可能随着周边 Wi-Fi 列表的刷新，单个流程内收到多次带有存在重复的 Wi-Fi 列表的回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.onGetWifiList(function(res) {
  if (res.wifiList.length) {
    wx.setWifiList({
      wifiList: [{
        SSID: res.wifiList[0].SSID,
        BSSID: res.wifiList[0].BSSID,
        password: &amp;#39;123456&amp;#39;
      }]
    })
  } else {
    wx.setWifiList({
      wifiList: []
    })
  }
})
wx.getWifiList()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showActionSheet">
                <parameters>
                    <parameter name="option" type="ShowActionSheetOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showActionSheet.html"&gt;wx.showActionSheet(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示操作菜单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showActionSheet({
  itemList: [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;],
  success (res) {
    console.log(res.tapIndex)
  },
  fail (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 6.7.2 以下版本，点击取消或蒙层时，回调 fail, errMsg 为 &amp;quot;fail cancel&amp;quot;；&lt;/li&gt;
&lt;li&gt;Android 6.7.2 及以上版本 和 iOS 点击蒙层不会关闭模态弹窗，所以尽量避免使用「取消」分支中实现业务逻辑&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="showLoading">
                <parameters>
                    <parameter name="option" type="ShowLoadingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html"&gt;wx.showLoading(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示 loading 提示框。需主动调用 wx.hideLoading 才能关闭提示框&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showLoading({
  title: &amp;#39;加载中&amp;#39;,
})

setTimeout(function () {
  wx.hideLoading()
}, 2000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html"&gt;wx.showLoading&lt;/a&gt; 和 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html"&gt;wx.showToast&lt;/a&gt; 同时只能显示一个&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html"&gt;wx.showLoading&lt;/a&gt; 应与 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideLoading.html"&gt;wx.hideLoading&lt;/a&gt; 配对使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showModal">
                <parameters>
                    <parameter name="option" type="ShowModalOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showModal.html"&gt;wx.showModal(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示模态对话框&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showModal({
  title: &amp;#39;提示&amp;#39;,
  content: &amp;#39;这是一个模态弹窗&amp;#39;,
  success (res) {
    if (res.confirm) {
      console.log(&amp;#39;用户点击确定&amp;#39;)
    } else if (res.cancel) {
      console.log(&amp;#39;用户点击取消&amp;#39;)
    }
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 6.7.2 以下版本，点击取消或蒙层时，回调 fail, errMsg 为 &amp;quot;fail cancel&amp;quot;；&lt;/li&gt;
&lt;li&gt;Android 6.7.2 及以上版本 和 iOS 点击蒙层不会关闭模态弹窗，所以尽量避免使用「取消」分支中实现业务逻辑&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="showNavigationBarLoading">
                <parameters>
                    <parameter name="option" type="ShowNavigationBarLoadingOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/navigation-bar/wx.showNavigationBarLoading.html"&gt;wx.showNavigationBarLoading(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在当前页面显示导航条加载动画&lt;/p&gt;
</description>
            </method>
            <method name="showShareMenu">
                <parameters>
                    <parameter name="option" type="ShowShareMenuOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.showShareMenu.html"&gt;wx.showShareMenu(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示当前页面的转发按钮&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showShareMenu({
  withShareTicket: true
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showTabBar">
                <parameters>
                    <parameter name="option" type="ShowTabBarOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.showTabBar.html"&gt;wx.showTabBar(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示 tabBar&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showTabBarRedDot">
                <parameters>
                    <parameter name="option" type="ShowTabBarRedDotOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/tab-bar/wx.showTabBarRedDot.html"&gt;wx.showTabBarRedDot(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示 tabBar 某一项的右上角的红点&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.9.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="showToast">
                <parameters>
                    <parameter name="option" type="ShowToastOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html"&gt;wx.showToast(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;显示消息提示框&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.showToast({
  title: &amp;#39;成功&amp;#39;,
  icon: &amp;#39;success&amp;#39;,
  duration: 2000
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showLoading.html"&gt;wx.showLoading&lt;/a&gt; 和 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html"&gt;wx.showToast&lt;/a&gt; 同时只能显示一个&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html"&gt;wx.showToast&lt;/a&gt; 应与 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.hideToast.html"&gt;wx.hideToast&lt;/a&gt; 配对使用&lt;/li&gt;
&lt;/ul&gt;
</description>
            </method>
            <method name="startAccelerometer">
                <parameters>
                    <parameter name="option" type="StartAccelerometerOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.startAccelerometer.html"&gt;wx.startAccelerometer(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听加速度数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startAccelerometer({
  interval: &amp;#39;game&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据机型性能、当前 CPU 与内存的占用情况，&lt;code&gt;interval&lt;/code&gt; 的设置与实际 &lt;code&gt;wx.onAccelerometerChange()&lt;/code&gt; 回调函数的执行频率会有一些出入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startBeaconDiscovery">
                <parameters>
                    <parameter name="option" type="StartBeaconDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.startBeaconDiscovery.html"&gt;wx.startBeaconDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始搜索附近的 iBeacon 设备&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startBeaconDiscovery({
  success(res) { }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startBluetoothDevicesDiscovery">
                <parameters>
                    <parameter name="option" type="StartBluetoothDevicesDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.startBluetoothDevicesDiscovery.html"&gt;wx.startBluetoothDevicesDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始搜寻附近的蓝牙外围设备。&lt;strong&gt;此操作比较耗费系统资源，请在搜索并连接到设备后调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.stopBluetoothDevicesDiscovery.html"&gt;wx.stopBluetoothDevicesDiscovery&lt;/a&gt; 方法停止搜索。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 以微信硬件平台的蓝牙智能灯为例，主服务的 UUID 是 FEE7。传入这个参数，只搜索主服务 UUID 为 FEE7 的设备
wx.startBluetoothDevicesDiscovery({
  services: [&amp;#39;FEE7&amp;#39;],
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startCompass">
                <parameters>
                    <parameter name="option" type="StartCompassOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.startCompass.html"&gt;wx.startCompass(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听罗盘数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startCompass()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startDeviceMotionListening">
                <parameters>
                    <parameter name="option" type="StartDeviceMotionListeningOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.startDeviceMotionListening.html"&gt;wx.startDeviceMotionListening(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听设备方向的变化。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startGyroscope">
                <parameters>
                    <parameter name="option" type="StartGyroscopeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.startGyroscope.html"&gt;wx.startGyroscope(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始监听陀螺仪数据。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startHCE">
                <parameters>
                    <parameter name="option" type="StartHCEOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.startHCE.html"&gt;wx.startHCE(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化 NFC 模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startHCE({
  aid_list: [&amp;#39;F222222222&amp;#39;],
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startLocalServiceDiscovery">
                <parameters>
                    <parameter name="option" type="StartLocalServiceDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.startLocalServiceDiscovery.html"&gt;wx.startLocalServiceDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始搜索局域网下的 mDNS 服务。搜索的结果会通过 wx.onLocalService* 事件返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;wx.startLocalServiceDiscovery 是一个消耗性能的行为，开始 30 秒后会自动 stop 并执行 wx.onLocalServiceDiscoveryStop 注册的回调函数。&lt;/li&gt;
&lt;li&gt;在调用 wx.startLocalServiceDiscovery 后，在这次搜索行为停止后才能发起下次 wx.startLocalServiceDiscovery。停止本次搜索行为的操作包括调用 wx.stopLocalServiceDiscovery 和 30 秒后系统自动 stop 本次搜索。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startLocationUpdate">
                <parameters>
                    <parameter name="option" type="StartLocationUpdateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdate.html"&gt;wx.startLocationUpdate(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开启小程序进入前台时接收位置消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取位置信息需配置&lt;a href="(configuration/app#permission)"&gt;地理位置用途说明&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startLocationUpdateBackground">
                <parameters>
                    <parameter name="option" type="StartLocationUpdateBackgroundOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.startLocationUpdateBackground.html"&gt;wx.startLocationUpdateBackground(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开启小程序进入前后台时均接收位置消息，需引导用户开启&lt;a href="(open-ability/authorize#%E5%90%8E%E5%8F%B0%E5%AE%9A%E4%BD%8D)"&gt;授权&lt;/a&gt;。授权以后，小程序在运行中或进入后台均可接受位置消息变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安卓微信7.0.6版本，iOS 7.0.5版本起支持该接口&lt;/li&gt;
&lt;li&gt;需在app.json中配置requireBackgroundModes: [&amp;#39;location&amp;#39;]后使用&lt;/li&gt;
&lt;li&gt;获取位置信息需配置&lt;a href="(configuration/app#permission)"&gt;地理位置用途说明&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startPullDownRefresh">
                <parameters>
                    <parameter name="option" type="StartPullDownRefreshOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.startPullDownRefresh.html"&gt;wx.startPullDownRefresh(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始下拉刷新。调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startPullDownRefresh()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startRecord">
                <parameters>
                    <parameter name="option" type="WxStartRecordOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.startRecord.html"&gt;wx.startRecord(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始录音。当主动调用 &lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.stopRecord.html"&gt;wx.stopRecord&lt;/a&gt;，或者录音超过1分钟时自动结束录音。当用户离开小程序时，此接口无法调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
  }
})
setTimeout(function () {
  wx.stopRecord() // 结束录音
}, 10000)&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="startSoterAuthentication">
                <parameters>
                    <parameter name="option" type="StartSoterAuthenticationOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/soter/wx.startSoterAuthentication.html"&gt;wx.startSoterAuthentication(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始 SOTER 生物认证。验证流程请参考&lt;a href="(open-ability/bio-auth)"&gt;说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;resultJSON 说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此数据为设备TEE中，将传入的challenge和TEE内其他安全信息组成的数据进行组装而来的JSON，对下述字段的解释如下表。例子如下：
| 字段名  | 说明                                                                                      |
|---------|-------------------------------------------------------------------------------------------|
| raw     | 调用者传入的challenge                                                                     |
| fid     | （仅Android支持）本次生物识别认证的生物信息编号（如指纹识别则是指纹信息在本设备内部编号） |
| counter | 防重放特征参数                                                                            |
| tee_n   | TEE名称（如高通或者trustonic等）                                                          |
| tee_v   | TEE版本号                                                                                 |
| fp_n    | 指纹以及相关逻辑模块提供商（如FPC等）                                                     |
| fp_v    | 指纹以及相关模块版本号                                                                    |
| cpu_id  | 机器唯一识别ID                                                                            |
| uid     | 概念同Android系统定义uid，即应用程序编号                                                  |&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;raw&amp;quot;:&amp;quot;msg&amp;quot;,
  &amp;quot;fid&amp;quot;:&amp;quot;2&amp;quot;,
  &amp;quot;counter&amp;quot;:123,
  &amp;quot;tee_n&amp;quot;:&amp;quot;TEE Name&amp;quot;,
  &amp;quot;tee_v&amp;quot;:&amp;quot;TEE Version&amp;quot;,
  &amp;quot;fp_n&amp;quot;:&amp;quot;Fingerprint Sensor Name&amp;quot;,
  &amp;quot;fp_v&amp;quot;:&amp;quot;Fingerprint Sensor Version&amp;quot;,
  &amp;quot;cpu_id&amp;quot;:&amp;quot;CPU Id&amp;quot;,
  &amp;quot;uid&amp;quot;:&amp;quot;21&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;q3tCKkmJ7g2e&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startSoterAuthentication({
   requestAuthModes: [&amp;#39;fingerPrint&amp;#39;],
   challenge: &amp;#39;123456&amp;#39;,
   authContent: &amp;#39;请用指纹解锁&amp;#39;,
   success(res) {
   }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="startWifi">
                <parameters>
                    <parameter name="option" type="StartWifiOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.startWifi.html"&gt;wx.startWifi(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化 Wi-Fi 模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;8P7zrkmd7r2n&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startWifi({
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopAccelerometer">
                <parameters>
                    <parameter name="option" type="StopAccelerometerOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/accelerometer/wx.stopAccelerometer.html"&gt;wx.stopAccelerometer(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听加速度数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopAccelerometer()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopBackgroundAudio">
                <parameters>
                    <parameter name="option" type="StopBackgroundAudioOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/wx.stopBackgroundAudio.html"&gt;wx.stopBackgroundAudio(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止播放音乐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopBackgroundAudio()&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="stopBeaconDiscovery">
                <parameters>
                    <parameter name="option" type="StopBeaconDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/ibeacon/wx.stopBeaconDiscovery.html"&gt;wx.stopBeaconDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止搜索附近的 iBeacon 设备&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopBluetoothDevicesDiscovery">
                <parameters>
                    <parameter name="option" type="StopBluetoothDevicesDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth/wx.stopBluetoothDevicesDiscovery.html"&gt;wx.stopBluetoothDevicesDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopBluetoothDevicesDiscovery({
  success (res) {
    console.log(res)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopCompass">
                <parameters>
                    <parameter name="option" type="StopCompassOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/compass/wx.stopCompass.html"&gt;wx.stopCompass(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听罗盘数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopCompass()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopDeviceMotionListening">
                <parameters>
                    <parameter name="option" type="StopDeviceMotionListeningOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/motion/wx.stopDeviceMotionListening.html"&gt;wx.stopDeviceMotionListening(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听设备方向的变化。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopGyroscope">
                <parameters>
                    <parameter name="option" type="StopGyroscopeOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/gyroscope/wx.stopGyroscope.html"&gt;wx.stopGyroscope(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止监听陀螺仪数据。&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.3.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopHCE">
                <parameters>
                    <parameter name="option" type="StopHCEOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.stopHCE.html"&gt;wx.stopHCE(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭 NFC 模块。仅在安卓系统下有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopHCE({
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.7.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopLocalServiceDiscovery">
                <parameters>
                    <parameter name="option" type="StopLocalServiceDiscoveryOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/mdns/wx.stopLocalServiceDiscovery.html"&gt;wx.stopLocalServiceDiscovery(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止搜索 mDNS 服务&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.4.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopLocationUpdate">
                <parameters>
                    <parameter name="option" type="StopLocationUpdateOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.stopLocationUpdate.html"&gt;wx.stopLocationUpdate(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭监听实时位置变化，前后台都停止消息接收&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;2.8.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopPullDownRefresh">
                <parameters>
                    <parameter name="option" type="StopPullDownRefreshOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/pull-down-refresh/wx.stopPullDownRefresh.html"&gt;wx.stopPullDownRefresh(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止当前页面下拉刷新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;Page({
  onPullDownRefresh () {
    wx.stopPullDownRefresh()
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.5.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="stopRecord">
                <parameters>
                    <parameter name="option" type="WxStopRecordOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/recorder/wx.stopRecord.html"&gt;wx.stopRecord(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;停止录音。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
  }
})
setTimeout(function () {
  wx.stopRecord() // 结束录音
}, 10000)&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="stopVoice">
                <parameters>
                    <parameter name="option" type="StopVoiceOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/audio/wx.stopVoice.html"&gt;wx.stopVoice(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;结束播放语音。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.startRecord({
  success (res) {
    const tempFilePath = res.tempFilePath
    wx.playVoice({
      filePath: tempFilePath,
    })

    setTimeout(() =&amp;gt; { wx.stopVoice() }, 5000)
  }
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="stopWifi">
                <parameters>
                    <parameter name="option" type="StopWifiOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.stopWifi.html"&gt;wx.stopWifi(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关闭 Wi-Fi 模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.stopWifi({
  success (res) {
    console.log(res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.6.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="switchTab">
                <parameters>
                    <parameter name="option" type="SwitchTabOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.switchTab.html"&gt;wx.switchTab(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;tabBar&amp;quot;: {
    &amp;quot;list&amp;quot;: [{
      &amp;quot;pagePath&amp;quot;: &amp;quot;index&amp;quot;,
      &amp;quot;text&amp;quot;: &amp;quot;首页&amp;quot;
    },{
      &amp;quot;pagePath&amp;quot;: &amp;quot;other&amp;quot;,
      &amp;quot;text&amp;quot;: &amp;quot;其他&amp;quot;
    }]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.switchTab({
  url: &amp;#39;/index&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;
</description>
            </method>
            <method name="updateShareMenu">
                <parameters>
                    <parameter name="option" type="UpdateShareMenuOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/share/wx.updateShareMenu.html"&gt;wx.updateShareMenu(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更新转发属性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;wx.updateShareMenu({
  withShareTicket: true,
  success () { }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="vibrateLong">
                <parameters>
                    <parameter name="option" type="VibrateLongOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateLong.html"&gt;wx.vibrateLong(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使手机发生较长时间的振动（400 ms)&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="vibrateShort">
                <parameters>
                    <parameter name="option" type="VibrateShortOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/vibrate/wx.vibrateShort.html"&gt;wx.vibrateShort(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使手机发生较短时间的振动（15 ms）。仅在 iPhone &lt;code&gt;7 / 7 Plus&lt;/code&gt; 以上及 Android 机型生效&lt;/p&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.2.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
            <method name="writeBLECharacteristicValue">
                <parameters>
                    <parameter name="option" type="WriteBLECharacteristicValueOption"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;&lt;a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/bluetooth-ble/wx.writeBLECharacteristicValue.html"&gt;wx.writeBLECharacteristicValue(Object object)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持 write 才可以成功调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行调用多次会存在写失败的可能性。&lt;/li&gt;
&lt;li&gt;小程序不会对写入数据包大小做限制，但系统与蓝牙设备会限制蓝牙4.0单次传输的数据大小，超过最大字节数后会发生写入错误，建议每次写入不超过20字节。&lt;/li&gt;
&lt;li&gt;若单次写入数据过长，iOS 上存在系统不会有任何回调的情况（包括错误回调）。&lt;/li&gt;
&lt;li&gt;安卓平台上，在调用 &lt;code&gt;notifyBLECharacteristicValueChange&lt;/code&gt; 成功后立即调用 &lt;code&gt;writeBLECharacteristicValue&lt;/code&gt; 接口，在部分机型上会发生 10008 系统错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% minicode(&amp;#39;pQU51zmz7a3K&amp;#39;) %}&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;// 向蓝牙设备发送一个0x00的16进制数据
let buffer = new ArrayBuffer(1)
let dataView = new DataView(buffer)
dataView.setUint8(0, 0)

wx.writeBLECharacteristicValue({
  // 这里的 deviceId 需要在 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
  deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId,
  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
  characteristicId,
  // 这里的value是ArrayBuffer类型
  value: buffer,
  success (res) {
    console.log(&amp;#39;writeBLECharacteristicValue success&amp;#39;, res.errMsg)
  }
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最低基础库： &lt;code&gt;1.1.0&lt;/code&gt;&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="cloud" type="WxCloud">
                <description></description>
            </property>
            <property name="env" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IAPIError" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IAPIParam" superclass="None">
        <methods/>
        <properties>
            <property name="config" type="ICloudConfig">
                <description></description>
            </property>
            <property name="success" type="Function">
                <description></description>
            </property>
            <property name="fail" type="Function">
                <description></description>
            </property>
            <property name="complete" type="Function">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IAPISuccessParam" superclass="None">
        <methods/>
        <properties>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IInitCloudConfig" superclass="None">
        <methods/>
        <properties>
            <property name="env" type="None">
                <description></description>
            </property>
            <property name="traceUser" type="Boolean">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ICloudConfig" superclass="None">
        <methods/>
        <properties>
            <property name="env" type="String">
                <description></description>
            </property>
            <property name="traceUser" type="Boolean">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IICloudAPI" superclass="None">
        <methods/>
        <properties>
            <property name="init" type="Function">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ICloudService" superclass="None">
        <methods/>
        <properties>
            <property name="name" type="String">
                <description></description>
            </property>
            <property name="getAPIs" type="Function">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ICloudServices" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="ICloudMetaData" superclass="None">
        <methods/>
        <properties>
            <property name="session_id" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="InternalSymbol" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="AnyObject" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="WxCloud" superclass="None">
        <methods>
            <method name="callFunction">
                <parameters>
                    <parameter name="param" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="callFunction">
                <parameters>
                    <parameter name="param" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
            <method name="uploadFile">
                <parameters>
                    <parameter name="param" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description></description>
            </method>
            <method name="uploadFile">
                <parameters>
                    <parameter name="param" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
            <method name="downloadFile">
                <parameters>
                    <parameter name="param" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description></description>
            </method>
            <method name="downloadFile">
                <parameters>
                    <parameter name="param" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
            <method name="getTempFileURL">
                <parameters>
                    <parameter name="param" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="getTempFileURL">
                <parameters>
                    <parameter name="param" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
            <method name="deleteFile">
                <parameters>
                    <parameter name="param" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="deleteFile">
                <parameters>
                    <parameter name="param" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="init" type="Function">
                <description></description>
            </property>
            <property name="database" type="Function">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ICloud" superclass="None">
        <methods/>
        <properties>
            <property name="ICloudAPIParam" type="ICloudAPIParam" scope="static">
                <description></description>
            </property>
            <property name="CallFunctionResult" type="CallFunctionResult" scope="static">
                <description></description>
            </property>
            <property name="CallFunctionParam" type="CallFunctionParam" scope="static">
                <description></description>
            </property>
            <property name="UploadFileResult" type="UploadFileResult" scope="static">
                <description></description>
            </property>
            <property name="UploadFileParam" type="UploadFileParam" scope="static">
                <description></description>
            </property>
            <property name="DownloadFileResult" type="DownloadFileResult" scope="static">
                <description></description>
            </property>
            <property name="DownloadFileParam" type="DownloadFileParam" scope="static">
                <description></description>
            </property>
            <property name="GetTempFileURLResult" type="GetTempFileURLResult" scope="static">
                <description></description>
            </property>
            <property name="GetTempFileURLResultItem" type="GetTempFileURLResultItem" scope="static">
                <description></description>
            </property>
            <property name="GetTempFileURLParam" type="GetTempFileURLParam" scope="static">
                <description></description>
            </property>
            <property name="DeleteFileResult" type="DeleteFileResult" scope="static">
                <description></description>
            </property>
            <property name="DeleteFileResultItem" type="DeleteFileResultItem" scope="static">
                <description></description>
            </property>
            <property name="DeleteFileParam" type="DeleteFileParam" scope="static">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ICloudAPIParam" superclass="None">
        <methods/>
        <properties>
            <property name="config" type="ICloudConfig">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="CallFunctionResult" superclass="None">
        <methods/>
        <properties>
            <property name="result" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="CallFunctionParam" superclass="None">
        <methods/>
        <properties>
            <property name="name" type="String">
                <description></description>
            </property>
            <property name="data" type="CallFunctionData">
                <description></description>
            </property>
            <property name="slow" type="Boolean">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="UploadFileResult" superclass="None">
        <methods/>
        <properties>
            <property name="fileID" type="String">
                <description></description>
            </property>
            <property name="statusCode" type="Number">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="UploadFileParam" superclass="None">
        <methods/>
        <properties>
            <property name="cloudPath" type="String">
                <description></description>
            </property>
            <property name="filePath" type="String">
                <description></description>
            </property>
            <property name="header" type="AnyObject">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="DownloadFileResult" superclass="None">
        <methods/>
        <properties>
            <property name="tempFilePath" type="String">
                <description></description>
            </property>
            <property name="statusCode" type="Number">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="DownloadFileParam" superclass="None">
        <methods/>
        <properties>
            <property name="fileID" type="String">
                <description></description>
            </property>
            <property name="cloudPath" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetTempFileURLResult" superclass="None">
        <methods/>
        <properties>
            <property name="fileList" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetTempFileURLResultItem" superclass="None">
        <methods/>
        <properties>
            <property name="fileID" type="String">
                <description></description>
            </property>
            <property name="tempFileURL" type="String">
                <description></description>
            </property>
            <property name="maxAge" type="Number">
                <description></description>
            </property>
            <property name="status" type="Number">
                <description></description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GetTempFileURLParam" superclass="None">
        <methods/>
        <properties>
            <property name="fileList" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="DeleteFileResult" superclass="None">
        <methods/>
        <properties>
            <property name="fileList" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="DeleteFileResultItem" superclass="None">
        <methods/>
        <properties>
            <property name="fileID" type="String">
                <description></description>
            </property>
            <property name="status" type="Number">
                <description></description>
            </property>
            <property name="errMsg" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="DeleteFileParam" superclass="None">
        <methods/>
        <properties>
            <property name="fileList" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="DB" superclass="None">
        <methods/>
        <properties>
            <property name="Database" type="Database" scope="static">
                <description>&lt;p&gt;The class of all exposed cloud database instances&lt;/p&gt;
</description>
            </property>
            <property name="CollectionReference" type="CollectionReference" scope="static">
                <description></description>
            </property>
            <property name="DocumentReference" type="DocumentReference" scope="static">
                <description></description>
            </property>
            <property name="Query" type="Query" scope="static">
                <description></description>
            </property>
            <property name="DatabaseCommand" type="DatabaseCommand" scope="static">
                <description></description>
            </property>
            <property name="LOGIC_COMMANDS_LITERAL" type="LOGIC_COMMANDS_LITERAL" scope="static">
                <description></description>
            </property>
            <property name="DatabaseLogicCommand" type="DatabaseLogicCommand" scope="static">
                <description></description>
            </property>
            <property name="QUERY_COMMANDS_LITERAL" type="QUERY_COMMANDS_LITERAL" scope="static">
                <description></description>
            </property>
            <property name="DatabaseQueryCommand" type="DatabaseQueryCommand" scope="static">
                <description></description>
            </property>
            <property name="UPDATE_COMMANDS_LITERAL" type="UPDATE_COMMANDS_LITERAL" scope="static">
                <description></description>
            </property>
            <property name="DatabaseUpdateCommand" type="DatabaseUpdateCommand" scope="static">
                <description></description>
            </property>
            <property name="Batch" type="Batch" scope="static">
                <description></description>
            </property>
            <property name="APIBaseContract" type="APIBaseContract" scope="static">
                <description>&lt;p&gt;A contract that all API provider must adhere to&lt;/p&gt;
</description>
            </property>
            <property name="IGeoPointConstructor" type="IGeoPointConstructor" scope="static">
                <description></description>
            </property>
            <property name="IGeoMultiPointConstructor" type="IGeoMultiPointConstructor" scope="static">
                <description></description>
            </property>
            <property name="IGeoLineStringConstructor" type="IGeoLineStringConstructor" scope="static">
                <description></description>
            </property>
            <property name="IGeoMultiLineStringConstructor" type="IGeoMultiLineStringConstructor" scope="static">
                <description></description>
            </property>
            <property name="IGeoPolygonConstructor" type="IGeoPolygonConstructor" scope="static">
                <description></description>
            </property>
            <property name="IGeoMultiPolygonConstructor" type="IGeoMultiPolygonConstructor" scope="static">
                <description></description>
            </property>
            <property name="IGeo" type="IGeo" scope="static">
                <description></description>
            </property>
            <property name="IGeoJSONPoint" type="IGeoJSONPoint" scope="static">
                <description></description>
            </property>
            <property name="IGeoJSONMultiPoint" type="IGeoJSONMultiPoint" scope="static">
                <description></description>
            </property>
            <property name="IGeoJSONLineString" type="IGeoJSONLineString" scope="static">
                <description></description>
            </property>
            <property name="IGeoJSONMultiLineString" type="IGeoJSONMultiLineString" scope="static">
                <description></description>
            </property>
            <property name="IGeoJSONPolygon" type="IGeoJSONPolygon" scope="static">
                <description></description>
            </property>
            <property name="IGeoJSONMultiPolygon" type="IGeoJSONMultiPolygon" scope="static">
                <description></description>
            </property>
            <property name="GeoPoint" type="GeoPoint" scope="static">
                <description></description>
            </property>
            <property name="GeoMultiPoint" type="GeoMultiPoint" scope="static">
                <description></description>
            </property>
            <property name="GeoLineString" type="GeoLineString" scope="static">
                <description></description>
            </property>
            <property name="GeoMultiLineString" type="GeoMultiLineString" scope="static">
                <description></description>
            </property>
            <property name="GeoPolygon" type="GeoPolygon" scope="static">
                <description></description>
            </property>
            <property name="GeoMultiPolygon" type="GeoMultiPolygon" scope="static">
                <description></description>
            </property>
            <property name="IGeoNearCommandOptions" type="IGeoNearCommandOptions" scope="static">
                <description></description>
            </property>
            <property name="IGeoWithinCommandOptions" type="IGeoWithinCommandOptions" scope="static">
                <description></description>
            </property>
            <property name="IGeoIntersectsCommandOptions" type="IGeoIntersectsCommandOptions" scope="static">
                <description></description>
            </property>
            <property name="IServerDateOptions" type="IServerDateOptions" scope="static">
                <description></description>
            </property>
            <property name="ServerDate" type="ServerDate" scope="static">
                <description></description>
            </property>
            <property name="IRegExpOptions" type="IRegExpOptions" scope="static">
                <description></description>
            </property>
            <property name="IRegExpConstructor" type="IRegExpConstructor" scope="static">
                <description></description>
            </property>
            <property name="RegExp" type="RegExp" scope="static">
                <description></description>
            </property>
            <property name="IDocumentData" type="IDocumentData" scope="static">
                <description></description>
            </property>
            <property name="IAddDocumentOptions" type="IAddDocumentOptions" scope="static">
                <description></description>
            </property>
            <property name="IUpdateDocumentOptions" type="IUpdateDocumentOptions" scope="static">
                <description></description>
            </property>
            <property name="IUpdateSingleDocumentOptions" type="IUpdateSingleDocumentOptions" scope="static">
                <description></description>
            </property>
            <property name="ISetDocumentOptions" type="ISetDocumentOptions" scope="static">
                <description></description>
            </property>
            <property name="ISetSingleDocumentOptions" type="ISetSingleDocumentOptions" scope="static">
                <description></description>
            </property>
            <property name="IRemoveDocumentOptions" type="IRemoveDocumentOptions" scope="static">
                <description></description>
            </property>
            <property name="IQueryCondition" type="IQueryCondition" scope="static">
                <description></description>
            </property>
            <property name="IQueryResult" type="IQueryResult" scope="static">
                <description></description>
            </property>
            <property name="IQuerySingleResult" type="IQuerySingleResult" scope="static">
                <description></description>
            </property>
            <property name="IUpdateCondition" type="IUpdateCondition" scope="static">
                <description></description>
            </property>
            <property name="IAddResult" type="IAddResult" scope="static">
                <description></description>
            </property>
            <property name="IUpdateResult" type="IUpdateResult" scope="static">
                <description></description>
            </property>
            <property name="ISetResult" type="ISetResult" scope="static">
                <description></description>
            </property>
            <property name="IRemoveResult" type="IRemoveResult" scope="static">
                <description></description>
            </property>
            <property name="ICountResult" type="ICountResult" scope="static">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="Database" superclass="None">
        <methods>
            <method name="collection">
                <parameters>
                    <parameter name="collectionName" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="CollectionReference"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="config" type="ICloudConfig">
                <description></description>
            </property>
            <property name="command" type="DatabaseCommand">
                <description></description>
            </property>
            <property name="Geo" type="IGeo">
                <description></description>
            </property>
            <property name="serverDate" type="Function">
                <description></description>
            </property>
            <property name="RegExp" type="IRegExpConstructor">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="CollectionReference" superclass="None">
        <methods>
            <method name="doc">
                <parameters>
                    <parameter name="docId" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="DocumentReference"/>
                </return-types>
                <description></description>
            </method>
            <method name="add">
                <parameters>
                    <parameter name="options" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="add">
                <parameters>
                    <parameter name="options" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="collectionName" type="String">
                <description></description>
            </property>
            <property name="database" type="Database">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="DocumentReference" superclass="None">
        <methods>
            <method name="field">
                <parameters>
                    <parameter name="object" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description></description>
            </method>
            <method name="get">
                <parameters>
                    <parameter name="options" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="get">
                <parameters>
                    <parameter name="options" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
            <method name="set">
                <parameters>
                    <parameter name="options" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="set">
                <parameters>
                    <parameter name="options" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
            <method name="update">
                <parameters>
                    <parameter name="options" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="update">
                <parameters>
                    <parameter name="options" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
            <method name="remove">
                <parameters>
                    <parameter name="options" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="remove">
                <parameters>
                    <parameter name="options" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="Query" superclass="None">
        <methods>
            <method name="where">
                <parameters>
                    <parameter name="condition" type="IQueryCondition"/>
                </parameters>
                <return-types>
                    <return-type type="Query"/>
                </return-types>
                <description></description>
            </method>
            <method name="orderBy">
                <parameters>
                    <parameter name="fieldPath" type="String"/>
                    <parameter name="order" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Query"/>
                </return-types>
                <description></description>
            </method>
            <method name="limit">
                <parameters>
                    <parameter name="max" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Query"/>
                </return-types>
                <description></description>
            </method>
            <method name="skip">
                <parameters>
                    <parameter name="offset" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Query"/>
                </return-types>
                <description></description>
            </method>
            <method name="field">
                <parameters>
                    <parameter name="object" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="Query"/>
                </return-types>
                <description></description>
            </method>
            <method name="get">
                <parameters>
                    <parameter name="options" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="get">
                <parameters>
                    <parameter name="options" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
            <method name="count">
                <parameters>
                    <parameter name="options" type="OQ"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description></description>
            </method>
            <method name="count">
                <parameters>
                    <parameter name="options" type="RQ"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="DatabaseCommand" superclass="None">
        <methods>
            <method name="eq">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="neq">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="gt">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="gte">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="lt">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="lte">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="in">
                <parameters>
                    <parameter name="val" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="nin">
                <parameters>
                    <parameter name="val" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="geoNear">
                <parameters>
                    <parameter name="options" type="IGeoNearCommandOptions"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="geoWithin">
                <parameters>
                    <parameter name="options" type="IGeoWithinCommandOptions"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="geoIntersects">
                <parameters>
                    <parameter name="options" type="IGeoIntersectsCommandOptions"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="and">
                <parameters>
                    <parameter name="expressions" type="Array"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="or">
                <parameters>
                    <parameter name="expressions" type="Array"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="set">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="remove">
                <parameters/>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="inc">
                <parameters>
                    <parameter name="val" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="mul">
                <parameters>
                    <parameter name="val" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="push">
                <parameters>
                    <parameter name="values" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="pop">
                <parameters/>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="shift">
                <parameters/>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="unshift">
                <parameters>
                    <parameter name="values" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="LOGIC_COMMANDS_LITERAL" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="DatabaseLogicCommand" superclass="None">
        <methods>
            <method name="_setFieldName">
                <parameters>
                    <parameter name="fieldName" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="and">
                <parameters>
                    <parameter name="expressions" type="Array"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="or">
                <parameters>
                    <parameter name="expressions" type="Array"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="fieldName" type="None">
                <description></description>
            </property>
            <property name="operator" type="None">
                <description></description>
            </property>
            <property name="operands" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="QUERY_COMMANDS_LITERAL" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="DatabaseQueryCommand" superclass="None">
        <methods>
            <method name="_setFieldName">
                <parameters>
                    <parameter name="fieldName" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseQueryCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="eq">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="neq">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="gt">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="gte">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="lt">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="lte">
                <parameters>
                    <parameter name="val" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="in">
                <parameters>
                    <parameter name="val" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="nin">
                <parameters>
                    <parameter name="val" type="None"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="geoNear">
                <parameters>
                    <parameter name="options" type="IGeoNearCommandOptions"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="geoWithin">
                <parameters>
                    <parameter name="options" type="IGeoWithinCommandOptions"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
            <method name="geoIntersects">
                <parameters>
                    <parameter name="options" type="IGeoIntersectsCommandOptions"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseLogicCommand"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="operator" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="UPDATE_COMMANDS_LITERAL" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="DatabaseUpdateCommand" superclass="None">
        <methods>
            <method name="_setFieldName">
                <parameters>
                    <parameter name="fieldName" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="DatabaseUpdateCommand"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="fieldName" type="None">
                <description></description>
            </property>
            <property name="operator" type="UPDATE_COMMANDS_LITERAL">
                <description></description>
            </property>
            <property name="operands" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="Batch" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="APIBaseContract" superclass="None">
        <methods>
            <method name="getContext">
                <parameters>
                    <parameter name="param" type="PARAM"/>
                </parameters>
                <return-types>
                    <return-type type="CONTEXT"/>
                </return-types>
                <description></description>
            </method>
            <method name="getCallbackReturn">
                <parameters>
                    <parameter name="param" type="PARAM"/>
                    <parameter name="context" type="CONTEXT"/>
                </parameters>
                <return-types>
                    <return-type type="CALLBACK_RETURN"/>
                </return-types>
                <description>&lt;p&gt;In case of callback-style invocation, this function will be called&lt;/p&gt;
</description>
            </method>
            <method name="getFinalParam">
                <parameters>
                    <parameter name="param" type="PARAM"/>
                    <parameter name="context" type="CONTEXT"/>
                </parameters>
                <return-types>
                    <return-type type="T"/>
                </return-types>
                <description></description>
            </method>
            <method name="run">
                <parameters>
                    <parameter name="param" type="T"/>
                </parameters>
                <return-types>
                    <return-type type="Promise"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="IGeoPointConstructor" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="IGeoMultiPointConstructor" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="IGeoLineStringConstructor" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="IGeoMultiLineStringConstructor" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="IGeoPolygonConstructor" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="IGeoMultiPolygonConstructor" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="IGeo" superclass="None">
        <methods/>
        <properties>
            <property name="Point" type="IGeoPointConstructor">
                <description></description>
            </property>
            <property name="MultiPoint" type="IGeoMultiPointConstructor">
                <description></description>
            </property>
            <property name="LineString" type="IGeoLineStringConstructor">
                <description></description>
            </property>
            <property name="MultiLineString" type="IGeoMultiLineStringConstructor">
                <description></description>
            </property>
            <property name="Polygon" type="IGeoPolygonConstructor">
                <description></description>
            </property>
            <property name="MultiPolygon" type="IGeoMultiPolygonConstructor">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoJSONPoint" superclass="None">
        <methods/>
        <properties>
            <property name="type" type="None">
                <description></description>
            </property>
            <property name="coordinates" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoJSONMultiPoint" superclass="None">
        <methods/>
        <properties>
            <property name="type" type="None">
                <description></description>
            </property>
            <property name="coordinates" type="Array">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoJSONLineString" superclass="None">
        <methods/>
        <properties>
            <property name="type" type="None">
                <description></description>
            </property>
            <property name="coordinates" type="Array">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoJSONMultiLineString" superclass="None">
        <methods/>
        <properties>
            <property name="type" type="None">
                <description></description>
            </property>
            <property name="coordinates" type="Array">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoJSONPolygon" superclass="None">
        <methods/>
        <properties>
            <property name="type" type="None">
                <description></description>
            </property>
            <property name="coordinates" type="Array">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoJSONMultiPolygon" superclass="None">
        <methods/>
        <properties>
            <property name="type" type="None">
                <description></description>
            </property>
            <property name="coordinates" type="Array">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GeoPoint" superclass="None">
        <methods>
            <method name="toJSON">
                <parameters/>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description></description>
            </method>
            <method name="toString">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="longitude" type="Number">
                <description></description>
            </property>
            <property name="latitude" type="Number">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GeoMultiPoint" superclass="None">
        <methods>
            <method name="toJSON">
                <parameters/>
                <return-types>
                    <return-type type="IGeoJSONMultiPoint"/>
                </return-types>
                <description></description>
            </method>
            <method name="toString">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="points" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GeoLineString" superclass="None">
        <methods>
            <method name="toJSON">
                <parameters/>
                <return-types>
                    <return-type type="IGeoJSONLineString"/>
                </return-types>
                <description></description>
            </method>
            <method name="toString">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="points" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GeoMultiLineString" superclass="None">
        <methods>
            <method name="toJSON">
                <parameters/>
                <return-types>
                    <return-type type="IGeoJSONMultiLineString"/>
                </return-types>
                <description></description>
            </method>
            <method name="toString">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="lines" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GeoPolygon" superclass="None">
        <methods>
            <method name="toJSON">
                <parameters/>
                <return-types>
                    <return-type type="IGeoJSONPolygon"/>
                </return-types>
                <description></description>
            </method>
            <method name="toString">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="lines" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="GeoMultiPolygon" superclass="None">
        <methods>
            <method name="toJSON">
                <parameters/>
                <return-types>
                    <return-type type="IGeoJSONMultiPolygon"/>
                </return-types>
                <description></description>
            </method>
            <method name="toString">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="polygons" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoNearCommandOptions" superclass="None">
        <methods/>
        <properties>
            <property name="geometry" type="GeoPoint">
                <description></description>
            </property>
            <property name="maxDistance" type="Number">
                <description></description>
            </property>
            <property name="minDistance" type="Number">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoWithinCommandOptions" superclass="None">
        <methods/>
        <properties>
            <property name="geometry" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IGeoIntersectsCommandOptions" superclass="None">
        <methods/>
        <properties>
            <property name="geometry" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IServerDateOptions" superclass="None">
        <methods/>
        <properties>
            <property name="offset" type="Number">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ServerDate" superclass="None">
        <methods/>
        <properties>
            <property name="options" type="IServerDateOptions">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IRegExpOptions" superclass="None">
        <methods/>
        <properties>
            <property name="regexp" type="String">
                <description></description>
            </property>
            <property name="options" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IRegExpConstructor" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="RegExp" superclass="None">
        <methods/>
        <properties>
            <property name="regexp" type="String">
                <description></description>
            </property>
            <property name="options" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IDocumentData" superclass="None">
        <methods/>
        <properties>
            <property name="_id" type="DocumentId">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IAddDocumentOptions" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="IDocumentData">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IUpdateDocumentOptions" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="IUpdateCondition">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IUpdateSingleDocumentOptions" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="IUpdateCondition">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ISetDocumentOptions" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="IUpdateCondition">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ISetSingleDocumentOptions" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="IUpdateCondition">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IRemoveDocumentOptions" superclass="None">
        <methods/>
        <properties>
            <property name="query" type="IQueryCondition">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IQueryCondition" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="IQueryResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IQuerySingleResult" superclass="None">
        <methods/>
        <properties>
            <property name="data" type="IDocumentData">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IUpdateCondition" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="IAddResult" superclass="None">
        <methods/>
        <properties>
            <property name="_id" type="DocumentId">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IUpdateResult" superclass="None">
        <methods/>
        <properties>
            <property name="stats" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ISetResult" superclass="None">
        <methods/>
        <properties>
            <property name="_id" type="DocumentId">
                <description></description>
            </property>
            <property name="stats" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="IRemoveResult" superclass="None">
        <methods/>
        <properties>
            <property name="stats" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="ICountResult" superclass="None">
        <methods/>
        <properties>
            <property name="total" type="Number">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="Global" superclass="None">
        <methods/>
        <properties>
            <property name="App" type="App" scope="instance">
                <description></description>
            </property>
            <property name="getApp" type="getApp" scope="instance">
                <description></description>
            </property>
            <property name="Page" type="Page" scope="instance">
                <description>&lt;p&gt;注册小程序中的一个页面。接受一个 &lt;code&gt;Object&lt;/code&gt; 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。&lt;/p&gt;
</description>
            </property>
            <property name="getCurrentPages" type="getCurrentPages" scope="instance">
                <description>&lt;p&gt;获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要尝试修改页面栈，会导致路由以及页面状态错误。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不要在 &lt;code&gt;App.onLaunch&lt;/code&gt; 的时候调用 &lt;code&gt;getCurrentPages()&lt;/code&gt;，此时 &lt;code&gt;page&lt;/code&gt; 还没有生成。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="console" type="console" scope="instance">
                <description></description>
            </property>
            <property name="wx" type="wx" scope="instance">
                <description></description>
            </property>
            <property name="Component" type="Component" scope="instance">
                <description>&lt;p&gt;Component构造器可用于定义组件，调用Component构造器时可以指定组件的属性、数据、方法等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;this.data&lt;/code&gt; 可以获取内部数据和属性值，但不要直接修改它们，应使用 &lt;code&gt;setData&lt;/code&gt; 修改。&lt;/li&gt;
&lt;li&gt;生命周期函数无法在组件方法中通过 &lt;code&gt;this&lt;/code&gt; 访问到。&lt;/li&gt;
&lt;li&gt;属性名应避免以 data 开头，即不要命名成 &lt;code&gt;dataXyz&lt;/code&gt; 这样的形式，因为在 WXML 中， &lt;code&gt;data-xyz=&amp;quot;&amp;quot;&lt;/code&gt; 会被作为节点 dataset 来处理，而不是组件属性。&lt;/li&gt;
&lt;li&gt;在一个组件的定义和使用时，组件的属性名和 data 字段相互间都不能冲突（尽管它们位于不同的定义段中）。&lt;/li&gt;
&lt;li&gt;从基础库 &lt;code&gt;2.0.9&lt;/code&gt; 开始，对象类型的属性和 data 字段中可以包含函数类型的子字段，即可以通过对象类型的属性字段来传递函数。低于这一版本的基础库不支持这一特性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bug&lt;/code&gt; : 对于 type 为 Object 或 Array 的属性，如果通过该组件自身的 &lt;code&gt;this.setData&lt;/code&gt; 来改变属性值的一个子字段，则依旧会触发属性 observer ，且 observer 接收到的 &lt;code&gt;newVal&lt;/code&gt; 是变化的那个子字段的值， &lt;code&gt;oldVal&lt;/code&gt; 为空， &lt;code&gt;changedPath&lt;/code&gt; 包含子字段的字段名相关信息。&lt;/li&gt;
&lt;/ul&gt;
</description>
            </property>
            <property name="Behavior" type="Behavior" scope="instance">
                <description>&lt;p&gt;注册一个 &lt;code&gt;behavior&lt;/code&gt;，接受一个 &lt;code&gt;Object&lt;/code&gt; 类型的参数。&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
</javascript>
