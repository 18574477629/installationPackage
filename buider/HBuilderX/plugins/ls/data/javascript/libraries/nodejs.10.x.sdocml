<?xml version="1.0" encoding="UTF-8"?>
<javascript name="nodejs">
    <class type="events.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="EventEmitter" type="events.EventEmitter" scope="static">
                <description>&lt;p&gt;To access the EventEmitter class, require(&amp;#39;events&amp;#39;).EventEmitter.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="events.EventEmitter" superclass="None" visibility="internal">
        <methods>
            <method name="addListener" scope="instance" url="https://nodejs.org/api/events.html#events_emitter_addlistener_eventname_listener">
                <parameters>
                    <parameter name="event" type="String"/>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Adds a listener to the end of the listeners array for the specified event.&lt;/p&gt;
</description>
            </method>
            <method name="on" scope="instance" url="https://nodejs.org/api/events.html#events_emitter_on_eventname_listener">
                <parameters>
                    <parameter name="event" type="String"/>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Adds a listener to the end of the listeners array for the specified event.&lt;/p&gt;
</description>
            </method>
            <method name="once" scope="instance" url="https://nodejs.org/api/events.html#events_emitter_once_eventname_listener">
                <parameters>
                    <parameter name="event" type="String"/>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Adds a one time listener for the event. This listener is invoked only the next time the event is fired, after which it is removed.&lt;/p&gt;
</description>
            </method>
            <method name="removeListener" scope="instance" url="https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener">
                <parameters>
                    <parameter name="event" type="String"/>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Remove a listener from the listener array for the specified event. Caution: changes array indices in the listener array behind the listener.&lt;/p&gt;
</description>
            </method>
            <method name="removeAllListeners" scope="instance" url="https://nodejs.org/api/events.html#events_emitter_removealllisteners_eventname">
                <parameters>
                    <parameter name="event" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Removes all listeners, or those of the specified event.&lt;/p&gt;
</description>
            </method>
            <method name="setMaxListeners" scope="instance" url="https://nodejs.org/api/events.html#events_emitter_setmaxlisteners_n">
                <parameters>
                    <parameter name="n" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;By default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default which helps finding memory leaks. Obviously not all Emitters should be limited to 10. This function allows that to be increased. Set to zero for unlimited.&lt;/p&gt;
</description>
            </method>
            <method name="listeners" scope="instance" url="https://nodejs.org/api/events.html#events_emitter_listeners_eventname">
                <parameters>
                    <parameter name="event" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;Function>"/>
                </return-types>
                <description>&lt;p&gt;Returns an array of listeners for the specified event.&lt;/p&gt;
</description>
            </method>
            <method name="emit" scope="instance" url="https://nodejs.org/api/events.html#events_emitter_emit_eventname_arg1_arg2">
                <parameters>
                    <parameter name="event" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Execute each of the listeners in order with the supplied arguments.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="stream.exports" superclass="events.EventEmitter" visibility="internal">
        <methods>
            <method name="pipe" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options">
                <parameters>
                    <parameter name="destination" type="stream.Writable"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Connects this readable stream to destination WriteStream. Incoming data on this stream gets written to destination. Properly manages back-pressure so that a slow destination will not be overwhelmed by a fast readable stream.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Writable" type="stream.Writable" scope="static">
                <description>&lt;p&gt;A Writable Stream has the following methods, members, and events.&lt;/p&gt;
</description>
            </property>
            <property name="Readable" type="stream.Readable" scope="static">
                <description>&lt;p&gt;A Readable Stream has the following methods, members, and events.&lt;/p&gt;
</description>
            </property>
            <property name="Duplex" type="stream.Duplex" scope="static">
                <description>&lt;p&gt;A &amp;quot;duplex&amp;quot; stream is one that is both Readable and Writable, such as a TCP socket connection.&lt;/p&gt;
</description>
            </property>
            <property name="Transform" type="stream.Transform" scope="static">
                <description>&lt;p&gt;A &amp;quot;transform&amp;quot; stream is a duplex stream where the output is causally connected in some way to the input, such as a zlib stream or a crypto stream.&lt;/p&gt;
</description>
            </property>
            <property name="PassThrough" type="stream.Transform">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="stream.Writable" superclass="stream" visibility="internal">
        <methods>
            <method name="write" scope="instance" url="https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1">
                <parameters>
                    <parameter name="chunk" type="String|Buffer"/>
                    <parameter name="encoding" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Writes chunk to the stream. Returns true if the data has been flushed to the underlying resource. Returns false to indicate that the buffer is full, and the data will be sent out in the future. The &amp;#39;drain&amp;#39; event will indicate when the buffer is empty again.&lt;/p&gt;
</description>
            </method>
            <method name="cork" scope="instance" url="https://nodejs.org/api/stream.html#stream_writable_cork">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Forces buffering of all writes. Buffered data will be flushed either at .uncork() or at .end() call.&lt;/p&gt;
</description>
            </method>
            <method name="uncork" scope="instance" url="https://nodejs.org/api/stream.html#stream_writable_uncork">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Flush all data, buffered since .cork() call.&lt;/p&gt;
</description>
            </method>
            <method name="setDefaultEncoding" scope="instance" url="https://nodejs.org/api/stream.html#stream_writable_setdefaultencoding_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Sets the default encoding for a writable stream. Returns true if the encoding is valid and is set. Otherwise returns false.&lt;/p&gt;
</description>
            </method>
            <method name="end" scope="instance" url="https://nodejs.org/api/stream.html#stream_writable_end_chunk_encoding_callback">
                <parameters>
                    <parameter name="chunk" type="String|Buffer"/>
                    <parameter name="encoding" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Call this method to signal the end of the data being written to the stream.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="stream.Readable" superclass="stream" visibility="internal">
        <methods>
            <method name="setEncoding" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_setencoding_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Makes the &amp;#39;data&amp;#39; event emit a string instead of a Buffer. encoding can be &amp;#39;utf8&amp;#39;, &amp;#39;utf16le&amp;#39; (&amp;#39;ucs2&amp;#39;), &amp;#39;ascii&amp;#39;, or &amp;#39;hex&amp;#39;.&lt;/p&gt;
</description>
            </method>
            <method name="pause" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Switches the readable stream into &amp;quot;old mode&amp;quot;, where data is emitted using a &amp;#39;data&amp;#39; event rather than being buffered for consumption via the read() method.&lt;/p&gt;
</description>
            </method>
            <method name="resume" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_resume">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Switches the readable stream into &amp;quot;old mode&amp;quot;, where data is emitted using a &amp;#39;data&amp;#39; event rather than being buffered for consumption via the read() method.&lt;/p&gt;
</description>
            </method>
            <method name="unpipe" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_unpipe_destination">
                <parameters>
                    <parameter name="dest" type="stream.Writable"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Undo a previously established pipe(). If no destination is provided, then all previously established pipes are removed.&lt;/p&gt;
</description>
            </method>
            <method name="push" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_push_chunk">
                <parameters>
                    <parameter name="chunk" type="Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Explicitly insert some data into the read queue. If called with null, will signal the end of the data.&lt;/p&gt;
</description>
            </method>
            <method name="unshift" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_unshift_chunk">
                <parameters>
                    <parameter name="chunk" type="Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;This is the corollary of readable.push(chunk). Rather than putting the data at the end of the read queue, it puts it at the front of the read queue.&lt;/p&gt;
</description>
            </method>
            <method name="wrap" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_wrap_stream">
                <parameters>
                    <parameter name="stream" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="stream.Readable"/>
                </return-types>
                <description>&lt;p&gt;If you are using an older Node library that emits &amp;#39;data&amp;#39; events and has a pause() method that is advisory only, then you can use the wrap() method to create a Readable stream that uses the old stream as its data source.&lt;/p&gt;
</description>
            </method>
            <method name="read" scope="instance" url="https://nodejs.org/api/stream.html#stream_readable_read_size_1">
                <parameters>
                    <parameter name="size" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Call this method to consume data once the &amp;#39;readable&amp;#39; event is emitted.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="destroy" type="fn()" scope="instance">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="stream.Duplex" superclass="stream.Readable" visibility="internal">
        <methods/>
        <properties>
            <property name="write" type="fn(chunk: Buffer, encoding?: string, callback?: fn()) -> bool" scope="instance">
                <description></description>
            </property>
            <property name="end" type="fn(chunk: Buffer, encoding?: string, callback?: fn()) -> bool" scope="instance">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="stream.Transform" superclass="stream.Duplex" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="querystring.exports" superclass="None" visibility="internal">
        <methods>
            <method name="stringify" scope="instance" url="https://nodejs.org/api/querystring.html#querystring_querystring_stringify_obj_sep_eq">
                <parameters>
                    <parameter name="obj" type="Object"/>
                    <parameter name="sep" type="String"/>
                    <parameter name="eq" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Serialize an object to a query string. Optionally override the default separator (&amp;#39;&amp;amp;&amp;#39;) and assignment (&amp;#39;=&amp;#39;) characters.&lt;/p&gt;
</description>
            </method>
            <method name="parse" scope="instance" url="https://nodejs.org/api/querystring.html#querystring_querystring_parse_str_sep_eq_options">
                <parameters>
                    <parameter name="str" type="String"/>
                    <parameter name="sep" type="String"/>
                    <parameter name="eq" type="String"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="?"/>
                </return-types>
                <description>&lt;p&gt;Deserialize a query string to an object. Optionally override the default separator (&amp;#39;&amp;amp;&amp;#39;) and assignment (&amp;#39;=&amp;#39;) characters.&lt;/p&gt;
</description>
            </method>
            <method name="escape" scope="instance" url="https://nodejs.org/api/querystring.html#querystring_querystring_escape">
                <parameters>
                    <parameter name="param" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;The escape function used by querystring.stringify, provided so that it could be overridden if necessary.&lt;/p&gt;
</description>
            </method>
            <method name="unescape" scope="instance" url="https://nodejs.org/api/querystring.html#querystring_querystring_unescape">
                <parameters>
                    <parameter name="param" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;The unescape function used by querystring.parse, provided so that it could be overridden if necessary.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="http.exports" superclass="None" visibility="internal">
        <methods>
            <method name="createServer" scope="instance" url="https://nodejs.org/api/http.html#http_http_createserver_requestlistener">
                <parameters>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="http.Server"/>
                </return-types>
                <description>&lt;p&gt;Returns a new web server object.&lt;/p&gt;
</description>
            </method>
            <method name="request" scope="instance" url="https://nodejs.org/api/http.html#http_http_request_options_callback">
                <parameters>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="http.ClientRequest"/>
                </return-types>
                <description>&lt;p&gt;Node maintains several connections per server to make HTTP requests. This function allows one to transparently issue requests.&lt;/p&gt;
</description>
            </method>
            <method name="get" scope="instance" url="https://nodejs.org/api/http.html#http_http_get_options_callback">
                <parameters>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="http.ClientRequest"/>
                </return-types>
                <description>&lt;p&gt;Since most requests are GET requests without bodies, Node provides this convenience method. The only difference between this method and http.request() is that it sets the method to GET and calls req.end() automatically.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="STATUS_CODES" type="Object">
                <description></description>
            </property>
            <property name="Server" type="http.Server" scope="static">
                <description>&lt;p&gt;Class for HTTP server objects.&lt;/p&gt;
</description>
            </property>
            <property name="ServerResponse" type="http.ServerResponse" scope="static">
                <description>&lt;p&gt;This object is created internally by a HTTP server--not by the user. It is passed as the second parameter to the &amp;#39;request&amp;#39; event.&lt;/p&gt;
</description>
            </property>
            <property name="globalAgent" url="https://nodejs.org/api/http.html#http_http_globalagent" type="http.Agent" scope="instance">
                <description>&lt;p&gt;Global instance of Agent which is used as the default for all http client requests.&lt;/p&gt;
</description>
            </property>
            <property name="Agent" type="http.Agent" scope="static">
                <description>&lt;p&gt;In node 0.5.3+ there is a new implementation of the HTTP Agent which is used for pooling sockets used in HTTP client requests.&lt;/p&gt;
</description>
            </property>
            <property name="ClientRequest" type="http.ClientRequest" scope="static">
                <description>&lt;p&gt;This object is created internally and returned from http.request(). It represents an in-progress request whose header has already been queued. The header is still mutable using the setHeader(name, value), getHeader(name), removeHeader(name) API. The actual header will be sent along with the first data chunk or when closing the connection.&lt;/p&gt;
</description>
            </property>
            <property name="IncomingMessage" type="http.IncomingMessage" scope="static">
                <description>&lt;p&gt;An IncomingMessage object is created by http.Server or http.ClientRequest and passed as the first argument to the &amp;#39;request&amp;#39; and &amp;#39;response&amp;#39; event respectively. It may be used to access response status, headers and data.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="http.Server" superclass="events.EventEmitter" visibility="internal">
        <methods>
            <method name="listen" scope="instance" url="https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback">
                <parameters>
                    <parameter name="port" type="Number"/>
                    <parameter name="hostname" type="String"/>
                    <parameter name="backlog" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Begin accepting connections on the specified port and hostname. If the hostname is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY).&lt;/p&gt;
</description>
            </method>
            <method name="close" scope="instance" url="https://nodejs.org/api/http.html#http_server_close_callback">
                <parameters>
                    <parameter name="callback" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Stops the server from accepting new connections.&lt;/p&gt;
</description>
            </method>
            <method name="setTimeout" scope="instance" url="https://nodejs.org/api/http.html#http_server_settimeout_msecs_callback">
                <parameters>
                    <parameter name="timeout" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the timeout value for sockets, and emits a &amp;#39;timeout&amp;#39; event on the Server object, passing the socket as an argument, if a timeout occurs.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="maxHeadersCount" url="https://nodejs.org/api/http.html#http_server_maxheaderscount" type="Number" scope="instance">
                <description>&lt;p&gt;Limits maximum incoming headers count, equal to 1000 by default. If set to 0 - no limit will be applied.&lt;/p&gt;
</description>
            </property>
            <property name="timeout" url="https://nodejs.org/api/http.html#http_server_timeout" type="Number" scope="instance">
                <description>&lt;p&gt;The number of milliseconds of inactivity before a socket is presumed to have timed out.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="http.ServerResponse" superclass="stream.Writable" visibility="internal">
        <methods>
            <method name="writeContinue" scope="instance" url="https://nodejs.org/api/http.html#http_response_writecontinue">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sends a HTTP/1.1 100 Continue message to the client, indicating that the request body should be sent.&lt;/p&gt;
</description>
            </method>
            <method name="writeHead" scope="instance" url="https://nodejs.org/api/http.html#http_response_writehead_statuscode_reasonphrase_headers">
                <parameters>
                    <parameter name="statusCode" type="Number"/>
                    <parameter name="headers" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sends a response header to the request. The status code is a 3-digit HTTP status code, like 404. The last argument, headers, are the response headers. Optionally one can give a human-readable reasonPhrase as the second argument.&lt;/p&gt;
</description>
            </method>
            <method name="setTimeout" scope="instance" url="https://nodejs.org/api/http.html#http_response_settimeout_msecs_callback">
                <parameters>
                    <parameter name="timeout" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the Socket&amp;#39;s timeout value to msecs. If a callback is provided, then it is added as a listener on the &amp;#39;timeout&amp;#39; event on the response object.&lt;/p&gt;
</description>
            </method>
            <method name="setHeader" scope="instance" url="https://nodejs.org/api/http.html#http_response_setheader_name_value">
                <parameters>
                    <parameter name="name" type="String"/>
                    <parameter name="value" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets a single header value for implicit headers. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here if you need to send multiple headers with the same name.&lt;/p&gt;
</description>
            </method>
            <method name="getHeader" scope="instance" url="https://nodejs.org/api/http.html#http_response_getheader_name">
                <parameters>
                    <parameter name="name" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Reads out a header that&amp;#39;s already been queued but not sent to the client. Note that the name is case insensitive. This can only be called before headers get implicitly flushed.&lt;/p&gt;
</description>
            </method>
            <method name="removeHeader" scope="instance" url="https://nodejs.org/api/http.html#http_response_removeheader_name">
                <parameters>
                    <parameter name="name" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Removes a header that&amp;#39;s queued for implicit sending.&lt;/p&gt;
</description>
            </method>
            <method name="addTrailers" scope="instance" url="https://nodejs.org/api/http.html#http_response_addtrailers_headers">
                <parameters>
                    <parameter name="headers" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;This method adds HTTP trailing headers (a header but at the end of the message) to the response.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="statusCode" url="https://nodejs.org/api/http.html#http_response_statuscode" type="Number" scope="instance">
                <description>&lt;p&gt;When using implicit headers (not calling response.writeHead() explicitly), this property controls the status code that will be sent to the client when the headers get flushed.&lt;/p&gt;
</description>
            </property>
            <property name="headersSent" url="https://nodejs.org/api/http.html#http_response_headerssent" type="Boolean" scope="instance">
                <description>&lt;p&gt;Boolean (read-only). True if headers were sent, false otherwise.&lt;/p&gt;
</description>
            </property>
            <property name="sendDate" url="https://nodejs.org/api/http.html#http_response_senddate" type="Boolean" scope="instance">
                <description>&lt;p&gt;When true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="http.Agent" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="maxSockets" url="https://nodejs.org/api/http.html#http_agent_maxsockets" type="Number" scope="instance">
                <description>&lt;p&gt;By default set to 5. Determines how many concurrent sockets the agent can have open per host.&lt;/p&gt;
</description>
            </property>
            <property name="sockets" url="https://nodejs.org/api/http.html#http_agent_sockets" type="Array&lt;net.Socket>" scope="instance">
                <description>&lt;p&gt;An object which contains arrays of sockets currently in use by the Agent. Do not modify.&lt;/p&gt;
</description>
            </property>
            <property name="requests" url="https://nodejs.org/api/http.html#http_agent_requests" type="Array&lt;http.ClientRequest>" scope="instance">
                <description>&lt;p&gt;An object which contains queues of requests that have not yet been assigned to sockets. Do not modify.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="http.ClientRequest" superclass="stream.Writable" visibility="internal">
        <methods>
            <method name="abort" scope="instance" url="https://nodejs.org/api/http.html#http_request_abort">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Aborts a request. (New since v0.3.8.)&lt;/p&gt;
</description>
            </method>
            <method name="setTimeout" scope="instance" url="https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback">
                <parameters>
                    <parameter name="timeout" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Once a socket is assigned to this request and is connected socket.setTimeout() will be called.&lt;/p&gt;
</description>
            </method>
            <method name="setNoDelay" scope="instance" url="https://nodejs.org/api/http.html#http_request_setnodelay_nodelay">
                <parameters>
                    <parameter name="noDelay" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Once a socket is assigned to this request and is connected socket.setNoDelay() will be called.&lt;/p&gt;
</description>
            </method>
            <method name="setSocketKeepAlive" scope="instance" url="https://nodejs.org/api/http.html#http_request_setsocketkeepalive_enable_initialdelay">
                <parameters>
                    <parameter name="enable" type="Boolean"/>
                    <parameter name="initialDelay" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Once a socket is assigned to this request and is connected socket.setKeepAlive() will be called.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="http.IncomingMessage" superclass="stream.Readable" visibility="internal">
        <methods>
            <method name="setTimeout" scope="instance" url="https://nodejs.org/api/http.html#http_message_settimeout_msecs_callback">
                <parameters>
                    <parameter name="timeout" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Calls message.connection.setTimeout(msecs, callback).&lt;/p&gt;
</description>
            </method>
            <method name="setEncoding" scope="instance" url="https://nodejs.org/api/http.html#http_message_setencoding_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Set the encoding for data emitted by the &amp;#39;data&amp;#39; event.&lt;/p&gt;
</description>
            </method>
            <method name="pause" scope="instance" url="https://nodejs.org/api/http.html#http_message_pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Pauses request/response from emitting events. Useful to throttle back a download.&lt;/p&gt;
</description>
            </method>
            <method name="resume" scope="instance" url="https://nodejs.org/api/http.html#http_message_resume">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Resumes a paused request/response.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="httpVersion" url="https://nodejs.org/api/http.html#http_message_httpversion" type="String" scope="instance">
                <description>&lt;p&gt;In case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Probably either &amp;#39;1.1&amp;#39; or &amp;#39;1.0&amp;#39;.&lt;/p&gt;
</description>
            </property>
            <property name="headers" url="https://nodejs.org/api/http.html#http_message_headers" type="Object" scope="instance">
                <description>&lt;p&gt;The request/response headers object.&lt;/p&gt;
</description>
            </property>
            <property name="trailers" url="https://nodejs.org/api/http.html#http_message_trailers" type="Object" scope="instance">
                <description>&lt;p&gt;The request/response trailers object. Only populated after the &amp;#39;end&amp;#39; event.&lt;/p&gt;
</description>
            </property>
            <property name="method" url="https://nodejs.org/api/http.html#http_message_method" type="String" scope="instance">
                <description>&lt;p&gt;Only valid for request obtained from http.Server.&lt;/p&gt;
</description>
            </property>
            <property name="url" url="https://nodejs.org/api/http.html#http_message_url" type="String" scope="instance">
                <description>&lt;p&gt;Only valid for request obtained from http.Server.&lt;/p&gt;
</description>
            </property>
            <property name="statusCode" url="https://nodejs.org/api/http.html#http_message_statuscode" type="Number" scope="instance">
                <description>&lt;p&gt;Only valid for response obtained from http.ClientRequest.&lt;/p&gt;
</description>
            </property>
            <property name="socket" url="https://nodejs.org/api/http.html#http_message_socket" type="net.Socket" scope="instance">
                <description>&lt;p&gt;The net.Socket object associated with the connection.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="https.exports" superclass="None" visibility="internal">
        <methods>
            <method name="createServer" scope="instance" url="https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener">
                <parameters>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="https.Server"/>
                </return-types>
                <description>&lt;p&gt;Returns a new HTTPS web server object. The options is similar to tls.createServer(). The requestListener is a function which is automatically added to the &amp;#39;request&amp;#39; event.&lt;/p&gt;
</description>
            </method>
            <method name="request" scope="instance" url="https://nodejs.org/api/https.html#https_https_request_options_callback">
                <parameters>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="http.ClientRequest"/>
                </return-types>
                <description>&lt;p&gt;Makes a request to a secure web server.&lt;/p&gt;
</description>
            </method>
            <method name="get" scope="instance" url="https://nodejs.org/api/https.html#https_https_get_options_callback">
                <parameters>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="http.ClientRequest"/>
                </return-types>
                <description>&lt;p&gt;Like http.get() but for HTTPS.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Server" type="http.Server">
                <description></description>
            </property>
            <property name="Agent" type="http.Agent">
                <description></description>
            </property>
            <property name="globalAgent" type="http.globalAgent">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="cluster.exports" superclass="None" visibility="internal">
        <methods>
            <method name="setupMaster" scope="instance" url="https://nodejs.org/api/cluster.html#cluster_cluster_setupmaster_settings">
                <parameters>
                    <parameter name="settings" type="cluster.settings"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;setupMaster is used to change the default &amp;#39;fork&amp;#39; behavior. The new settings are effective immediately and permanently, they cannot be changed later on.&lt;/p&gt;
</description>
            </method>
            <method name="fork" scope="instance" url="https://nodejs.org/api/cluster.html#cluster_cluster_fork_env">
                <parameters>
                    <parameter name="env" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="cluster.Worker"/>
                </return-types>
                <description>&lt;p&gt;Spawn a new worker process. This can only be called from the master process.&lt;/p&gt;
</description>
            </method>
            <method name="disconnect" scope="instance" url="https://nodejs.org/api/cluster.html#cluster_cluster_disconnect_callback">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;When calling this method, all workers will commit a graceful suicide. When they are disconnected all internal handlers will be closed, allowing the master process to die graceful if no other event is waiting.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="settings" type="Object">
                <description></description>
            </property>
            <property name="Worker" type="cluster.Worker" scope="static">
                <description>&lt;p&gt;A Worker object contains all public information and method about a worker. In the master it can be obtained using cluster.workers. In a worker it can be obtained using cluster.worker.&lt;/p&gt;
</description>
            </property>
            <property name="isMaster" url="https://nodejs.org/api/cluster.html#cluster_cluster_ismaster" type="Boolean" scope="instance">
                <description>&lt;p&gt;True if the process is a master. This is determined by the process.env.NODE_UNIQUE_ID. If process.env.NODE_UNIQUE_ID is undefined, then isMaster is true.&lt;/p&gt;
</description>
            </property>
            <property name="isWorker" url="https://nodejs.org/api/cluster.html#cluster_cluster_isworker" type="Boolean" scope="instance">
                <description>&lt;p&gt;This boolean flag is true if the process is a worker forked from a master. If the process.env.NODE_UNIQUE_ID is set to a value, then isWorker is true.&lt;/p&gt;
</description>
            </property>
            <property name="worker" url="https://nodejs.org/api/cluster.html#cluster_cluster_worker" type="cluster.Worker" scope="instance">
                <description>&lt;p&gt;A reference to the current worker object. Not available in the master process.&lt;/p&gt;
</description>
            </property>
            <property name="workers" url="https://nodejs.org/api/cluster.html#cluster_cluster_workers" type="Array&lt;cluster.Worker>" scope="instance">
                <description>&lt;p&gt;A hash that stores the active worker objects, keyed by id field. Makes it easy to loop through all the workers. It is only available in the master process.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="cluster.Worker" superclass="events.EventEmitter" visibility="internal">
        <methods>
            <method name="send" scope="instance" url="https://nodejs.org/api/cluster.html#cluster_worker_send_message_sendhandle">
                <parameters>
                    <parameter name="message" type="Object"/>
                    <parameter name="sendHandle" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;This function is equal to the send methods provided by child_process.fork(). In the master you should use this function to send a message to a specific worker. However in a worker you can also use process.send(message), since this is the same function.&lt;/p&gt;
</description>
            </method>
            <method name="disconnect" scope="instance" url="https://nodejs.org/api/cluster.html#cluster_worker_disconnect">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;When calling this function the worker will no longer accept new connections, but they will be handled by any other listening worker. Existing connection will be allowed to exit as usual. When no more connections exist, the IPC channel to the worker will close allowing it to die graceful. When the IPC channel is closed the disconnect event will emit, this is then followed by the exit event, there is emitted when the worker finally die.&lt;/p&gt;
</description>
            </method>
            <method name="kill" scope="instance" url="https://nodejs.org/api/cluster.html#cluster_worker_kill_signal_sigterm">
                <parameters>
                    <parameter name="signal" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;This function will kill the worker, and inform the master to not spawn a new worker. The boolean suicide lets you distinguish between voluntary and accidental exit.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="id" url="https://nodejs.org/api/cluster.html#cluster_worker_id" type="String" scope="instance">
                <description>&lt;p&gt;Each new worker is given its own unique id, this id is stored in the id.&lt;/p&gt;
</description>
            </property>
            <property name="process" url="https://nodejs.org/api/cluster.html#cluster_worker_process" type="child_process.ChildProcess" scope="instance">
                <description>&lt;p&gt;All workers are created using child_process.fork(), the returned object from this function is stored in process.&lt;/p&gt;
</description>
            </property>
            <property name="suicide" url="https://nodejs.org/api/cluster.html#cluster_worker_suicide" type="Boolean" scope="instance">
                <description>&lt;p&gt;This property is a boolean. It is set when a worker dies after calling .kill() or immediately after calling the .disconnect() method. Until then it is undefined.&lt;/p&gt;
</description>
            </property>
            <property name="destroy" type="fn()" scope="instance">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="zlib.exports" superclass="None" visibility="internal">
        <methods>
            <method name="deflate" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_deflate_buf_callback">
                <parameters>
                    <parameter name="buf" type="Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Compress a string with Deflate.&lt;/p&gt;
</description>
            </method>
            <method name="deflateRaw" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_deflateraw_buf_callback">
                <parameters>
                    <parameter name="buf" type="Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Compress a string with DeflateRaw.&lt;/p&gt;
</description>
            </method>
            <method name="gzip" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_gzip_buf_callback">
                <parameters>
                    <parameter name="buf" type="Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Compress a string with Gzip.&lt;/p&gt;
</description>
            </method>
            <method name="gunzip" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_gunzip_buf_callback">
                <parameters>
                    <parameter name="buf" type="Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Decompress a raw Buffer with Gunzip.&lt;/p&gt;
</description>
            </method>
            <method name="inflate" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_inflate_buf_callback">
                <parameters>
                    <parameter name="buf" type="Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Decompress a raw Buffer with Inflate.&lt;/p&gt;
</description>
            </method>
            <method name="inflateRaw" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_inflateraw_buf_callback">
                <parameters>
                    <parameter name="buf" type="Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Decompress a raw Buffer with InflateRaw.&lt;/p&gt;
</description>
            </method>
            <method name="unzip" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_unzip_buf_callback">
                <parameters>
                    <parameter name="buf" type="Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Decompress a raw Buffer with Unzip.&lt;/p&gt;
</description>
            </method>
            <method name="createGzip" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_creategzip_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="zlib.Zlib"/>
                </return-types>
                <description>&lt;p&gt;Returns a new Gzip object with an options.&lt;/p&gt;
</description>
            </method>
            <method name="createGunzip" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_creategunzip_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="zlib.Gunzip"/>
                </return-types>
                <description>&lt;p&gt;Returns a new Gunzip object with an options.&lt;/p&gt;
</description>
            </method>
            <method name="createDeflate" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_createdeflate_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="zlib.Deflate"/>
                </return-types>
                <description>&lt;p&gt;Returns a new Deflate object with an options.&lt;/p&gt;
</description>
            </method>
            <method name="createInflate" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_createinflate_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="zlib.Inflate"/>
                </return-types>
                <description>&lt;p&gt;Returns a new Inflate object with an options.&lt;/p&gt;
</description>
            </method>
            <method name="createInflateRaw" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_createinflateraw_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="zlib.InflateRaw"/>
                </return-types>
                <description>&lt;p&gt;Returns a new InflateRaw object with an options.&lt;/p&gt;
</description>
            </method>
            <method name="createDeflateRaw" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_createdeflateraw_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="zlib.DeflateRaw"/>
                </return-types>
                <description>&lt;p&gt;Returns a new DeflateRaw object with an options.&lt;/p&gt;
</description>
            </method>
            <method name="createUnzip" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_createunzip_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="zlib.Unzip"/>
                </return-types>
                <description>&lt;p&gt;Returns a new Unzip object with an options.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Zlib" type="zlib.Zlib" scope="static">
                <description>&lt;p&gt;Not exported by the zlib module. It is documented here because it is the base class of the compressor/decompressor classes.&lt;/p&gt;
</description>
            </property>
            <property name="Gzip" type="zlib.Gzip" scope="static">
                <description>&lt;p&gt;Compress data using gzip.&lt;/p&gt;
</description>
            </property>
            <property name="Gunzip" type="zlib.Gunzip" scope="static">
                <description>&lt;p&gt;Decompress a gzip stream.&lt;/p&gt;
</description>
            </property>
            <property name="Deflate" type="zlib.Deflate" scope="static">
                <description>&lt;p&gt;Compress data using deflate.&lt;/p&gt;
</description>
            </property>
            <property name="Inflate" type="zlib.Inflate" scope="static">
                <description>&lt;p&gt;Decompress a deflate stream.&lt;/p&gt;
</description>
            </property>
            <property name="InflateRaw" type="zlib.InflateRaw" scope="static">
                <description>&lt;p&gt;Decompress a raw deflate stream.&lt;/p&gt;
</description>
            </property>
            <property name="DeflateRaw" type="zlib.DeflateRaw" scope="static">
                <description>&lt;p&gt;Compress data using deflate, and do not append a zlib header.&lt;/p&gt;
</description>
            </property>
            <property name="Unzip" type="zlib.Unzip" scope="static">
                <description>&lt;p&gt;Decompress either a Gzip- or Deflate-compressed stream by auto-detecting the header.&lt;/p&gt;
</description>
            </property>
            <property name="Z_NO_FLUSH" type="Number">
                <description></description>
            </property>
            <property name="Z_PARTIAL_FLUSH" type="Number">
                <description></description>
            </property>
            <property name="Z_SYNC_FLUSH" type="Number">
                <description></description>
            </property>
            <property name="Z_FULL_FLUSH" type="Number">
                <description></description>
            </property>
            <property name="Z_FINISH" type="Number">
                <description></description>
            </property>
            <property name="Z_BLOCK" type="Number">
                <description></description>
            </property>
            <property name="Z_TREES" type="Number">
                <description></description>
            </property>
            <property name="Z_OK" type="Number">
                <description></description>
            </property>
            <property name="Z_STREAM_END" type="Number">
                <description></description>
            </property>
            <property name="Z_NEED_DICT" type="Number">
                <description></description>
            </property>
            <property name="Z_ERRNO" type="Number">
                <description></description>
            </property>
            <property name="Z_STREAM_ERROR" type="Number">
                <description></description>
            </property>
            <property name="Z_DATA_ERROR" type="Number">
                <description></description>
            </property>
            <property name="Z_MEM_ERROR" type="Number">
                <description></description>
            </property>
            <property name="Z_BUF_ERROR" type="Number">
                <description></description>
            </property>
            <property name="Z_VERSION_ERROR" type="Number">
                <description></description>
            </property>
            <property name="Z_NO_COMPRESSION" type="Number">
                <description></description>
            </property>
            <property name="Z_BEST_SPEED" type="Number">
                <description></description>
            </property>
            <property name="Z_BEST_COMPRESSION" type="Number">
                <description></description>
            </property>
            <property name="Z_DEFAULT_COMPRESSION" type="Number">
                <description></description>
            </property>
            <property name="Z_FILTERED" type="Number">
                <description></description>
            </property>
            <property name="Z_HUFFMAN_ONLY" type="Number">
                <description></description>
            </property>
            <property name="Z_RLE" type="Number">
                <description></description>
            </property>
            <property name="Z_FIXED" type="Number">
                <description></description>
            </property>
            <property name="Z_DEFAULT_STRATEGY" type="Number">
                <description></description>
            </property>
            <property name="Z_BINARY" type="Number">
                <description></description>
            </property>
            <property name="Z_TEXT" type="Number">
                <description></description>
            </property>
            <property name="Z_ASCII" type="Number">
                <description></description>
            </property>
            <property name="Z_UNKNOWN" type="Number">
                <description></description>
            </property>
            <property name="Z_DEFLATED" type="Number">
                <description></description>
            </property>
            <property name="Z_NULL" type="Number">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="zlib.Zlib" superclass="stream.Duplex" visibility="internal">
        <methods>
            <method name="flush" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_flush_callback">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Flush pending data. Don&amp;#39;t call this frivolously, premature flushes negatively impact the effectiveness of the compression algorithm.&lt;/p&gt;
</description>
            </method>
            <method name="reset" scope="instance" url="https://nodejs.org/api/zlib.html#zlib_zlib_reset">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Reset the compressor/decompressor to factory defaults. Only applicable to the inflate and deflate algorithms.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="zlib.Gzip" superclass="None" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="zlib.Gunzip" superclass="None" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="zlib.Deflate" superclass="None" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="zlib.Inflate" superclass="None" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="zlib.InflateRaw" superclass="None" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="zlib.DeflateRaw" superclass="None" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="zlib.Unzip" superclass="None" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="os.exports" superclass="None" visibility="internal">
        <methods>
            <method name="tmpdir" scope="instance" url="https://nodejs.org/api/os.html#os_os_tmpdir">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns the operating system&amp;#39;s default directory for temp files.&lt;/p&gt;
</description>
            </method>
            <method name="endianness" scope="instance" url="https://nodejs.org/api/os.html#os_os_endianness">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns the endianness of the CPU. Possible values are &amp;quot;BE&amp;quot; or &amp;quot;LE&amp;quot;.&lt;/p&gt;
</description>
            </method>
            <method name="hostname" scope="instance" url="https://nodejs.org/api/os.html#os_os_hostname">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns the hostname of the operating system.&lt;/p&gt;
</description>
            </method>
            <method name="type" scope="instance" url="https://nodejs.org/api/os.html#os_os_type">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns the operating system name.&lt;/p&gt;
</description>
            </method>
            <method name="platform" scope="instance" url="https://nodejs.org/api/os.html#os_os_platform">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns the operating system platform.&lt;/p&gt;
</description>
            </method>
            <method name="arch" scope="instance" url="https://nodejs.org/api/os.html#os_os_arch">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns the operating system CPU architecture.&lt;/p&gt;
</description>
            </method>
            <method name="release" scope="instance" url="https://nodejs.org/api/os.html#os_os_release">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns the operating system release.&lt;/p&gt;
</description>
            </method>
            <method name="uptime" scope="instance" url="https://nodejs.org/api/os.html#os_os_uptime">
                <parameters/>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Returns the system uptime in seconds.&lt;/p&gt;
</description>
            </method>
            <method name="loadavg" scope="instance" url="https://nodejs.org/api/os.html#os_os_loadavg">
                <parameters/>
                <return-types>
                    <return-type type="Array&lt;Number>"/>
                </return-types>
                <description>&lt;p&gt;Returns an array containing the 1, 5, and 15 minute load averages.&lt;/p&gt;
</description>
            </method>
            <method name="totalmem" scope="instance" url="https://nodejs.org/api/os.html#os_os_totalmem">
                <parameters/>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Returns the total amount of system memory in bytes.&lt;/p&gt;
</description>
            </method>
            <method name="freemem" scope="instance" url="https://nodejs.org/api/os.html#os_os_freemem">
                <parameters/>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Returns the amount of free system memory in bytes.&lt;/p&gt;
</description>
            </method>
            <method name="cpus" scope="instance" url="https://nodejs.org/api/os.html#os_os_cpus">
                <parameters/>
                <return-types>
                    <return-type type="Array&lt;os.cpuSpec>"/>
                </return-types>
                <description>&lt;p&gt;Returns an array of objects containing information about each CPU/core installed: model, speed (in MHz), and times (an object containing the number of milliseconds the CPU/core spent in: user, nice, sys, idle, and irq).&lt;/p&gt;
</description>
            </method>
            <method name="networkInterfaces" scope="instance" url="https://nodejs.org/api/os.html#os_os_networkinterfaces">
                <parameters/>
                <return-types>
                    <return-type type="?"/>
                </return-types>
                <description>&lt;p&gt;Get a list of network interfaces.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="EOL" url="https://nodejs.org/api/os.html#os_os_eol" type="String" scope="instance">
                <description>&lt;p&gt;A constant defining the appropriate End-of-line marker for the operating system.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="punycode.exports" superclass="None" visibility="internal">
        <methods>
            <method name="decode" scope="instance" url="https://nodejs.org/api/punycode.html#punycode_punycode_decode_string">
                <parameters>
                    <parameter name="string" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Converts a Punycode string of ASCII code points to a string of Unicode code points.&lt;/p&gt;
</description>
            </method>
            <method name="encode" scope="instance" url="https://nodejs.org/api/punycode.html#punycode_punycode_encode_string">
                <parameters>
                    <parameter name="string" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Converts a string of Unicode code points to a Punycode string of ASCII code points.&lt;/p&gt;
</description>
            </method>
            <method name="toUnicode" scope="instance" url="https://nodejs.org/api/punycode.html#punycode_punycode_tounicode_domain">
                <parameters>
                    <parameter name="domain" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Converts a Punycode string representing a domain name to Unicode. Only the Punycoded parts of the domain name will be converted, i.e. it doesn&amp;#39;t matter if you call it on a string that has already been converted to Unicode.&lt;/p&gt;
</description>
            </method>
            <method name="toASCII" scope="instance" url="https://nodejs.org/api/punycode.html#punycode_punycode_toascii_domain">
                <parameters>
                    <parameter name="domain" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Converts a Unicode string representing a domain name to Punycode. Only the non-ASCII parts of the domain name will be converted, i.e. it doesn&amp;#39;t matter if you call it with a domain that&amp;#39;s already in ASCII.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="ucs2" type="Object">
                <description></description>
            </property>
            <property name="version" url="https://nodejs.org/api/punycode.html#punycode_punycode_version" type="Object" scope="instance">
                <description>&lt;p&gt;A string representing the current Punycode.js version number.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="repl.exports" superclass="None" visibility="internal">
        <methods>
            <method name="start" scope="instance" url="https://nodejs.org/api/repl.html#repl_repl_start_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="events.EventEmitter"/>
                </return-types>
                <description>&lt;p&gt;Returns and starts a REPLServer instance.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="readline.exports" superclass="None" visibility="internal">
        <methods>
            <method name="createInterface" scope="instance" url="https://nodejs.org/api/readline.html#readline_readline_createinterface_options">
                <parameters>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="readline.Interface"/>
                </return-types>
                <description>&lt;p&gt;Creates a readline Interface instance.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Interface" type="readline.Interface" scope="static">
                <description>&lt;p&gt;The class that represents a readline interface with an input and output stream.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="readline.Interface" superclass="events.EventEmitter" visibility="internal">
        <methods>
            <method name="setPrompt" scope="instance" url="https://nodejs.org/api/readline.html#readline_rl_setprompt_prompt_length">
                <parameters>
                    <parameter name="prompt" type="String"/>
                    <parameter name="length" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the prompt, for example when you run node on the command line, you see &amp;gt; , which is node&amp;#39;s prompt.&lt;/p&gt;
</description>
            </method>
            <method name="prompt" scope="instance" url="https://nodejs.org/api/readline.html#readline_rl_prompt_preservecursor">
                <parameters>
                    <parameter name="preserveCursor" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Readies readline for input from the user, putting the current setPrompt options on a new line, giving the user a new spot to write. Set preserveCursor to true to prevent the cursor placement being reset to 0.&lt;/p&gt;
</description>
            </method>
            <method name="question" scope="instance" url="https://nodejs.org/api/readline.html#readline_rl_question_query_callback">
                <parameters>
                    <parameter name="query" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Prepends the prompt with query and invokes callback with the user&amp;#39;s response. Displays the query to the user, and then invokes callback with the user&amp;#39;s response after it has been typed.&lt;/p&gt;
</description>
            </method>
            <method name="pause" scope="instance" url="https://nodejs.org/api/readline.html#readline_rl_pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Pauses the readline input stream, allowing it to be resumed later if needed.&lt;/p&gt;
</description>
            </method>
            <method name="resume" scope="instance" url="https://nodejs.org/api/readline.html#readline_rl_resume">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Resumes the readline input stream.&lt;/p&gt;
</description>
            </method>
            <method name="close" scope="instance" url="https://nodejs.org/api/readline.html#readline_rl_close">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Closes the Interface instance, relinquishing control on the input and output streams. The &amp;quot;close&amp;quot; event will also be emitted.&lt;/p&gt;
</description>
            </method>
            <method name="write" scope="instance" url="https://nodejs.org/api/readline.html#readline_rl_write_data_key">
                <parameters>
                    <parameter name="data" type="Object"/>
                    <parameter name="key" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Writes data to output stream. key is an object literal to represent a key sequence; available if the terminal is a TTY.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="vm.exports" superclass="None" visibility="internal">
        <methods>
            <method name="createContext" scope="instance" url="https://nodejs.org/api/vm.html#vm_vm_createcontext_initsandbox">
                <parameters>
                    <parameter name="initSandbox" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="?"/>
                </return-types>
                <description>&lt;p&gt;vm.createContext creates a new context which is suitable for use as the 2nd argument of a subsequent call to vm.runInContext. A (V8) context comprises a global object together with a set of build-in objects and functions. The optional argument initSandbox will be shallow-copied to seed the initial contents of the global object used by the context.&lt;/p&gt;
</description>
            </method>
            <method name="runInThisContext" scope="instance" url="https://nodejs.org/api/vm.html#vm_vm_runinthiscontext_code_filename">
                <parameters>
                    <parameter name="code" type="String"/>
                    <parameter name="filename" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;vm.runInThisContext() compiles code, runs it and returns the result. Running code does not have access to local scope. filename is optional, it&amp;#39;s used only in stack traces.&lt;/p&gt;
</description>
            </method>
            <method name="runInNewContext" scope="instance" url="https://nodejs.org/api/vm.html#vm_vm_runinnewcontext_code_sandbox_filename">
                <parameters>
                    <parameter name="code" type="String"/>
                    <parameter name="sandbox" type="Object"/>
                    <parameter name="filename" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;vm.runInNewContext compiles code, then runs it in sandbox and returns the result. Running code does not have access to local scope. The object sandbox will be used as the global object for code. sandbox and filename are optional, filename is only used in stack traces.&lt;/p&gt;
</description>
            </method>
            <method name="runInContext" scope="instance" url="https://nodejs.org/api/vm.html#vm_vm_runincontext_code_context_filename">
                <parameters>
                    <parameter name="code" type="String"/>
                    <parameter name="context" type="Object"/>
                    <parameter name="filename" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;vm.runInContext compiles code, then runs it in context and returns the result. A (V8) context comprises a global object, together with a set of built-in objects and functions. Running code does not have access to local scope and the global object held within context will be used as the global object for code. filename is optional, it&amp;#39;s used only in stack traces.&lt;/p&gt;
</description>
            </method>
            <method name="createScript" scope="instance" url="https://nodejs.org/api/vm.html#vm_vm_createscript_code_filename">
                <parameters>
                    <parameter name="code" type="String"/>
                    <parameter name="filename" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="vm.Script"/>
                </return-types>
                <description>&lt;p&gt;createScript compiles code but does not run it. Instead, it returns a vm.Script object representing this compiled code. This script can be run later many times using methods below. The returned script is not bound to any global object. It is bound before each run, just for that run. filename is optional, it&amp;#39;s only used in stack traces.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Script" type="vm.Script" scope="static">
                <description>&lt;p&gt;A class for running scripts. Returned by vm.createScript.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="vm.Script" superclass="None" visibility="internal">
        <methods>
            <method name="runInThisContext" scope="instance" url="https://nodejs.org/api/vm.html#vm_script_runinthiscontext">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Similar to vm.runInThisContext but a method of a precompiled Script object. script.runInThisContext runs the code of script and returns the result. Running code does not have access to local scope, but does have access to the global object (v8: in actual context).&lt;/p&gt;
</description>
            </method>
            <method name="runInNewContext" scope="instance" url="https://nodejs.org/api/vm.html#vm_script_runinnewcontext_sandbox">
                <parameters>
                    <parameter name="sandbox" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Similar to vm.runInNewContext a method of a precompiled Script object. script.runInNewContext runs the code of script with sandbox as the global object and returns the result. Running code does not have access to local scope. sandbox is optional.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="child_process.exports" superclass="None" visibility="internal">
        <methods>
            <method name="spawn" scope="instance" url="https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options">
                <parameters>
                    <parameter name="command" type="String"/>
                    <parameter name="args" type="Array&lt;String>"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="child_process.ChildProcess"/>
                </return-types>
                <description>&lt;p&gt;Launches a new process with the given command, with command line arguments in args. If omitted, args defaults to an empty Array.&lt;/p&gt;
</description>
            </method>
            <method name="exec" scope="instance" url="https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback">
                <parameters>
                    <parameter name="command" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="child_process.ChildProcess"/>
                </return-types>
                <description>&lt;p&gt;Runs a command in a shell and buffers the output.&lt;/p&gt;
</description>
            </method>
            <method name="execFile" scope="instance" url="https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback">
                <parameters>
                    <parameter name="file" type="String"/>
                    <parameter name="args" type="Array&lt;String>"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="child_process.ChildProcess"/>
                </return-types>
                <description>&lt;p&gt;This is similar to child_process.exec() except it does not execute a subshell but rather the specified file directly. This makes it slightly leaner than child_process.exec. It has the same options.&lt;/p&gt;
</description>
            </method>
            <method name="fork" scope="instance" url="https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options">
                <parameters>
                    <parameter name="modulePath" type="String"/>
                    <parameter name="args" type="Array&lt;String>"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="child_process.ChildProcess"/>
                </return-types>
                <description>&lt;p&gt;This is a special case of the spawn() functionality for spawning Node processes. In addition to having all the methods in a normal ChildProcess instance, the returned object has a communication channel built-in.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="ChildProcess" type="child_process.ChildProcess" scope="static">
                <description>&lt;p&gt;ChildProcess is an EventEmitter.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="child_process.ChildProcess" superclass="events.EventEmitter" visibility="internal">
        <methods>
            <method name="kill" scope="instance" url="https://nodejs.org/api/child_process.html#child_process_child_kill_signal">
                <parameters>
                    <parameter name="signal" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Send a signal to the child process. If no argument is given, the process will be sent &amp;#39;SIGTERM&amp;#39;.&lt;/p&gt;
</description>
            </method>
            <method name="send" scope="instance" url="https://nodejs.org/api/child_process.html#child_process_child_send_message_sendhandle">
                <parameters>
                    <parameter name="message" type="Object"/>
                    <parameter name="sendHandle" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;When using child_process.fork() you can write to the child using child.send(message, [sendHandle]) and messages are received by a &amp;#39;message&amp;#39; event on the child.&lt;/p&gt;
</description>
            </method>
            <method name="disconnect" scope="instance" url="https://nodejs.org/api/child_process.html#child_process_child_disconnect">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;To close the IPC connection between parent and child use the child.disconnect() method. This allows the child to exit gracefully since there is no IPC channel keeping it alive. When calling this method the disconnect event will be emitted in both parent and child, and the connected flag will be set to false. Please note that you can also call process.disconnect() in the child process.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="stdin" url="https://nodejs.org/api/child_process.html#child_process_child_stdin" type="stream.Writable" scope="instance">
                <description>&lt;p&gt;A Writable Stream that represents the child process&amp;#39;s stdin. Closing this stream via end() often causes the child process to terminate.&lt;/p&gt;
</description>
            </property>
            <property name="stdout" url="https://nodejs.org/api/child_process.html#child_process_child_stdout" type="stream.Readable" scope="instance">
                <description>&lt;p&gt;A Readable Stream that represents the child process&amp;#39;s stdout.&lt;/p&gt;
</description>
            </property>
            <property name="stderr" url="https://nodejs.org/api/child_process.html#child_process_child_stderr" type="stream.Readable" scope="instance">
                <description>&lt;p&gt;A Readable Stream that represents the child process&amp;#39;s stderr.&lt;/p&gt;
</description>
            </property>
            <property name="pid" url="https://nodejs.org/api/child_process.html#child_process_child_pid" type="Number" scope="instance">
                <description>&lt;p&gt;The PID of the child process.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="url.exports" superclass="None" visibility="internal">
        <methods>
            <method name="parse" scope="instance" url="https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost">
                <parameters>
                    <parameter name="urlStr" type="String"/>
                    <parameter name="parseQueryString" type="Boolean"/>
                    <parameter name="slashesDenoteHost" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="url.type"/>
                </return-types>
                <description>&lt;p&gt;Take a URL string, and return an object.&lt;/p&gt;
</description>
            </method>
            <method name="format" scope="instance" url="https://nodejs.org/api/url.html#url_url_format_urlobj">
                <parameters>
                    <parameter name="url" type="url.type"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Take a parsed URL object, and return a formatted URL string.&lt;/p&gt;
</description>
            </method>
            <method name="resolve" scope="instance" url="https://nodejs.org/api/url.html#url_url_resolve_from_to">
                <parameters>
                    <parameter name="from" type="String"/>
                    <parameter name="to" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Take a base URL, and a href URL, and resolve them as a browser would for an anchor tag.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="dns.exports" superclass="None" visibility="internal">
        <methods>
            <method name="lookup" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_lookup_domain_family_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Resolves a domain (e.g. &amp;#39;google.com&amp;#39;) into the first found A (IPv4) or AAAA (IPv6) record. The family can be the integer 4 or 6. Defaults to null that indicates both Ip v4 and v6 address family.&lt;/p&gt;
</description>
            </method>
            <method name="resolve" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_resolve_domain_rrtype_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;Resolves a domain (e.g. &amp;#39;google.com&amp;#39;) into an array of the record types specified by rrtype. Valid rrtypes are &amp;#39;A&amp;#39; (IPV4 addresses, default), &amp;#39;AAAA&amp;#39; (IPV6 addresses), &amp;#39;MX&amp;#39; (mail exchange records), &amp;#39;TXT&amp;#39; (text records), &amp;#39;SRV&amp;#39; (SRV records), &amp;#39;PTR&amp;#39; (used for reverse IP lookups), &amp;#39;NS&amp;#39; (name server records) and &amp;#39;CNAME&amp;#39; (canonical name records).&lt;/p&gt;
</description>
            </method>
            <method name="resolve4" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_resolve4_domain_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;The same as dns.resolve(), but only for IPv4 queries (A records). addresses is an array of IPv4 addresses (e.g. [&amp;#39;74.125.79.104&amp;#39;, &amp;#39;74.125.79.105&amp;#39;, &amp;#39;74.125.79.106&amp;#39;]).&lt;/p&gt;
</description>
            </method>
            <method name="resolve6" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_resolve6_domain_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;The same as dns.resolve4() except for IPv6 queries (an AAAA query).&lt;/p&gt;
</description>
            </method>
            <method name="resolveMx" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_resolvemx_domain_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;The same as dns.resolve(), but only for mail exchange queries (MX records).&lt;/p&gt;
</description>
            </method>
            <method name="resolveTxt" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_resolvetxt_domain_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;The same as dns.resolve(), but only for text queries (TXT records). addresses is an array of the text records available for domain (e.g., [&amp;#39;v=spf1 ip4:0.0.0.0 ~all&amp;#39;]).&lt;/p&gt;
</description>
            </method>
            <method name="resolveSrv" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_resolvesrv_domain_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;The same as dns.resolve(), but only for service records (SRV records). addresses is an array of the SRV records available for domain. Properties of SRV records are priority, weight, port, and name (e.g., [{&amp;#39;priority&amp;#39;: 10, {&amp;#39;weight&amp;#39;: 5, &amp;#39;port&amp;#39;: 21223, &amp;#39;name&amp;#39;: &amp;#39;service.example.com&amp;#39;}, ...]).&lt;/p&gt;
</description>
            </method>
            <method name="resolveNs" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_resolvens_domain_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;The same as dns.resolve(), but only for name server records (NS records). addresses is an array of the name server records available for domain (e.g., [&amp;#39;ns1.example.com&amp;#39;, &amp;#39;ns2.example.com&amp;#39;]).&lt;/p&gt;
</description>
            </method>
            <method name="resolveCname" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_resolvecname_domain_callback">
                <parameters>
                    <parameter name="domain" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;The same as dns.resolve(), but only for canonical name records (CNAME records). addresses is an array of the canonical name records available for domain (e.g., [&amp;#39;bar.example.com&amp;#39;]).&lt;/p&gt;
</description>
            </method>
            <method name="reverse" scope="instance" url="https://nodejs.org/api/dns.html#dns_dns_reverse_ip_callback">
                <parameters>
                    <parameter name="ip" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;Reverse resolves an ip address to an array of domain names.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="net.exports" superclass="None" visibility="internal">
        <methods>
            <method name="createServer" scope="instance" url="https://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener">
                <parameters>
                    <parameter name="options" type="Object"/>
                    <parameter name="connectionListener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="net.Server"/>
                </return-types>
                <description>&lt;p&gt;Creates a new TCP server. The connectionListener argument is automatically set as a listener for the &amp;#39;connection&amp;#39; event.&lt;/p&gt;
</description>
            </method>
            <method name="connect" scope="instance" url="https://nodejs.org/api/net.html#net_net_connect_options_connectionlistener">
                <parameters>
                    <parameter name="options" type="Object"/>
                    <parameter name="connectionListener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="net.Socket"/>
                </return-types>
                <description>&lt;p&gt;Constructs a new socket object and opens the socket to the given location. When the socket is established, the &amp;#39;connect&amp;#39; event will be emitted.&lt;/p&gt;
</description>
            </method>
            <method name="createConnection" scope="instance" url="https://nodejs.org/api/net.html#net_net_createconnection_options_connectionlistener">
                <parameters>
                    <parameter name="options" type="Object"/>
                    <parameter name="connectionListener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="net.Socket"/>
                </return-types>
                <description>&lt;p&gt;Constructs a new socket object and opens the socket to the given location. When the socket is established, the &amp;#39;connect&amp;#39; event will be emitted.&lt;/p&gt;
</description>
            </method>
            <method name="isIP" scope="instance" url="https://nodejs.org/api/net.html#net_net_isip_input">
                <parameters>
                    <parameter name="input" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Tests if input is an IP address. Returns 0 for invalid strings, returns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.&lt;/p&gt;
</description>
            </method>
            <method name="isIPv4" scope="instance" url="https://nodejs.org/api/net.html#net_net_isipv4_input">
                <parameters>
                    <parameter name="input" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if input is a version 4 IP address, otherwise returns false.&lt;/p&gt;
</description>
            </method>
            <method name="isIPv6" scope="instance" url="https://nodejs.org/api/net.html#net_net_isipv6_input">
                <parameters>
                    <parameter name="input" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if input is a version 6 IP address, otherwise returns false.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Server" type="net.Server" scope="static">
                <description>&lt;p&gt;This class is used to create a TCP or UNIX server. A server is a net.Socket that can listen for new incoming connections.&lt;/p&gt;
</description>
            </property>
            <property name="Socket" type="net.Socket" scope="static">
                <description>&lt;p&gt;This object is an abstraction of a TCP or UNIX socket. net.Socket instances implement a duplex Stream interface. They can be created by the user and used as a client (with connect()) or they can be created by Node and passed to the user through the &amp;#39;connection&amp;#39; event of a server.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="net.Server" superclass="net.Socket" visibility="internal">
        <methods>
            <method name="listen" scope="instance" url="https://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback">
                <parameters>
                    <parameter name="port" type="Number"/>
                    <parameter name="hostname" type="String"/>
                    <parameter name="backlog" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Begin accepting connections on the specified port and host. If the host is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY). A port value of zero will assign a random port.&lt;/p&gt;
</description>
            </method>
            <method name="close" scope="instance" url="https://nodejs.org/api/net.html#net_server_close_callback">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Stops the server from accepting new connections and keeps existing connections. This function is asynchronous, the server is finally closed when all connections are ended and the server emits a &amp;#39;close&amp;#39; event. Optionally, you can pass a callback to listen for the &amp;#39;close&amp;#39; event.&lt;/p&gt;
</description>
            </method>
            <method name="getConnections" scope="instance" url="https://nodejs.org/api/net.html#net_server_getconnections_callback">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronously get the number of concurrent connections on the server. Works when sockets were sent to forks.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="maxConnections" url="https://nodejs.org/api/net.html#net_server_maxconnections" type="Number" scope="instance">
                <description>&lt;p&gt;Set this property to reject connections when the server&amp;#39;s connection count gets high.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="net.Socket" superclass="events.EventEmitter" visibility="internal">
        <methods>
            <method name="connect" scope="instance" url="https://nodejs.org/api/net.html#net_socket_connect_port_host_connectlistener">
                <parameters>
                    <parameter name="port" type="Number"/>
                    <parameter name="host" type="String"/>
                    <parameter name="connectionListener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Opens the connection for a given socket. If port and host are given, then the socket will be opened as a TCP socket, if host is omitted, localhost will be assumed. If a path is given, the socket will be opened as a unix socket to that path.&lt;/p&gt;
</description>
            </method>
            <method name="setEncoding" scope="instance" url="https://nodejs.org/api/net.html#net_socket_setencoding_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Set the encoding for the socket as a Readable Stream.&lt;/p&gt;
</description>
            </method>
            <method name="write" scope="instance" url="https://nodejs.org/api/net.html#net_socket_write_data_encoding_callback">
                <parameters>
                    <parameter name="data" type="Buffer"/>
                    <parameter name="encoding" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sends data on the socket. The second parameter specifies the encoding in the case of a string--it defaults to UTF8 encoding.&lt;/p&gt;
</description>
            </method>
            <method name="end" scope="instance" url="https://nodejs.org/api/net.html#net_socket_end_data_encoding">
                <parameters>
                    <parameter name="data" type="Buffer"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.&lt;/p&gt;
</description>
            </method>
            <method name="destroy" scope="instance" url="https://nodejs.org/api/net.html#net_socket_destroy">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Ensures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so).&lt;/p&gt;
</description>
            </method>
            <method name="pause" scope="instance" url="https://nodejs.org/api/net.html#net_socket_pause">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Pauses the reading of data. That is, &amp;#39;data&amp;#39; events will not be emitted. Useful to throttle back an upload.&lt;/p&gt;
</description>
            </method>
            <method name="resume" scope="instance" url="https://nodejs.org/api/net.html#net_socket_resume">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Resumes reading after a call to pause().&lt;/p&gt;
</description>
            </method>
            <method name="setTimeout" scope="instance" url="https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback">
                <parameters>
                    <parameter name="timeout" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the socket to timeout after timeout milliseconds of inactivity on the socket. By default net.Socket do not have a timeout.&lt;/p&gt;
</description>
            </method>
            <method name="setKeepAlive" scope="instance" url="https://nodejs.org/api/net.html#net_socket_setkeepalive_enable_initialdelay">
                <parameters>
                    <parameter name="enable" type="Boolean"/>
                    <parameter name="initialDelay" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Enable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket. enable defaults to false.&lt;/p&gt;
</description>
            </method>
            <method name="address" scope="instance" url="https://nodejs.org/api/net.html#net_socket_address">
                <parameters/>
                <return-types>
                    <return-type type="net.address"/>
                </return-types>
                <description>&lt;p&gt;Returns the bound address, the address family name and port of the socket as reported by the operating system. Returns an object with three properties, e.g. { port: 12346, family: &amp;#39;IPv4&amp;#39;, address: &amp;#39;127.0.0.1&amp;#39; }&lt;/p&gt;
</description>
            </method>
            <method name="unref" scope="instance" url="https://nodejs.org/api/net.html#net_socket_unref">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Calling unref on a socket will allow the program to exit if this is the only active socket in the event system. If the socket is already unrefd calling unref again will have no effect.&lt;/p&gt;
</description>
            </method>
            <method name="ref" scope="instance" url="https://nodejs.org/api/net.html#net_socket_ref">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Opposite of unref, calling ref on a previously unrefd socket will not let the program exit if it&amp;#39;s the only socket left (the default behavior). If the socket is refd calling ref again will have no effect.&lt;/p&gt;
</description>
            </method>
            <method name="setNoDelay" scope="instance" url="https://nodejs.org/api/net.html#net_socket_setnodelay_nodelay">
                <parameters>
                    <parameter name="noDelay" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Disables the Nagle algorithm. By default TCP connections use the Nagle algorithm, they buffer data before sending it off. Setting true for noDelay will immediately fire off data each time socket.write() is called. noDelay defaults to true.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="bufferSize" url="https://nodejs.org/api/net.html#net_socket_buffersize" type="Number" scope="instance">
                <description>&lt;p&gt;net.Socket has the property that socket.write() always works. This is to help users get up and running quickly. The computer cannot always keep up with the amount of data that is written to a socket - the network connection simply might be too slow. Node will internally queue up the data written to a socket and send it out over the wire when it is possible. (Internally it is polling on the socket&amp;#39;s file descriptor for being writable).&lt;/p&gt;
</description>
            </property>
            <property name="remoteAddress" url="https://nodejs.org/api/net.html#net_socket_remoteaddress" type="String" scope="instance">
                <description>&lt;p&gt;The string representation of the remote IP address. For example, &amp;#39;74.125.127.100&amp;#39; or &amp;#39;2001:4860:a005::68&amp;#39;.&lt;/p&gt;
</description>
            </property>
            <property name="remotePort" url="https://nodejs.org/api/net.html#net_socket_remoteport" type="Number" scope="instance">
                <description>&lt;p&gt;The numeric representation of the remote port. For example, 80 or 21.&lt;/p&gt;
</description>
            </property>
            <property name="localPort" url="https://nodejs.org/api/net.html#net_socket_localport" type="Number" scope="instance">
                <description>&lt;p&gt;The numeric representation of the local port. For example, 80 or 21.&lt;/p&gt;
</description>
            </property>
            <property name="bytesRead" url="https://nodejs.org/api/net.html#net_socket_bytesread" type="Number" scope="instance">
                <description>&lt;p&gt;The amount of received bytes.&lt;/p&gt;
</description>
            </property>
            <property name="bytesWritten" url="https://nodejs.org/api/net.html#net_socket_byteswritten" type="Number" scope="instance">
                <description>&lt;p&gt;The amount of bytes sent.&lt;/p&gt;
</description>
            </property>
            <property name="localAddress" url="https://nodejs.org/api/net.html#net_socket_localaddress" type="String" scope="instance">
                <description>&lt;p&gt;The string representation of the local IP address the remote client is connecting on. For example, if you are listening on &amp;#39;0.0.0.0&amp;#39; and the client connects on &amp;#39;192.168.1.1&amp;#39;, the value would be &amp;#39;192.168.1.1&amp;#39;.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="dgram.exports" superclass="None" visibility="internal">
        <methods>
            <method name="createSocket" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_dgram_createsocket_type_callback">
                <parameters>
                    <parameter name="type" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="dgram.Socket"/>
                </return-types>
                <description>&lt;p&gt;Creates a datagram Socket of the specified types. Valid types are udp4 and udp6.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Socket" type="dgram.Socket" scope="static">
                <description>&lt;p&gt;The dgram Socket class encapsulates the datagram functionality. It should be created via dgram.createSocket(type, [callback]).&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="dgram.Socket" superclass="events.EventEmitter" visibility="internal">
        <methods>
            <method name="send" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_send_buf_offset_length_port_address_callback">
                <parameters>
                    <parameter name="buf" type="Buffer"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="length" type="Number"/>
                    <parameter name="port" type="Number"/>
                    <parameter name="address" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;For UDP sockets, the destination port and IP address must be specified. A string may be supplied for the address parameter, and it will be resolved with DNS. An optional callback may be specified to detect any DNS errors and when buf may be re-used. Note that DNS lookups will delay the time that a send takes place, at least until the next tick. The only way to know for sure that a send has taken place is to use the callback.&lt;/p&gt;
</description>
            </method>
            <method name="bind" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_bind_port_address_callback">
                <parameters>
                    <parameter name="port" type="Number"/>
                    <parameter name="address" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;For UDP sockets, listen for datagrams on a named port and optional address. If address is not specified, the OS will try to listen on all addresses.&lt;/p&gt;
</description>
            </method>
            <method name="close" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_close">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Close the underlying socket and stop listening for data on it.&lt;/p&gt;
</description>
            </method>
            <method name="setBroadcast" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_setbroadcast_flag">
                <parameters>
                    <parameter name="flag" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets or clears the SO_BROADCAST socket option. When this option is set, UDP packets may be sent to a local interface&amp;#39;s broadcast address.&lt;/p&gt;
</description>
            </method>
            <method name="setTTL" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_setttl_ttl">
                <parameters>
                    <parameter name="ttl" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the IP_TTL socket option. TTL stands for &amp;quot;Time to Live,&amp;quot; but in this context it specifies the number of IP hops that a packet is allowed to go through. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded. Changing TTL values is typically done for network probes or when multicasting.&lt;/p&gt;
</description>
            </method>
            <method name="setMulticastTTL" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_setmulticastttl_ttl">
                <parameters>
                    <parameter name="ttl" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the IP_MULTICAST_TTL socket option. TTL stands for &amp;quot;Time to Live,&amp;quot; but in this context it specifies the number of IP hops that a packet is allowed to go through, specifically for multicast traffic. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.&lt;/p&gt;
</description>
            </method>
            <method name="setMulticastLoopback" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_setmulticastloopback_flag">
                <parameters>
                    <parameter name="flag" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets or clears the IP_MULTICAST_LOOP socket option. When this option is set, multicast packets will also be received on the local interface.&lt;/p&gt;
</description>
            </method>
            <method name="addMembership" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_addmembership_multicastaddress_multicastinterface">
                <parameters>
                    <parameter name="multicastAddress" type="String"/>
                    <parameter name="multicastInterface" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tells the kernel to join a multicast group with IP_ADD_MEMBERSHIP socket option.&lt;/p&gt;
</description>
            </method>
            <method name="dropMembership" scope="instance" url="https://nodejs.org/api/dgram.html#dgram_socket_dropmembership_multicastaddress_multicastinterface">
                <parameters>
                    <parameter name="multicastAddress" type="String"/>
                    <parameter name="multicastInterface" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Opposite of addMembership - tells the kernel to leave a multicast group with IP_DROP_MEMBERSHIP socket option. This is automatically called by the kernel when the socket is closed or process terminates, so most apps will never need to call this.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="address" type="Object" scope="instance">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="fs.exports" superclass="None" visibility="internal">
        <methods>
            <method name="access" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_access_path_mode_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="mode" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests a user&amp;#39;s permissions for the file or directory specified by path. The mode argument is an optional integer that specifies the accessibility checks to be performed. The following constants define the possible values of mode. It is possible to create a mask consisting of the bitwise OR of two or more values.&lt;/p&gt;
</description>
            </method>
            <method name="accessSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_accesssync_path_mode">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="mode" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous version of fs.access(). This throws if any accessibility checks fail, and does nothing otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="appendFile" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_appendfile_file_data_options_callback">
                <parameters>
                    <parameter name="file" type="String|Buffer|Number"/>
                    <parameter name="data" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronously append data to a file, creating the file if it does not yet exist. data can be a string or a buffer.&lt;/p&gt;
</description>
            </method>
            <method name="appendFileSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_appendfilesync_file_data_options">
                <parameters>
                    <parameter name="file" type="String|Buffer|Number"/>
                    <parameter name="data" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;The synchronous version of fs.appendFile(). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="chmod" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_chmod_path_mode_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="mode" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous chmod(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="chmodSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_chmodsync_path_mode">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="mode" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous chmod(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="chown" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_chown_path_uid_gid_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="uid" type="Number"/>
                    <parameter name="gid" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous chown(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="chownSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_chownsync_path_uid_gid">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="uid" type="Number"/>
                    <parameter name="gid" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous chown(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="close" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_close_fd_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous close(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="closeSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_closesync_fd">
                <parameters>
                    <parameter name="fd" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous close(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="createReadStream" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="fs.ReadStream"/>
                </return-types>
                <description>&lt;p&gt;Returns a new ReadStream object. (See Readable Stream).&lt;/p&gt;
</description>
            </method>
            <method name="createWriteStream" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="fs.WriteStream"/>
                </return-types>
                <description>&lt;p&gt;Returns a new WriteStream object. (See Writable Stream).&lt;/p&gt;
</description>
            </method>
            <method name="exists" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_exists_path_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Test whether or not the given path exists by checking with the file system. Then call the callback argument with either true or false. Example:&lt;/p&gt;
</description>
            </method>
            <method name="existsSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_existssync_path">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Stability: 0 - Deprecated: Use fs.statSync() or fs.accessSync() instead.&lt;/p&gt;
</description>
            </method>
            <method name="fchmod" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fchmod_fd_mode_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="mode" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous fchmod(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="fchmodSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fchmodsync_fd_mode">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="mode" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous fchmod(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="fchown" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fchown_fd_uid_gid_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="uid" type="Number"/>
                    <parameter name="gid" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous fchown(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="fchownSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fchownsync_fd_uid_gid">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="uid" type="Number"/>
                    <parameter name="gid" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous fchown(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="fdatasync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fdatasync_fd_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous fdatasync(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="fdatasyncSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fdatasyncsync_fd">
                <parameters>
                    <parameter name="fd" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous fdatasync(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="fstat" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fstat_fd_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous fstat(2). The callback gets two arguments (err, stats) where stats is a fs.Stats object. fstat() is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd.&lt;/p&gt;
</description>
            </method>
            <method name="fstatSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fstatsync_fd">
                <parameters>
                    <parameter name="fd" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="fs.Stats"/>
                </return-types>
                <description>&lt;p&gt;Synchronous fstat(2). Returns an instance of fs.Stats.&lt;/p&gt;
</description>
            </method>
            <method name="fsync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fsync_fd_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous fsync(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="fsyncSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_fsyncsync_fd">
                <parameters>
                    <parameter name="fd" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous fsync(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="ftruncate" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_ftruncate_fd_len_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="len" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous ftruncate(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="ftruncateSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_ftruncatesync_fd_len">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="len" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous ftruncate(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="futimes" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_futimes_fd_atime_mtime_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="atime" type="Number"/>
                    <parameter name="mtime" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Change the file timestamps of a file referenced by the supplied file descriptor.&lt;/p&gt;
</description>
            </method>
            <method name="futimesSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_futimessync_fd_atime_mtime">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="atime" type="Number"/>
                    <parameter name="mtime" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous version of fs.futimes(). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="lchmod" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_lchmod_path_mode_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="mode" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous lchmod(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="lchmodSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_lchmodsync_path_mode">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="mode" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous lchmod(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="lchown" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_lchown_path_uid_gid_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="uid" type="Number"/>
                    <parameter name="gid" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous lchown(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="lchownSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_lchownsync_path_uid_gid">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="uid" type="Number"/>
                    <parameter name="gid" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous lchown(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="link" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_link_srcpath_dstpath_callback">
                <parameters>
                    <parameter name="srcpath" type="String|Buffer"/>
                    <parameter name="dstpath" type="String|Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous link(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="linkSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_linksync_srcpath_dstpath">
                <parameters>
                    <parameter name="srcpath" type="String|Buffer"/>
                    <parameter name="dstpath" type="String|Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous link(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="lstat" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_lstat_path_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous lstat(2). The callback gets two arguments (err, stats) where stats is a fs.Stats object. lstat() is identical to stat(), except that if path is a symbolic link, then the link itself is stat-ed, not the file that it refers to.&lt;/p&gt;
</description>
            </method>
            <method name="lstatSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_lstatsync_path">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="fs.Stats"/>
                </return-types>
                <description>&lt;p&gt;Synchronous lstat(2). Returns an instance of fs.Stats.&lt;/p&gt;
</description>
            </method>
            <method name="mkdir" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_mkdir_path_mode_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="mode" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous mkdir(2). No arguments other than a possible exception are given to the completion callback. mode defaults to 0o777.&lt;/p&gt;
</description>
            </method>
            <method name="mkdirSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_mkdirsync_path_mode">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="mode" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous mkdir(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="mkdtemp" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_mkdtemp_prefix_options_callback">
                <parameters>
                    <parameter name="prefix" type="String"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Creates a unique temporary directory.&lt;/p&gt;
</description>
            </method>
            <method name="mkdtempSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_mkdtempsync_prefix_options">
                <parameters>
                    <parameter name="prefix" type="String"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;The synchronous version of fs.mkdtemp(). Returns the created folder path.&lt;/p&gt;
</description>
            </method>
            <method name="open" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="flags" type="String|Number"/>
                    <parameter name="mode" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous file open. See open(2). flags can be:&lt;/p&gt;
</description>
            </method>
            <method name="openSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_opensync_path_flags_mode">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="flags" type="String|Number"/>
                    <parameter name="mode" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Synchronous version of fs.open(). Returns an integer representing the file descriptor.&lt;/p&gt;
</description>
            </method>
            <method name="read" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="buffer" type="String|Buffer"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="length" type="Number"/>
                    <parameter name="position" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Read data from the file specified by fd.&lt;/p&gt;
</description>
            </method>
            <method name="readdir" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous readdir(3). Reads the contents of a directory. The callback gets two arguments (err, files) where files is an array of the names of the files in the directory excluding &amp;#39;.&amp;#39; and &amp;#39;..&amp;#39;.&lt;/p&gt;
</description>
            </method>
            <method name="readdirSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_readdirsync_path_options">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Array&lt;String|Buffer>"/>
                </return-types>
                <description>&lt;p&gt;Synchronous readdir(3). Returns an array of filenames excluding &amp;#39;.&amp;#39; and &amp;#39;..&amp;#39;.&lt;/p&gt;
</description>
            </method>
            <method name="readFile" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback">
                <parameters>
                    <parameter name="file" type="String|Buffer|Number"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronously reads the entire contents of a file. Example:&lt;/p&gt;
</description>
            </method>
            <method name="readFileSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_readfilesync_file_options">
                <parameters>
                    <parameter name="file" type="String|Buffer|Number"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String|Buffer"/>
                </return-types>
                <description>&lt;p&gt;Synchronous version of fs.readFile. Returns the contents of the file.&lt;/p&gt;
</description>
            </method>
            <method name="readlink" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_readlink_path_options_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous readlink(2). The callback gets two arguments (err, linkString).&lt;/p&gt;
</description>
            </method>
            <method name="readlinkSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_readlinksync_path_options">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String|Buffer"/>
                </return-types>
                <description>&lt;p&gt;Synchronous readlink(2). Returns the symbolic link&amp;#39;s string value.&lt;/p&gt;
</description>
            </method>
            <method name="readSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_readsync_fd_buffer_offset_length_position">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="buffer" type="String|Buffer"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="length" type="Number"/>
                    <parameter name="position" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Synchronous version of fs.read(). Returns the number of bytesRead.&lt;/p&gt;
</description>
            </method>
            <method name="realpath" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_realpath_path_options_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous realpath(3). The callback gets two arguments (err, resolvedPath). May use process.cwd to resolve relative paths.&lt;/p&gt;
</description>
            </method>
            <method name="realpathSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_realpathsync_path_options">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String|Buffer"/>
                </return-types>
                <description>&lt;p&gt;Synchronous realpath(3). Returns the resolved path.&lt;/p&gt;
</description>
            </method>
            <method name="rename" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_rename_oldpath_newpath_callback">
                <parameters>
                    <parameter name="oldPath" type="String|Buffer"/>
                    <parameter name="newPath" type="String|Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous rename(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="renameSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_renamesync_oldpath_newpath">
                <parameters>
                    <parameter name="oldPath" type="String|Buffer"/>
                    <parameter name="newPath" type="String|Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous rename(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="rmdir" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_rmdir_path_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="rmdirSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_rmdirsync_path">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous rmdir(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="stat" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_stat_path_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous stat(2). The callback gets two arguments (err, stats) where stats is a fs.Stats object. See the fs.Stats section for more information.&lt;/p&gt;
</description>
            </method>
            <method name="statSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_statsync_path">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="fs.Stats"/>
                </return-types>
                <description>&lt;p&gt;Synchronous stat(2). Returns an instance of fs.Stats.&lt;/p&gt;
</description>
            </method>
            <method name="symlink" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_symlink_target_path_type_callback">
                <parameters>
                    <parameter name="target" type="String|Buffer"/>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="type" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous symlink(2). No arguments other than a possible exception are given to the completion callback. The type argument can be set to &amp;#39;dir&amp;#39;, &amp;#39;file&amp;#39;, or &amp;#39;junction&amp;#39; (default is &amp;#39;file&amp;#39;) and is only available on Windows (ignored on other platforms). Note that Windows junction points require the destination path to be absolute. When using &amp;#39;junction&amp;#39;, the target argument will automatically be normalized to absolute path.&lt;/p&gt;
</description>
            </method>
            <method name="symlinkSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_symlinksync_target_path_type">
                <parameters>
                    <parameter name="target" type="String|Buffer"/>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="type" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous symlink(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="truncate" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_truncate_path_len_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="len" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous truncate(2). No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument. In this case, fs.ftruncate() is called.&lt;/p&gt;
</description>
            </method>
            <method name="truncateSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_truncatesync_path_len">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="len" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous truncate(2). Returns undefined. A file descriptor can also be passed as the first argument. In this case, fs.ftruncateSync() is called.&lt;/p&gt;
</description>
            </method>
            <method name="unlink" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_unlink_path_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous unlink(2). No arguments other than a possible exception are given to the completion callback.&lt;/p&gt;
</description>
            </method>
            <method name="unlinkSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_unlinksync_path">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous unlink(2). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="unwatchFile" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_unwatchfile_filename_listener">
                <parameters>
                    <parameter name="filename" type="String|Buffer"/>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Stop watching for changes on filename. If listener is specified, only that particular listener is removed. Otherwise, all listeners are removed and you have effectively stopped watching filename.&lt;/p&gt;
</description>
            </method>
            <method name="utimes" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_utimes_path_atime_mtime_callback">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="atime" type="Number"/>
                    <parameter name="mtime" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Change file timestamps of the file referenced by the supplied path.&lt;/p&gt;
</description>
            </method>
            <method name="utimesSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_utimessync_path_atime_mtime">
                <parameters>
                    <parameter name="path" type="String|Buffer"/>
                    <parameter name="atime" type="Number"/>
                    <parameter name="mtime" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Synchronous version of fs.utimes(). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="watch" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener">
                <parameters>
                    <parameter name="filename" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="fs.FSWatcher"/>
                </return-types>
                <description>&lt;p&gt;Watch for changes on filename, where filename is either a file or a directory. The returned object is a fs.FSWatcher.&lt;/p&gt;
</description>
            </method>
            <method name="watchFile" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_watchfile_filename_options_listener">
                <parameters>
                    <parameter name="filename" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Watch for changes on filename. The callback listener will be called each time the file is accessed.&lt;/p&gt;
</description>
            </method>
            <method name="write" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_write_fd_data_position_encoding_callback">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="data" type="String|Buffer"/>
                    <parameter name="position" type="Number"/>
                    <parameter name="encoding" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Write data to the file specified by fd. If data is not a Buffer instance then the value will be coerced to a string.&lt;/p&gt;
</description>
            </method>
            <method name="writeFile" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback">
                <parameters>
                    <parameter name="file" type="String|Buffer|Number"/>
                    <parameter name="data" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronously writes data to a file, replacing the file if it already exists. data can be a string or a buffer.&lt;/p&gt;
</description>
            </method>
            <method name="writeFileSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options">
                <parameters>
                    <parameter name="file" type="String|Buffer|Number"/>
                    <parameter name="data" type="String|Buffer"/>
                    <parameter name="options" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;The synchronous version of fs.writeFile(). Returns undefined.&lt;/p&gt;
</description>
            </method>
            <method name="writeSync" scope="instance" url="https://nodejs.org/api/fs.html#fs_fs_writesync_fd_data_position_encoding">
                <parameters>
                    <parameter name="fd" type="Number"/>
                    <parameter name="data" type="String|Buffer"/>
                    <parameter name="position" type="Number"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Synchronous versions of fs.write(). Returns the number of bytes written.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="FSWatcher" type="fs.FSWatcher" scope="static">
                <description>&lt;p&gt;Objects returned from fs.watch() are of this type.&lt;/p&gt;
</description>
            </property>
            <property name="ReadStream" type="fs.ReadStream" scope="static">
                <description>&lt;p&gt;ReadStream is a Readable Stream.&lt;/p&gt;
</description>
            </property>
            <property name="Stats" type="fs.Stats" scope="static">
                <description>&lt;p&gt;Objects returned from fs.stat(), fs.lstat() and fs.fstat() and their synchronous counterparts are of this type.&lt;/p&gt;
</description>
            </property>
            <property name="WriteStream" type="fs.WriteStream" scope="static">
                <description>&lt;p&gt;WriteStream is a Writable Stream.&lt;/p&gt;
</description>
            </property>
            <property name="constants" type="Object">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="fs.FSWatcher" superclass="None" visibility="internal">
        <methods>
            <method name="close" scope="instance" url="https://nodejs.org/api/fs.html#fs_watcher_close">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Stop watching for changes on the given fs.FSWatcher.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="fs.ReadStream" superclass="stream.Readable" visibility="internal">
        <methods/>
        <properties>
            <property name="bytesRead" url="https://nodejs.org/api/fs.html#fs_readstream_bytesread" type="Number" scope="instance">
                <description>&lt;p&gt;The number of bytes read so far.&lt;/p&gt;
</description>
            </property>
            <property name="path" url="https://nodejs.org/api/fs.html#fs_readstream_path" type="String" scope="instance">
                <description>&lt;p&gt;The path to the file the stream is reading from as specified in the first argument to fs.createReadStream(). If path is passed as a string, then readStream.path will be a string. If path is passed as a Buffer, then readStream.path will be a Buffer.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="fs.Stats" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="isFile" type="fn() -> bool" scope="instance">
                <description></description>
            </property>
            <property name="isDirectory" type="fn() -> bool" scope="instance">
                <description></description>
            </property>
            <property name="isBlockDevice" type="fn() -> bool" scope="instance">
                <description></description>
            </property>
            <property name="isCharacterDevice" type="fn() -> bool" scope="instance">
                <description></description>
            </property>
            <property name="isSymbolicLink" type="fn() -> bool" scope="instance">
                <description></description>
            </property>
            <property name="isFIFO" type="fn() -> bool" scope="instance">
                <description></description>
            </property>
            <property name="isSocket" type="fn() -> bool" scope="instance">
                <description></description>
            </property>
            <property name="dev" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="ino" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="mode" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="nlink" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="uid" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="gid" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="rdev" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="size" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="blksize" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="blocks" type="Number" scope="instance">
                <description></description>
            </property>
            <property name="atime" type="+Date" scope="instance">
                <description></description>
            </property>
            <property name="mtime" type="+Date" scope="instance">
                <description></description>
            </property>
            <property name="ctime" type="+Date" scope="instance">
                <description></description>
            </property>
            <property name="birthtime" type="+Date" scope="instance">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="fs.WriteStream" superclass="stream.Writable" visibility="internal">
        <methods/>
        <properties>
            <property name="bytesWritten" url="https://nodejs.org/api/fs.html#fs_writestream_byteswritten" type="Number" scope="instance">
                <description>&lt;p&gt;The number of bytes written so far. Does not include data that is still queued for writing.&lt;/p&gt;
</description>
            </property>
            <property name="path" url="https://nodejs.org/api/fs.html#fs_writestream_path" type="String" scope="instance">
                <description>&lt;p&gt;The path to the file the stream is writing to as specified in the first argument to fs.createWriteStream(). If path is passed as a string, then writeStream.path will be a string. If path is passed as a Buffer, then writeStream.path will be a Buffer.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="path.exports" superclass="None" visibility="internal">
        <methods>
            <method name="normalize" scope="instance" url="https://nodejs.org/api/path.html#path_path_normalize_p">
                <parameters>
                    <parameter name="p" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Normalize a string path, taking care of &amp;#39;..&amp;#39; and &amp;#39;.&amp;#39; parts.&lt;/p&gt;
</description>
            </method>
            <method name="join" scope="instance" url="https://nodejs.org/api/path.html#path_path_join_path">
                <parameters/>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Join all arguments together and normalize the resulting path.&lt;/p&gt;
</description>
            </method>
            <method name="resolve" scope="instance" url="https://nodejs.org/api/path.html#path_path_resolve_from_to">
                <parameters>
                    <parameter name="from" type="String"/>
                    <parameter name="from2" type="String"/>
                    <parameter name="from3" type="String"/>
                    <parameter name="from4" type="String"/>
                    <parameter name="from5" type="String"/>
                    <parameter name="to" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Resolves to to an absolute path.&lt;/p&gt;
</description>
            </method>
            <method name="relative" scope="instance" url="https://nodejs.org/api/path.html#path_path_relative_from_to">
                <parameters>
                    <parameter name="from" type="String"/>
                    <parameter name="to" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Solve the relative path from from to to.&lt;/p&gt;
</description>
            </method>
            <method name="dirname" scope="instance" url="https://nodejs.org/api/path.html#path_path_dirname_p">
                <parameters>
                    <parameter name="p" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Return the directory name of a path. Similar to the Unix dirname command.&lt;/p&gt;
</description>
            </method>
            <method name="basename" scope="instance" url="https://nodejs.org/api/path.html#path_path_basename_p_ext">
                <parameters>
                    <parameter name="p" type="String"/>
                    <parameter name="ext" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Return the last portion of a path. Similar to the Unix basename command.&lt;/p&gt;
</description>
            </method>
            <method name="extname" scope="instance" url="https://nodejs.org/api/path.html#path_path_extname_p">
                <parameters>
                    <parameter name="p" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Return the extension of the path, from the last &amp;#39;.&amp;#39; to end of string in the last portion of the path. If there is no &amp;#39;.&amp;#39; in the last portion of the path or the first character of it is &amp;#39;.&amp;#39;, then it returns an empty string.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="sep" url="https://nodejs.org/api/path.html#path_path_sep" type="String" scope="instance">
                <description>&lt;p&gt;The platform-specific file separator. &amp;#39;\&amp;#39; or &amp;#39;/&amp;#39;.&lt;/p&gt;
</description>
            </property>
            <property name="delimiter" url="https://nodejs.org/api/path.html#path_path_delimiter" type="String" scope="instance">
                <description>&lt;p&gt;The platform-specific path delimiter, ; or &amp;#39;:&amp;#39;.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="string_decoder.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="StringDecoder" type="string_decoder.StringDecoder" scope="static">
                <description>&lt;p&gt;Accepts a single argument, encoding which defaults to utf8.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="string_decoder.StringDecoder" superclass="None" visibility="internal">
        <methods>
            <method name="write" scope="instance" url="https://nodejs.org/api/string_decoder.html#string_decoder_decoder_write_buffer">
                <parameters>
                    <parameter name="buffer" type="Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns a decoded string.&lt;/p&gt;
</description>
            </method>
            <method name="end" scope="instance" url="https://nodejs.org/api/string_decoder.html#string_decoder_decoder_end">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Returns any trailing bytes that were left in the buffer.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="tls.exports" superclass="None" visibility="internal">
        <methods>
            <method name="getCiphers" scope="instance" url="https://nodejs.org/api/tls.html#tls_tls_getciphers">
                <parameters/>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;Returns an array with the names of the supported SSL ciphers.&lt;/p&gt;
</description>
            </method>
            <method name="createServer" scope="instance" url="https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener">
                <parameters>
                    <parameter name="options" type="Object"/>
                    <parameter name="connectionListener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="tls.Server"/>
                </return-types>
                <description>&lt;p&gt;Creates a new tls.Server. The connectionListener argument is automatically set as a listener for the secureConnection event.&lt;/p&gt;
</description>
            </method>
            <method name="connect" scope="instance" url="https://nodejs.org/api/tls.html#tls_tls_connect_options_callback">
                <parameters>
                    <parameter name="port" type="Number"/>
                    <parameter name="host" type="String"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="listener" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="tls.CleartextStream"/>
                </return-types>
                <description>&lt;p&gt;Creates a new client connection to the given port and host (old API) or options.port and options.host. (If host is omitted, it defaults to localhost.)&lt;/p&gt;
</description>
            </method>
            <method name="createSecurePair" scope="instance" url="https://nodejs.org/api/tls.html#tls_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized">
                <parameters>
                    <parameter name="credentials" type="crypto.credentials"/>
                    <parameter name="isServer" type="Boolean"/>
                    <parameter name="requestCert" type="Boolean"/>
                    <parameter name="rejectUnauthorized" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="tls.SecurePair"/>
                </return-types>
                <description>&lt;p&gt;Creates a new secure pair object with two streams, one of which reads/writes encrypted data, and one reads/writes cleartext data. Generally the encrypted one is piped to/from an incoming encrypted data stream, and the cleartext one is used as a replacement for the initial encrypted stream.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="CLIENT_RENEG_LIMIT" type="Number">
                <description></description>
            </property>
            <property name="CLIENT_RENEG_WINDOW" type="Number">
                <description></description>
            </property>
            <property name="SLAB_BUFFER_SIZE" type="Number">
                <description></description>
            </property>
            <property name="Server" type="tls.Server" scope="static">
                <description>&lt;p&gt;This class is a subclass of net.Server and has the same methods on it. Instead of accepting just raw TCP connections, this accepts encrypted connections using TLS or SSL.&lt;/p&gt;
</description>
            </property>
            <property name="CleartextStream" type="tls.CleartextStream" scope="static">
                <description>&lt;p&gt;This is a stream on top of the Encrypted stream that makes it possible to read/write an encrypted data as a cleartext data.&lt;/p&gt;
</description>
            </property>
            <property name="SecurePair" type="tls.SecurePair" scope="static">
                <description>&lt;p&gt;Returned by tls.createSecurePair.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="tls.Server" superclass="net.Server" visibility="internal">
        <methods>
            <method name="listen" scope="instance" url="https://nodejs.org/api/tls.html#tls_server_listen_port_host_callback">
                <parameters>
                    <parameter name="port" type="Number"/>
                    <parameter name="host" type="String"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Begin accepting connections on the specified port and host. If the host is omitted, the server will accept connections directed to any IPv4 address (INADDR_ANY).&lt;/p&gt;
</description>
            </method>
            <method name="close" scope="instance" url="https://nodejs.org/api/tls.html#tls_server_close">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Stops the server from accepting new connections. This function is asynchronous, the server is finally closed when the server emits a &amp;#39;close&amp;#39; event.&lt;/p&gt;
</description>
            </method>
            <method name="addContext" scope="instance" url="https://nodejs.org/api/tls.html#tls_server_addcontext_hostname_credentials">
                <parameters>
                    <parameter name="hostName" type="String"/>
                    <parameter name="credentials" type="tls.Server.credentials"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Add secure context that will be used if client request&amp;#39;s SNI hostname is matching passed hostname (wildcards can be used). credentials can contain key, cert and ca.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="tls.CleartextStream" superclass="stream.Duplex" visibility="internal">
        <methods>
            <method name="getPeerCertificate" scope="instance" url="https://nodejs.org/api/tls.html#tls_cleartextstream_getpeercertificate">
                <parameters/>
                <return-types>
                    <return-type type="?"/>
                </return-types>
                <description>&lt;p&gt;Returns an object representing the peer&amp;#39;s certificate. The returned object has some properties corresponding to the field of the certificate.&lt;/p&gt;
</description>
            </method>
            <method name="getCipher" scope="instance" url="https://nodejs.org/api/tls.html#tls_cleartextstream_getcipher">
                <parameters/>
                <return-types>
                    <return-type type="tls.cipher"/>
                </return-types>
                <description>&lt;p&gt;Returns an object representing the cipher name and the SSL/TLS protocol version of the current connection.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="authorized" url="https://nodejs.org/api/tls.html#tls_cleartextstream_authorized" type="Boolean" scope="instance">
                <description>&lt;p&gt;A boolean that is true if the peer certificate was signed by one of the specified CAs, otherwise false&lt;/p&gt;
</description>
            </property>
            <property name="authorizationError" url="https://nodejs.org/api/tls.html#tls_cleartextstream_authorizationerror" type="Error" scope="instance">
                <description>&lt;p&gt;The reason why the peer&amp;#39;s certificate has not been verified. This property becomes available only when cleartextStream.authorized === false.&lt;/p&gt;
</description>
            </property>
            <property name="address" url="https://nodejs.org/api/tls.html#tls_cleartextstream_address" type="net.address" scope="instance">
                <description>&lt;p&gt;Returns the bound address, the address family name and port of the underlying socket as reported by the operating system. Returns an object with three properties, e.g. { port: 12346, family: &amp;#39;IPv4&amp;#39;, address: &amp;#39;127.0.0.1&amp;#39; }&lt;/p&gt;
</description>
            </property>
            <property name="remoteAddress" url="https://nodejs.org/api/tls.html#tls_cleartextstream_remoteaddress" type="String" scope="instance">
                <description>&lt;p&gt;The string representation of the remote IP address. For example, &amp;#39;74.125.127.100&amp;#39; or &amp;#39;2001:4860:a005::68&amp;#39;.&lt;/p&gt;
</description>
            </property>
            <property name="remotePort" url="https://nodejs.org/api/tls.html#tls_cleartextstream_remoteport" type="Number" scope="instance">
                <description>&lt;p&gt;The numeric representation of the remote port. For example, 443.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="tls.SecurePair" superclass="events.EventEmitter" visibility="internal">
        <methods/>
        <properties>
            <property name="cleartext" url="https://nodejs.org/api/tls.html#tls_class_securepair" type="tls.CleartextStream" scope="instance">
                <description>&lt;p&gt;Returned by tls.createSecurePair.&lt;/p&gt;
</description>
            </property>
            <property name="encrypted" url="https://nodejs.org/api/tls.html#tls_class_securepair" type="stream.Duplex" scope="instance">
                <description>&lt;p&gt;Returned by tls.createSecurePair.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="crypto.exports" superclass="None" visibility="internal">
        <methods>
            <method name="getCiphers" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_getciphers">
                <parameters/>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;Returns an array with the names of the supported ciphers.&lt;/p&gt;
</description>
            </method>
            <method name="getHashes" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_gethashes">
                <parameters/>
                <return-types>
                    <return-type type="Array&lt;String>"/>
                </return-types>
                <description>&lt;p&gt;Returns an array with the names of the supported hash algorithms.&lt;/p&gt;
</description>
            </method>
            <method name="createCredentials" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createcredentials_details">
                <parameters>
                    <parameter name="details" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.credentials"/>
                </return-types>
                <description>&lt;p&gt;Creates a credentials object.&lt;/p&gt;
</description>
            </method>
            <method name="createHash" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm">
                <parameters>
                    <parameter name="algorithm" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.Hash"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns a hash object, a cryptographic hash with the given algorithm which can be used to generate hash digests.&lt;/p&gt;
</description>
            </method>
            <method name="createHmac" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createhmac_algorithm_key">
                <parameters>
                    <parameter name="algorithm" type="String"/>
                    <parameter name="key" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.Hmac"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns a hmac object, a cryptographic hmac with the given algorithm and key.&lt;/p&gt;
</description>
            </method>
            <method name="createCipher" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createcipher_algorithm_password">
                <parameters>
                    <parameter name="algorithm" type="String"/>
                    <parameter name="password" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.Cipher"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns a cipher object, with the given algorithm and password.&lt;/p&gt;
</description>
            </method>
            <method name="createCipheriv" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createcipheriv_algorithm_key_iv">
                <parameters>
                    <parameter name="algorithm" type="String"/>
                    <parameter name="password" type="String"/>
                    <parameter name="iv" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.Cipher"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns a cipher object, with the given algorithm, key and iv.&lt;/p&gt;
</description>
            </method>
            <method name="createDecipher" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createdecipher_algorithm_password">
                <parameters>
                    <parameter name="algorithm" type="String"/>
                    <parameter name="password" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.Decipher"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns a decipher object, with the given algorithm and key. This is the mirror of the createCipher() above.&lt;/p&gt;
</description>
            </method>
            <method name="createDecipheriv" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createdecipheriv_algorithm_key_iv">
                <parameters>
                    <parameter name="algorithm" type="String"/>
                    <parameter name="key" type="String"/>
                    <parameter name="iv" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.Decipher"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns a decipher object, with the given algorithm, key and iv. This is the mirror of the createCipheriv() above.&lt;/p&gt;
</description>
            </method>
            <method name="createSign" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createsign_algorithm">
                <parameters>
                    <parameter name="algorithm" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.Sign"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns a signing object, with the given algorithm. On recent OpenSSL releases, openssl list-public-key-algorithms will display the available signing algorithms. Examples are &amp;#39;RSA-SHA256&amp;#39;.&lt;/p&gt;
</description>
            </method>
            <method name="createVerify" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_createverify_algorithm">
                <parameters>
                    <parameter name="algorith" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.Verify"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns a verification object, with the given algorithm. This is the mirror of the signing object above.&lt;/p&gt;
</description>
            </method>
            <method name="createDiffieHellman" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_creatediffiehellman_prime_length">
                <parameters>
                    <parameter name="prime" type="Number"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.DiffieHellman"/>
                </return-types>
                <description>&lt;p&gt;Creates a Diffie-Hellman key exchange object and generates a prime of the given bit length. The generator used is 2.&lt;/p&gt;
</description>
            </method>
            <method name="getDiffieHellman" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_getdiffiehellman_group_name">
                <parameters>
                    <parameter name="group_name" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="crypto.DiffieHellman"/>
                </return-types>
                <description>&lt;p&gt;Creates a predefined Diffie-Hellman key exchange object. The supported groups are: &amp;#39;modp1&amp;#39;, &amp;#39;modp2&amp;#39;, &amp;#39;modp5&amp;#39; (defined in RFC 2412) and &amp;#39;modp14&amp;#39;, &amp;#39;modp15&amp;#39;, &amp;#39;modp16&amp;#39;, &amp;#39;modp17&amp;#39;, &amp;#39;modp18&amp;#39; (defined in RFC 3526). The returned object mimics the interface of objects created by crypto.createDiffieHellman() above, but will not allow to change the keys (with diffieHellman.setPublicKey() for example). The advantage of using this routine is that the parties don&amp;#39;t have to generate nor exchange group modulus beforehand, saving both processor and communication time.&lt;/p&gt;
</description>
            </method>
            <method name="pbkdf2" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_callback">
                <parameters>
                    <parameter name="password" type="String"/>
                    <parameter name="salt" type="String"/>
                    <parameter name="iterations" type="Number"/>
                    <parameter name="keylen" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asynchronous PBKDF2 applies pseudorandom function HMAC-SHA1 to derive a key of given length from the given password, salt and iterations. The callback gets two arguments (err, derivedKey).&lt;/p&gt;
</description>
            </method>
            <method name="pbkdf2Sync" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen">
                <parameters>
                    <parameter name="password" type="String"/>
                    <parameter name="salt" type="String"/>
                    <parameter name="iterations" type="Number"/>
                    <parameter name="keylen" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Synchronous PBKDF2 function. Returns derivedKey or throws error.&lt;/p&gt;
</description>
            </method>
            <method name="randomBytes" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback">
                <parameters>
                    <parameter name="size" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Generates cryptographically strong pseudo-random data.&lt;/p&gt;
</description>
            </method>
            <method name="pseudoRandomBytes" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_crypto_pseudorandombytes_size_callback">
                <parameters>
                    <parameter name="size" type="Number"/>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Generates non-cryptographically strong pseudo-random data. The data returned will be unique if it is sufficiently long, but is not necessarily unpredictable. For this reason, the output of this function should never be used where unpredictability is important, such as in the generation of encryption keys.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Hash" type="crypto.Hash" scope="static">
                <description>&lt;p&gt;The class for creating hash digests of data.&lt;/p&gt;
</description>
            </property>
            <property name="Hmac" type="crypto.Hmac" scope="static">
                <description>&lt;p&gt;Class for creating cryptographic hmac content.&lt;/p&gt;
</description>
            </property>
            <property name="Cipher" type="crypto.Cipher" scope="static">
                <description>&lt;p&gt;Class for encrypting data.&lt;/p&gt;
</description>
            </property>
            <property name="Decipher" type="crypto.Decipher" scope="static">
                <description>&lt;p&gt;Class for decrypting data.&lt;/p&gt;
</description>
            </property>
            <property name="Sign" type="crypto.Sign" scope="static">
                <description>&lt;p&gt;Class for generating signatures.&lt;/p&gt;
</description>
            </property>
            <property name="Verify" type="crypto.Verify" scope="static">
                <description>&lt;p&gt;Class for verifying signatures.&lt;/p&gt;
</description>
            </property>
            <property name="DiffieHellman" type="crypto.DiffieHellman" scope="static">
                <description>&lt;p&gt;The class for creating Diffie-Hellman key exchanges.&lt;/p&gt;
</description>
            </property>
            <property name="DEFAULT_ENCODING" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="crypto.Hash" superclass="stream.Duplex" visibility="internal">
        <methods>
            <method name="update" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_hash_update_data_input_encoding">
                <parameters>
                    <parameter name="data" type="Buffer"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Updates the hash content with the given data, the encoding of which is given in input_encoding and can be &amp;#39;utf8&amp;#39;, &amp;#39;ascii&amp;#39; or &amp;#39;binary&amp;#39;. If no encoding is provided, then a buffer is expected.&lt;/p&gt;
</description>
            </method>
            <method name="digest" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Calculates the digest of all of the passed data to be hashed. The encoding can be &amp;#39;hex&amp;#39;, &amp;#39;binary&amp;#39; or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="crypto.Hmac" superclass="None" visibility="internal">
        <methods>
            <method name="update" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_hmac_update_data">
                <parameters>
                    <parameter name="data" type="Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Update the hmac content with the given data. This can be called many times with new data as it is streamed.&lt;/p&gt;
</description>
            </method>
            <method name="digest" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_hmac_digest_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Calculates the digest of all of the passed data to the hmac. The encoding can be &amp;#39;hex&amp;#39;, &amp;#39;binary&amp;#39; or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="crypto.Cipher" superclass="stream.Duplex" visibility="internal">
        <methods>
            <method name="update" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_cipher_update_data_input_encoding_output_encoding">
                <parameters>
                    <parameter name="data" type="Buffer"/>
                    <parameter name="input_encoding" type="String"/>
                    <parameter name="output_encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Updates the cipher with data, the encoding of which is given in input_encoding and can be &amp;#39;utf8&amp;#39;, &amp;#39;ascii&amp;#39; or &amp;#39;binary&amp;#39;. If no encoding is provided, then a buffer is expected.&lt;/p&gt;
</description>
            </method>
            <method name="final" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_cipher_final_output_encoding">
                <parameters>
                    <parameter name="output_encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Returns any remaining enciphered contents, with output_encoding being one of: &amp;#39;binary&amp;#39;, &amp;#39;base64&amp;#39; or &amp;#39;hex&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
            <method name="setAutoPadding" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_cipher_setautopadding_auto_padding_true">
                <parameters>
                    <parameter name="auto_padding" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;You can disable automatic padding of the input data to block size. If auto_padding is false, the length of the entire input data must be a multiple of the cipher&amp;#39;s block size or final will fail. Useful for non-standard padding, e.g. using 0x0 instead of PKCS padding. You must call this before cipher.final.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="crypto.Decipher" superclass="stream.Duplex" visibility="internal">
        <methods>
            <method name="update" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_decipher_update_data_input_encoding_output_encoding">
                <parameters>
                    <parameter name="data" type="Buffer"/>
                    <parameter name="input_encoding" type="String"/>
                    <parameter name="output_encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Updates the decipher with data, which is encoded in &amp;#39;binary&amp;#39;, &amp;#39;base64&amp;#39; or &amp;#39;hex&amp;#39;. If no encoding is provided, then a buffer is expected.&lt;/p&gt;
</description>
            </method>
            <method name="final" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_decipher_final_output_encoding">
                <parameters>
                    <parameter name="output_encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Returns any remaining plaintext which is deciphered, with output_encoding being one of: &amp;#39;binary&amp;#39;, &amp;#39;ascii&amp;#39; or &amp;#39;utf8&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
            <method name="setAutoPadding" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_decipher_setautopadding_auto_padding_true">
                <parameters>
                    <parameter name="auto_padding" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;You can disable auto padding if the data has been encrypted without standard block padding to prevent decipher.final from checking and removing it. Can only work if the input data&amp;#39;s length is a multiple of the ciphers block size. You must call this before streaming data to decipher.update.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="crypto.Sign" superclass="stream.Writable" visibility="internal">
        <methods>
            <method name="update" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_sign_update_data">
                <parameters>
                    <parameter name="data" type="Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Updates the sign object with data. This can be called many times with new data as it is streamed.&lt;/p&gt;
</description>
            </method>
            <method name="sign" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_sign_sign_private_key_output_format">
                <parameters>
                    <parameter name="private_key" type="String"/>
                    <parameter name="output_format" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Calculates the signature on all the updated data passed through the sign. private_key is a string containing the PEM encoded private key for signing.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="crypto.Verify" superclass="stream.Writable" visibility="internal">
        <methods>
            <method name="update" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_verifier_update_data">
                <parameters>
                    <parameter name="data" type="Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Updates the verifier object with data. This can be called many times with new data as it is streamed.&lt;/p&gt;
</description>
            </method>
            <method name="verify" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_verifier_verify_object_signature_signature_format">
                <parameters>
                    <parameter name="object" type="String"/>
                    <parameter name="signature" type="String"/>
                    <parameter name="signature_format" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Verifies the signed data by using the object and signature. object is a string containing a PEM encoded object, which can be one of RSA public key, DSA public key, or X.509 certificate. signature is the previously calculated signature for the data, in the signature_format which can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39; or &amp;#39;base64&amp;#39;. If no encoding is specified, then a buffer is expected.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="crypto.DiffieHellman" superclass="None" visibility="internal">
        <methods>
            <method name="generateKeys" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_diffiehellman_generatekeys_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Generates private and public Diffie-Hellman key values, and returns the public key in the specified encoding. This key should be transferred to the other party. Encoding can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39;, or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
            <method name="computeSecret" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding">
                <parameters>
                    <parameter name="other_public_key" type="Buffer"/>
                    <parameter name="input_encoding" type="String"/>
                    <parameter name="output_encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Computes the shared secret using other_public_key as the other party&amp;#39;s public key and returns the computed shared secret. Supplied key is interpreted using specified input_encoding, and secret is encoded using specified output_encoding. Encodings can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39;, or &amp;#39;base64&amp;#39;. If the input encoding is not provided, then a buffer is expected.&lt;/p&gt;
</description>
            </method>
            <method name="getPrime" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_diffiehellman_getprime_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Returns the Diffie-Hellman prime in the specified encoding, which can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39;, or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
            <method name="getGenerator" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_diffiehellman_getgenerator_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Returns the Diffie-Hellman prime in the specified encoding, which can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39;, or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
            <method name="getPublicKey" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_diffiehellman_getpublickey_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Returns the Diffie-Hellman public key in the specified encoding, which can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39;, or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
            <method name="getPrivateKey" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_diffiehellman_getprivatekey_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Returns the Diffie-Hellman private key in the specified encoding, which can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39;, or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is returned.&lt;/p&gt;
</description>
            </method>
            <method name="setPublicKey" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_diffiehellman_setpublickey_public_key_encoding">
                <parameters>
                    <parameter name="public_key" type="Buffer"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the Diffie-Hellman public key. Key encoding can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39; or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is expected.&lt;/p&gt;
</description>
            </method>
            <method name="setPrivateKey" scope="instance" url="https://nodejs.org/api/crypto.html#crypto_diffiehellman_setprivatekey_private_key_encoding">
                <parameters>
                    <parameter name="public_key" type="Buffer"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the Diffie-Hellman private key. Key encoding can be &amp;#39;binary&amp;#39;, &amp;#39;hex&amp;#39; or &amp;#39;base64&amp;#39;. If no encoding is provided, then a buffer is expected.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="util.exports" superclass="None" visibility="internal">
        <methods>
            <method name="format" scope="instance" url="https://nodejs.org/api/util.html#util_util_format_format">
                <parameters>
                    <parameter name="format" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Returns a formatted string using the first argument as a printf-like format.&lt;/p&gt;
</description>
            </method>
            <method name="debug" scope="instance" url="https://nodejs.org/api/util.html#util_util_debug_string">
                <parameters>
                    <parameter name="msg" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;A synchronous output function. Will block the process and output string immediately to stderr.&lt;/p&gt;
</description>
            </method>
            <method name="error" scope="instance" url="https://nodejs.org/api/util.html#util_util_error">
                <parameters>
                    <parameter name="msg" type="String"/>
                    <parameter name="...string" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Same as util.debug() except this will output all arguments immediately to stderr.&lt;/p&gt;
</description>
            </method>
            <method name="puts" scope="instance" url="https://nodejs.org/api/util.html#util_util_puts">
                <parameters>
                    <parameter name="data" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;A synchronous output function. Will block the process and output all arguments to stdout with newlines after each argument.&lt;/p&gt;
</description>
            </method>
            <method name="print" scope="instance" url="https://nodejs.org/api/util.html#util_util_print">
                <parameters>
                    <parameter name="data" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;A synchronous output function. Will block the process, cast each argument to a string then output to stdout. Does not place newlines after each argument.&lt;/p&gt;
</description>
            </method>
            <method name="log" scope="instance" url="https://nodejs.org/api/util.html#util_util_log_string">
                <parameters>
                    <parameter name="string" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Output with timestamp on stdout.&lt;/p&gt;
</description>
            </method>
            <method name="inspect" scope="instance" url="https://nodejs.org/api/util.html#util_util_inspect_object_options">
                <parameters>
                    <parameter name="object" type="Object"/>
                    <parameter name="options" type="Object"/>
                    <parameter name="depth" type="Number"/>
                    <parameter name="colors" type="Boolean"/>
                    <parameter name="customInspect" type="Boolean"/>
                    <parameter name="showProxy" type="Boolean"/>
                    <parameter name="maxArrayLength" type="Number"/>
                    <parameter name="breakLength" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Return a string representation of object, which is useful for debugging.&lt;/p&gt;
</description>
            </method>
            <method name="isArray" scope="instance" url="https://nodejs.org/api/util.html#util_util_isarray_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is an Array. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isRegExp" scope="instance" url="https://nodejs.org/api/util.html#util_util_isregexp_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a RegExp. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isDate" scope="instance" url="https://nodejs.org/api/util.html#util_util_isdate_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a Date. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isError" scope="instance" url="https://nodejs.org/api/util.html#util_util_iserror_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is an Error. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isBoolean" scope="instance" url="https://nodejs.org/api/util.html#util_util_isboolean_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a Boolean. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isNull" scope="instance" url="https://nodejs.org/api/util.html#util_util_isnull_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is strictly null. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isNullOrUndefined" scope="instance" url="https://nodejs.org/api/util.html#util_util_isnullorundefined_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is null or undefined. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isNumber" scope="instance" url="https://nodejs.org/api/util.html#util_util_isnumber_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a Number. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isString" scope="instance" url="https://nodejs.org/api/util.html#util_util_isstring_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a String. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isSymbol" scope="instance" url="https://nodejs.org/api/util.html#util_util_issymbol_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a Symbol. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isUndefined" scope="instance" url="https://nodejs.org/api/util.html#util_util_isundefined_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is undefined. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isObject" scope="instance" url="https://nodejs.org/api/util.html#util_util_isobject_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is strictly an Object and not a Function. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isFunction" scope="instance" url="https://nodejs.org/api/util.html#util_util_isfunction_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a Function. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isPrimitive" scope="instance" url="https://nodejs.org/api/util.html#util_util_isprimitive_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a primitive type. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isBuffer" scope="instance" url="https://nodejs.org/api/util.html#util_util_isbuffer_object">
                <parameters>
                    <parameter name="object" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if the given &amp;quot;object&amp;quot; is a Buffer. false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="inherits" scope="instance" url="https://nodejs.org/api/util.html#util_util_inherits_constructor_superconstructor">
                <parameters>
                    <parameter name="constructor" type="Object"/>
                    <parameter name="superConstructor" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Inherit the prototype methods from one constructor into another. The prototype of constructor will be set to a new object created from superConstructor.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="assert.exports" superclass="None" visibility="internal">
        <methods>
            <method name="ok" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_value_message_assert_ok_value_message">
                <parameters>
                    <parameter name="value" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests if value is truthy. It is equivalent to assert.equal(!!value, true, message).&lt;/p&gt;
</description>
            </method>
            <method name="deepEqual" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_deepequal_actual_expected_message">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests for deep equality between the actual and expected parameters. Primitive values are compared with the equal comparison operator ( == ).&lt;/p&gt;
</description>
            </method>
            <method name="deepStrictEqual" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_deepstrictequal_actual_expected_message">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Generally identical to assert.deepEqual with the exception that primitive values are compared using the strict equality operator ( === ).&lt;/p&gt;
</description>
            </method>
            <method name="doesNotThrow" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_doesnotthrow_block_error_message">
                <parameters>
                    <parameter name="block" type="Function"/>
                    <parameter name="error" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Asserts that the function block does not throw an error. See assert.throws() for more details.&lt;/p&gt;
</description>
            </method>
            <method name="equal" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_equal_actual_expected_message">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests shallow, coercive equality between the actual and expected parameters using the equal comparison operator ( == ).&lt;/p&gt;
</description>
            </method>
            <method name="fail" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_fail_actual_expected_message_operator">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                    <parameter name="operator" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Throws an AssertionError. If message is falsy, the error message is set as the values of actual and expected separated by the provided operator. Otherwise, the error message is the value of message.&lt;/p&gt;
</description>
            </method>
            <method name="ifError" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_iferror_value">
                <parameters>
                    <parameter name="value" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Throws value if value is truthy. This is useful when testing the error argument in callbacks.&lt;/p&gt;
</description>
            </method>
            <method name="notDeepEqual" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_notdeepequal_actual_expected_message">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests for any deep inequality. Opposite of assert.deepEqual.&lt;/p&gt;
</description>
            </method>
            <method name="notDeepStrictEqual" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_notdeepstrictequal_actual_expected_message">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests for deep strict inequality. Opposite of assert.deepStrictEqual.&lt;/p&gt;
</description>
            </method>
            <method name="notEqual" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_notequal_actual_expected_message">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests shallow, coercive inequality with the not equal comparison operator ( != ).&lt;/p&gt;
</description>
            </method>
            <method name="notStrictEqual" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_notstrictequal_actual_expected_message">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests strict inequality as determined by the strict not equal operator ( !== ).&lt;/p&gt;
</description>
            </method>
            <method name="strictEqual" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_strictequal_actual_expected_message">
                <parameters>
                    <parameter name="actual" type="Object"/>
                    <parameter name="expected" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Tests strict equality as determined by the strict equality operator ( === ).&lt;/p&gt;
</description>
            </method>
            <method name="throws" scope="instance" url="https://nodejs.org/api/assert.html#assert_assert_throws_block_error_message">
                <parameters>
                    <parameter name="block" type="Function"/>
                    <parameter name="error" type="Object"/>
                    <parameter name="message" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Expects the function block to throw an error. If specified, error can be a constructor, RegExp, or validation function.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="tty.exports" superclass="None" visibility="internal">
        <methods>
            <method name="isatty" scope="instance" url="https://nodejs.org/api/tty.html#tty_tty_isatty_fd">
                <parameters>
                    <parameter name="fd" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true or false depending on if the fd is associated with a terminal.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="domain.exports" superclass="None" visibility="internal">
        <methods>
            <method name="create" scope="instance" url="https://nodejs.org/api/domain.html#domain_domain_create">
                <parameters/>
                <return-types>
                    <return-type type="events.EventEmitter"/>
                </return-types>
                <description>&lt;p&gt;Returns a new Domain object.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Domain" type="domain.Domain" scope="static">
                <description>&lt;p&gt;The Domain class encapsulates the functionality of routing errors and uncaught exceptions to the active Domain object.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="domain.Domain" superclass="events.EventEmitter" visibility="internal">
        <methods>
            <method name="run" scope="instance" url="https://nodejs.org/api/domain.html#domain_domain_run_fn">
                <parameters>
                    <parameter name="fn" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Run the supplied function in the context of the domain, implicitly binding all event emitters, timers, and lowlevel requests that are created in that context.&lt;/p&gt;
</description>
            </method>
            <method name="add" scope="instance" url="https://nodejs.org/api/domain.html#domain_domain_add_emitter">
                <parameters>
                    <parameter name="emitter" type="events.EventEmitter"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Explicitly adds an emitter to the domain. If any event handlers called by the emitter throw an error, or if the emitter emits an error event, it will be routed to the domain&amp;#39;s error event, just like with implicit binding.&lt;/p&gt;
</description>
            </method>
            <method name="remove" scope="instance" url="https://nodejs.org/api/domain.html#domain_domain_remove_emitter">
                <parameters>
                    <parameter name="emitter" type="events.EventEmitter"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;The opposite of domain.add(emitter). Removes domain handling from the specified emitter.&lt;/p&gt;
</description>
            </method>
            <method name="bind" scope="instance" url="https://nodejs.org/api/domain.html#domain_domain_bind_callback">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="!0"/>
                </return-types>
                <description>&lt;p&gt;The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain&amp;#39;s error event.&lt;/p&gt;
</description>
            </method>
            <method name="intercept" scope="instance" url="https://nodejs.org/api/domain.html#domain_domain_intercept_callback">
                <parameters>
                    <parameter name="cb" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="!0"/>
                </return-types>
                <description>&lt;p&gt;This method is almost identical to domain.bind(callback). However, in addition to catching thrown errors, it will also intercept Error objects sent as the first argument to the function.&lt;/p&gt;
</description>
            </method>
            <method name="dispose" scope="instance" url="https://nodejs.org/api/domain.html#domain_domain_dispose">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;The dispose method destroys a domain, and makes a best effort attempt to clean up any and all IO that is associated with the domain. Streams are aborted, ended, closed, and/or destroyed. Timers are cleared. Explicitly bound callbacks are no longer called. Any error events that are raised as a result of this are ignored.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="members" url="https://nodejs.org/api/domain.html#domain_domain_members" type="Array&lt;events.EventEmitter>" scope="instance">
                <description>&lt;p&gt;An array of timers and event emitters that have been explicitly added to the domain.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="os.cpuSpec.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="model" type="String">
                <description></description>
            </property>
            <property name="speed" type="Number">
                <description></description>
            </property>
            <property name="times" type="Object">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="process.memoryUsage.type.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="rss" type="Number">
                <description></description>
            </property>
            <property name="heapTotal" type="Object">
                <description></description>
            </property>
            <property name="Number" type="Object">
                <description></description>
            </property>
            <property name="heapUsed" type="Number">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="net.address.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="port" type="Number">
                <description></description>
            </property>
            <property name="family" type="String">
                <description></description>
            </property>
            <property name="address" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="url.type.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="href" type="String">
                <description></description>
            </property>
            <property name="protocol" type="String">
                <description></description>
            </property>
            <property name="auth" type="String">
                <description></description>
            </property>
            <property name="hostname" type="String">
                <description></description>
            </property>
            <property name="port" type="String">
                <description></description>
            </property>
            <property name="host" type="String">
                <description></description>
            </property>
            <property name="pathname" type="String">
                <description></description>
            </property>
            <property name="search" type="String">
                <description></description>
            </property>
            <property name="query" type="String">
                <description></description>
            </property>
            <property name="slashes" type="Boolean">
                <description></description>
            </property>
            <property name="hash" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="tls.Server.credentials.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="key" type="String">
                <description></description>
            </property>
            <property name="cert" type="String">
                <description></description>
            </property>
            <property name="ca" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="tls.cipher.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="name" type="String">
                <description></description>
            </property>
            <property name="version" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="crypto.credentials.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="pfx" type="String">
                <description></description>
            </property>
            <property name="key" type="String">
                <description></description>
            </property>
            <property name="passphrase" type="String">
                <description></description>
            </property>
            <property name="cert" type="String">
                <description></description>
            </property>
            <property name="ca" type="String">
                <description></description>
            </property>
            <property name="crl" type="String">
                <description></description>
            </property>
            <property name="ciphers" type="String">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="buffer.exports" superclass="None" visibility="internal">
        <methods/>
        <properties>
            <property name="Buffer" type="Buffer">
                <description></description>
            </property>
            <property name="SlowBuffer" type="Buffer">
                <description></description>
            </property>
            <property name="INSPECT_MAX_BYTES" url="https://nodejs.org/api/buffer.html#buffer_buffer_inspect_max_bytes" type="Number" scope="instance">
                <description>&lt;p&gt;Returns the maximum number of bytes that will be returned when buf.inspect() is called. This can be overridden by user modules. See util.inspect() for more details on buf.inspect() behavior.&lt;/p&gt;
</description>
            </property>
            <property name="kMaxLength" url="https://nodejs.org/api/buffer.html#buffer_buffer_kmaxlength" type="Number" scope="instance">
                <description>&lt;p&gt;On 32-bit architectures, this value is (2^30)-1 (&lt;del&gt;1GB). On 64-bit architectures, this value is (2^31)-1 (&lt;/del&gt;2GB).&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="module.exports" superclass="None" visibility="internal">
        <methods/>
        <properties/>
    </class>
    <class type="timers.exports" superclass="None" visibility="internal">
        <methods>
            <method name="clearImmediate" scope="instance" url="https://nodejs.org/api/timers.html#timers_clearimmediate_immediateobject">
                <parameters>
                    <parameter name="immediateObject" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Stops an immediate from triggering.&lt;/p&gt;
</description>
            </method>
            <method name="clearInterval" scope="instance" url="https://nodejs.org/api/timers.html#timers_clearinterval_intervalobject">
                <parameters>
                    <parameter name="intervalObject" type="timers.Timer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Stops an interval from triggering.&lt;/p&gt;
</description>
            </method>
            <method name="clearTimeout" scope="instance" url="https://nodejs.org/api/timers.html#timers_cleartimeout_timeoutobject">
                <parameters>
                    <parameter name="timeoutObject" type="timers.Timer"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Prevents a timeout from triggering.&lt;/p&gt;
</description>
            </method>
            <method name="setImmediate" scope="instance" url="https://nodejs.org/api/timers.html#timers_setimmediate_callback_arg">
                <parameters>
                    <parameter name="callback" type="Function"/>
                    <parameter name="args" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="?"/>
                </return-types>
                <description>&lt;p&gt;To schedule the &amp;quot;immediate&amp;quot; execution of callback after I/O events callbacks and before setTimeout and setInterval. Returns an immediateObject for possible use with clearImmediate(). Optionally you can also pass arguments to the callback.&lt;/p&gt;
</description>
            </method>
            <method name="setInterval" scope="instance" url="https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg">
                <parameters>
                    <parameter name="callback" type="Function"/>
                    <parameter name="delay" type="Number"/>
                    <parameter name="args" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="timers.Timer"/>
                </return-types>
                <description>&lt;p&gt;To schedule the repeated execution of callback every delay milliseconds. Returns a intervalObject for possible use with clearInterval(). Optionally you can also pass arguments to the callback.&lt;/p&gt;
</description>
            </method>
            <method name="setTimeout" scope="instance" url="https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg">
                <parameters>
                    <parameter name="callback" type="Function"/>
                    <parameter name="delay" type="Number"/>
                    <parameter name="args" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="timers.Timer"/>
                </return-types>
                <description>&lt;p&gt;To schedule execution of a one-time callback after delay milliseconds. Returns a timeoutObject for possible use with clearTimeout(). Optionally you can also pass arguments to the callback.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="Timer" type="Object">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="process" superclass="None">
        <methods>
            <method name="abort" scope="instance" url="https://nodejs.org/api/process.html#process_process_abort">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;This causes node to emit an abort. This will cause node to exit and generate a core file.&lt;/p&gt;
</description>
            </method>
            <method name="chdir" scope="instance" url="https://nodejs.org/api/process.html#process_process_chdir_directory">
                <parameters>
                    <parameter name="directory" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Changes the current working directory of the process or throws an exception if that fails.&lt;/p&gt;
</description>
            </method>
            <method name="cwd" scope="instance" url="https://nodejs.org/api/process.html#process_process_cwd">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Returns the current working directory of the process.&lt;/p&gt;
</description>
            </method>
            <method name="exit" scope="instance" url="https://nodejs.org/api/process.html#process_process_exit_code">
                <parameters>
                    <parameter name="code" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Ends the process with the specified code. If omitted, exit uses the &amp;#39;success&amp;#39; code 0.&lt;/p&gt;
</description>
            </method>
            <method name="getgid" scope="instance" url="https://nodejs.org/api/process.html#process_process_getgid">
                <parameters/>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Gets the group identity of the process. This is the numerical group id, not the group name.&lt;/p&gt;
</description>
            </method>
            <method name="setgid" scope="instance" url="https://nodejs.org/api/process.html#process_process_setgid_id">
                <parameters>
                    <parameter name="id" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the group identity of the process. This accepts either a numerical ID or a groupname string. If a groupname is specified, this method blocks while resolving it to a numerical ID.&lt;/p&gt;
</description>
            </method>
            <method name="getuid" scope="instance" url="https://nodejs.org/api/process.html#process_process_getuid">
                <parameters/>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Gets the user identity of the process. This is the numerical userid, not the username.&lt;/p&gt;
</description>
            </method>
            <method name="setuid" scope="instance" url="https://nodejs.org/api/process.html#process_process_setuid_id">
                <parameters>
                    <parameter name="id" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Sets the user identity of the process. This accepts either a numerical ID or a username string. If a username is specified, this method blocks while resolving it to a numerical ID.&lt;/p&gt;
</description>
            </method>
            <method name="kill" scope="instance" url="https://nodejs.org/api/process.html#process_process_kill_pid_signal">
                <parameters>
                    <parameter name="pid" type="Number"/>
                    <parameter name="signal" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Send a signal to a process. pid is the process id and signal is the string describing the signal to send. Signal names are strings like &amp;#39;SIGINT&amp;#39; or &amp;#39;SIGUSR1&amp;#39;. If omitted, the signal will be &amp;#39;SIGTERM&amp;#39;.&lt;/p&gt;
</description>
            </method>
            <method name="memoryUsage" scope="instance" url="https://nodejs.org/api/process.html#process_process_memoryusage">
                <parameters/>
                <return-types>
                    <return-type type="process.memoryUsage.type"/>
                </return-types>
                <description>&lt;p&gt;Returns an object describing the memory usage of the Node process measured in bytes.&lt;/p&gt;
</description>
            </method>
            <method name="nextTick" scope="instance" url="https://nodejs.org/api/process.html#process_process_nexttick_callback">
                <parameters>
                    <parameter name="callback" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;On the next loop around the event loop call this callback. This is not a simple alias to setTimeout(fn, 0), it&amp;#39;s much more efficient. It typically runs before any other I/O events fire, but there are some exceptions.&lt;/p&gt;
</description>
            </method>
            <method name="umask" scope="instance" url="https://nodejs.org/api/process.html#process_process_umask_mask">
                <parameters>
                    <parameter name="mask" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Sets or reads the process&amp;#39;s file mode creation mask. Child processes inherit the mask from the parent process. Returns the old mask if mask argument is given, otherwise returns the current mask.&lt;/p&gt;
</description>
            </method>
            <method name="uptime" scope="instance" url="https://nodejs.org/api/process.html#process_process_uptime">
                <parameters/>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Number of seconds Node has been running.&lt;/p&gt;
</description>
            </method>
            <method name="hrtime" scope="instance" url="https://nodejs.org/api/process.html#process_process_hrtime">
                <parameters/>
                <return-types>
                    <return-type type="Array&lt;Number>"/>
                </return-types>
                <description>&lt;p&gt;Returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array. It is relative to an arbitrary time in the past. It is not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="stdout" url="https://nodejs.org/api/process.html#process_process_stdout" type="stream.Writable" scope="instance">
                <description>&lt;p&gt;A Writable Stream to stdout.&lt;/p&gt;
</description>
            </property>
            <property name="stderr" url="https://nodejs.org/api/process.html#process_process_stderr" type="stream.Writable" scope="instance">
                <description>&lt;p&gt;A writable stream to stderr.&lt;/p&gt;
</description>
            </property>
            <property name="stdin" url="https://nodejs.org/api/process.html#process_process_stdin" type="stream.Readable" scope="instance">
                <description>&lt;p&gt;A Readable Stream for stdin. The stdin stream is paused by default, so one must call process.stdin.resume() to read from it.&lt;/p&gt;
</description>
            </property>
            <property name="argv" url="https://nodejs.org/api/process.html#process_process_argv" type="Array&lt;String>" scope="instance">
                <description>&lt;p&gt;An array containing the command line arguments. The first element will be &amp;#39;node&amp;#39;, the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments.&lt;/p&gt;
</description>
            </property>
            <property name="execPath" url="https://nodejs.org/api/process.html#process_process_execpath" type="String" scope="instance">
                <description>&lt;p&gt;This is the absolute pathname of the executable that started the process.&lt;/p&gt;
</description>
            </property>
            <property name="env" type="Object">
                <description></description>
            </property>
            <property name="version" url="https://nodejs.org/api/process.html#process_process_version" type="String" scope="instance">
                <description>&lt;p&gt;A compiled-in property that exposes NODE_VERSION.&lt;/p&gt;
</description>
            </property>
            <property name="versions" type="Object">
                <description></description>
            </property>
            <property name="config" type="Object">
                <description></description>
            </property>
            <property name="pid" url="https://nodejs.org/api/process.html#process_process_pid" type="Number" scope="instance">
                <description>&lt;p&gt;The PID of the process.&lt;/p&gt;
</description>
            </property>
            <property name="title" url="https://nodejs.org/api/process.html#process_process_title" type="String" scope="instance">
                <description>&lt;p&gt;Getter/setter to set what is displayed in &amp;#39;ps&amp;#39;.&lt;/p&gt;
</description>
            </property>
            <property name="arch" url="https://nodejs.org/api/process.html#process_process_arch" type="String" scope="instance">
                <description>&lt;p&gt;What processor architecture you&amp;#39;re running on: &amp;#39;arm&amp;#39;, &amp;#39;ia32&amp;#39;, or &amp;#39;x64&amp;#39;.&lt;/p&gt;
</description>
            </property>
            <property name="platform" url="https://nodejs.org/api/process.html#process_process_platform" type="String" scope="instance">
                <description>&lt;p&gt;What platform you&amp;#39;re running on: &amp;#39;darwin&amp;#39;, &amp;#39;freebsd&amp;#39;, &amp;#39;linux&amp;#39;, &amp;#39;sunos&amp;#39; or &amp;#39;win32&amp;#39;&lt;/p&gt;
</description>
            </property>
            <property name="maxTickDepth" url="https://nodejs.org/api/process.html#process_process_maxtickdepth" type="Number" scope="instance">
                <description>&lt;p&gt;The maximum depth of nextTick-calling nextTick-callbacks that will be evaluated before allowing other forms of I/O to occur.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    <class type="console" superclass="None">
        <methods>
            <method name="log" scope="instance" url="https://nodejs.org/api/console.html#console_console_log_data">
                <parameters>
                    <parameter name="text" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Prints to stdout with newline. This function can take multiple arguments in a printf()-like way.&lt;/p&gt;
</description>
            </method>
            <method name="info" scope="instance" url="https://nodejs.org/api/console.html#console_console_info_data">
                <parameters>
                    <parameter name="text" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Same as console.log.&lt;/p&gt;
</description>
            </method>
            <method name="error" scope="instance" url="https://nodejs.org/api/console.html#console_console_error_data">
                <parameters>
                    <parameter name="text" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Same as console.log but prints to stderr.&lt;/p&gt;
</description>
            </method>
            <method name="warn" scope="instance" url="https://nodejs.org/api/console.html#console_console_warn_data">
                <parameters>
                    <parameter name="text" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Same as console.error.&lt;/p&gt;
</description>
            </method>
            <method name="dir" scope="instance" url="https://nodejs.org/api/console.html#console_console_dir_obj_options">
                <parameters>
                    <parameter name="obj" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Uses util.inspect on obj and prints resulting string to stdout.&lt;/p&gt;
</description>
            </method>
            <method name="time" scope="instance" url="https://nodejs.org/api/console.html#console_console_time_label">
                <parameters>
                    <parameter name="label" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Mark a time.&lt;/p&gt;
</description>
            </method>
            <method name="timeEnd" scope="instance" url="https://nodejs.org/api/console.html#console_console_timeend_label">
                <parameters>
                    <parameter name="label" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Finish timer, record output.&lt;/p&gt;
</description>
            </method>
            <method name="trace" scope="instance" url="https://nodejs.org/api/console.html#console_console_trace_message">
                <parameters>
                    <parameter name="label" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Print a stack trace to stderr of the current position.&lt;/p&gt;
</description>
            </method>
            <method name="assert" scope="instance" url="https://nodejs.org/api/console.html#console_console_assert_value_message">
                <parameters>
                    <parameter name="expression" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Same as assert.ok() where if the expression evaluates as false throw an AssertionError with message.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="__filename" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="__dirname" superclass="None">
        <methods/>
        <properties/>
    </class>
    <class type="Buffer" superclass="Uint8Array">
        <methods>
            <method name="compare" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend">
                <parameters>
                    <parameter name="target" type="Buffer"/>
                    <parameter name="targetStart" type="Number"/>
                    <parameter name="targetEnd" type="Number"/>
                    <parameter name="sourceStart" type="Number"/>
                    <parameter name="sourceEnd" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Compares buf with target and returns a number indicating whether buf comes before, after, or is the same as target in sort order. Comparison is based on the actual sequence of bytes in each Buffer.&lt;/p&gt;
</description>
            </method>
            <method name="copy" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_copy_target_targetstart_sourcestart_sourceend">
                <parameters>
                    <parameter name="target" type="Buffer"/>
                    <parameter name="targetStart" type="Number"/>
                    <parameter name="sourceStart" type="Number"/>
                    <parameter name="sourceEnd" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Copies data from a region of buf to a region in target even if the target memory region overlaps with buf.&lt;/p&gt;
</description>
            </method>
            <method name="entries" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_entries">
                <parameters/>
                <return-types>
                    <return-type type="iter[:t=[number, number]]"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns an iterator of [index, byte] pairs from the contents of buf.&lt;/p&gt;
</description>
            </method>
            <method name="equals" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_equals_otherbuffer">
                <parameters>
                    <parameter name="otherBuffer" type="Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if both buf and otherBuffer have exactly the same bytes, false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="fill" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_fill_value_offset_end_encoding">
                <parameters>
                    <parameter name="value" type="String|Buffer|Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="end" type="Number"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Fills buf with the specified value. If the offset and end are not given, the entire buf will be filled. This is meant to be a small simplification to allow the creation and filling of a Buffer to be done on a single line.&lt;/p&gt;
</description>
            </method>
            <method name="indexOf" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_indexof_value_byteoffset_encoding">
                <parameters>
                    <parameter name="value" type="String|Buffer|Number"/>
                    <parameter name="byteOffset" type="Number"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;If value is:&lt;/p&gt;
</description>
            </method>
            <method name="includes" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_includes_value_byteoffset_encoding">
                <parameters>
                    <parameter name="value" type="String|Buffer|Number"/>
                    <parameter name="byteOffset" type="Number"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Equivalent to buf.indexOf() !== -1.&lt;/p&gt;
</description>
            </method>
            <method name="keys" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_keys">
                <parameters/>
                <return-types>
                    <return-type type="iter[:t=number]"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns an iterator of buf keys (indices).&lt;/p&gt;
</description>
            </method>
            <method name="lastIndexOf" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_lastindexof_value_byteoffset_encoding">
                <parameters>
                    <parameter name="value" type="String|Buffer|Number"/>
                    <parameter name="byteOffset" type="Number"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Identical to buf.indexOf(), except buf is searched from back to front instead of front to back.&lt;/p&gt;
</description>
            </method>
            <method name="readDoubleBE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readdoublebe_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a 64-bit double from buf at the specified offset with specified endian format (readDoubleBE() returns big endian, readDoubleLE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readDoubleLE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readdoublele_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a 64-bit double from buf at the specified offset with specified endian format (readDoubleBE() returns big endian, readDoubleLE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readFloatBE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readfloatbe_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a 32-bit float from buf at the specified offset with specified endian format (readFloatBE() returns big endian, readFloatLE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readFloatLE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readfloatle_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a 32-bit float from buf at the specified offset with specified endian format (readFloatBE() returns big endian, readFloatLE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readInt8" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readint8_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a signed 8-bit integer from buf at the specified offset.&lt;/p&gt;
</description>
            </method>
            <method name="readInt16BE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readint16be_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a signed 16-bit integer from buf at the specified offset with the specified endian format (readInt16BE() returns big endian, readInt16LE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readInt16LE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readint16le_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a signed 16-bit integer from buf at the specified offset with the specified endian format (readInt16BE() returns big endian, readInt16LE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readInt32BE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readint32be_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a signed 32-bit integer from buf at the specified offset with the specified endian format (readInt32BE() returns big endian, readInt32LE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readInt32LE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readint32le_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads a signed 32-bit integer from buf at the specified offset with the specified endian format (readInt32BE() returns big endian, readInt32LE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readIntBE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readintbe_offset_bytelength_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="byteLength" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads byteLength number of bytes from buf at the specified offset and interprets the result as a two&amp;#39;s complement signed value. Supports up to 48 bits of accuracy.&lt;/p&gt;
</description>
            </method>
            <method name="readIntLE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readintle_offset_bytelength_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="byteLength" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads byteLength number of bytes from buf at the specified offset and interprets the result as a two&amp;#39;s complement signed value. Supports up to 48 bits of accuracy.&lt;/p&gt;
</description>
            </method>
            <method name="readUInt8" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readuint8_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads an unsigned 8-bit integer from buf at the specified offset.&lt;/p&gt;
</description>
            </method>
            <method name="readUInt16BE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readuint16be_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads an unsigned 16-bit integer from buf at the specified offset with specified endian format (readUInt16BE() returns big endian, readUInt16LE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readUInt16LE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readuint16le_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads an unsigned 16-bit integer from buf at the specified offset with specified endian format (readUInt16BE() returns big endian, readUInt16LE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readUInt32BE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readuint32be_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads an unsigned 32-bit integer from buf at the specified offset with specified endian format (readUInt32BE() returns big endian, readUInt32LE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readUInt32LE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readuint32le_offset_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads an unsigned 32-bit integer from buf at the specified offset with specified endian format (readUInt32BE() returns big endian, readUInt32LE() returns little endian).&lt;/p&gt;
</description>
            </method>
            <method name="readUIntBE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readuintbe_offset_bytelength_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="byteLength" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads byteLength number of bytes from buf at the specified offset and interprets the result as an unsigned integer. Supports up to 48 bits of accuracy.&lt;/p&gt;
</description>
            </method>
            <method name="readUIntLE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_readuintle_offset_bytelength_noassert">
                <parameters>
                    <parameter name="offset" type="Number"/>
                    <parameter name="byteLength" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Reads byteLength number of bytes from buf at the specified offset and interprets the result as an unsigned integer. Supports up to 48 bits of accuracy.&lt;/p&gt;
</description>
            </method>
            <method name="slice" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end">
                <parameters>
                    <parameter name="start" type="Number"/>
                    <parameter name="end" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Returns a new Buffer that references the same memory as the original, but offset and cropped by the start and end indices.&lt;/p&gt;
</description>
            </method>
            <method name="swap16" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_swap16">
                <parameters/>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Interprets buf as an array of unsigned 16-bit integers and swaps the byte-order in-place. Throws a RangeError if buf.length is not a multiple of 2.&lt;/p&gt;
</description>
            </method>
            <method name="swap32" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_swap32">
                <parameters/>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Interprets buf as an array of unsigned 32-bit integers and swaps the byte-order in-place. Throws a RangeError if buf.length is not a multiple of 4.&lt;/p&gt;
</description>
            </method>
            <method name="swap64" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_swap64">
                <parameters/>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Interprets buf as an array of 64-bit numbers and swaps the byte-order in-place. Throws a RangeError if buf.length is not a multiple of 8.&lt;/p&gt;
</description>
            </method>
            <method name="toString" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end">
                <parameters>
                    <parameter name="encoding" type="String"/>
                    <parameter name="start" type="Number"/>
                    <parameter name="end" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <description>&lt;p&gt;Decodes buf to a string according to the specified character encoding in encoding. start and end may be passed to decode only a subset of buf.&lt;/p&gt;
</description>
            </method>
            <method name="toJSON" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_tojson">
                <parameters/>
                <return-types>
                    <return-type type="void"/>
                </return-types>
                <description>&lt;p&gt;Returns a JSON representation of buf. JSON.stringify() implicitly calls this function when stringifying a Buffer instance.&lt;/p&gt;
</description>
            </method>
            <method name="values" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_values">
                <parameters/>
                <return-types>
                    <return-type type="iter[:t=number]"/>
                </return-types>
                <description>&lt;p&gt;Creates and returns an iterator for buf values (bytes). This function is called automatically when a Buffer is used in a for..of statement.&lt;/p&gt;
</description>
            </method>
            <method name="write" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_write_string_offset_length_encoding">
                <parameters>
                    <parameter name="string" type="String"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="length" type="Number"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes string to buf at offset according to the character encoding in encoding. The length parameter is the number of bytes to write. If buf did not contain enough space to fit the entire string, only a partial amount of string will be written. However, partially encoded characters will not be written.&lt;/p&gt;
</description>
            </method>
            <method name="writeDoubleBE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writedoublebe_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeDoubleBE() writes big endian, writeDoubleLE() writes little endian). value should be a valid 64-bit double. Behavior is undefined when value is anything other than a 64-bit double.&lt;/p&gt;
</description>
            </method>
            <method name="writeDoubleLE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writedoublele_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeDoubleBE() writes big endian, writeDoubleLE() writes little endian). value should be a valid 64-bit double. Behavior is undefined when value is anything other than a 64-bit double.&lt;/p&gt;
</description>
            </method>
            <method name="writeFloatBE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writefloatbe_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeFloatBE() writes big endian, writeFloatLE() writes little endian). value should be a valid 32-bit float. Behavior is undefined when value is anything other than a 32-bit float.&lt;/p&gt;
</description>
            </method>
            <method name="writeFloatLE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writefloatle_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeFloatBE() writes big endian, writeFloatLE() writes little endian). value should be a valid 32-bit float. Behavior is undefined when value is anything other than a 32-bit float.&lt;/p&gt;
</description>
            </method>
            <method name="writeInt8" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeint8_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset. value should be a valid signed 8-bit integer. Behavior is undefined when value is anything other than a signed 8-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeInt16BE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeint16be_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeInt16BE() writes big endian, writeInt16LE() writes little endian). value should be a valid signed 16-bit integer. Behavior is undefined when value is anything other than a signed 16-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeInt16LE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeint16le_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeInt16BE() writes big endian, writeInt16LE() writes little endian). value should be a valid signed 16-bit integer. Behavior is undefined when value is anything other than a signed 16-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeInt32BE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeint32be_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeInt32BE() writes big endian, writeInt32LE() writes little endian). value should be a valid signed 32-bit integer. Behavior is undefined when value is anything other than a signed 32-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeInt32LE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeint32le_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeInt32BE() writes big endian, writeInt32LE() writes little endian). value should be a valid signed 32-bit integer. Behavior is undefined when value is anything other than a signed 32-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeIntBE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeintbe_value_offset_bytelength_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="byteLength" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes byteLength bytes of value to buf at the specified offset. Supports up to 48 bits of accuracy. Behavior is undefined when value is anything other than a signed integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeIntLE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeintle_value_offset_bytelength_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="byteLength" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes byteLength bytes of value to buf at the specified offset. Supports up to 48 bits of accuracy. Behavior is undefined when value is anything other than a signed integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeUInt8" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeuint8_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset. value should be a valid unsigned 8-bit integer. Behavior is undefined when value is anything other than an unsigned 8-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeUInt16BE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeuint16be_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeUInt16BE() writes big endian, writeUInt16LE() writes little endian). value should be a valid unsigned 16-bit integer. Behavior is undefined when value is anything other than an unsigned 16-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeUInt16LE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeuint16le_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeUInt16BE() writes big endian, writeUInt16LE() writes little endian). value should be a valid unsigned 16-bit integer. Behavior is undefined when value is anything other than an unsigned 16-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeUInt32BE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeuint32be_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeUInt32BE() writes big endian, writeUInt32LE() writes little endian). value should be a valid unsigned 32-bit integer. Behavior is undefined when value is anything other than an unsigned 32-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeUInt32LE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeuint32le_value_offset_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes value to buf at the specified offset with specified endian format (writeUInt32BE() writes big endian, writeUInt32LE() writes little endian). value should be a valid unsigned 32-bit integer. Behavior is undefined when value is anything other than an unsigned 32-bit integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeUIntBE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeuintbe_value_offset_bytelength_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="byteLength" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes byteLength bytes of value to buf at the specified offset. Supports up to 48 bits of accuracy. Behavior is undefined when value is anything other than an unsigned integer.&lt;/p&gt;
</description>
            </method>
            <method name="writeUIntLE" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_buf_writeuintle_value_offset_bytelength_noassert">
                <parameters>
                    <parameter name="value" type="Number"/>
                    <parameter name="offset" type="Number"/>
                    <parameter name="byteLength" type="Number"/>
                    <parameter name="noAssert" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Writes byteLength bytes of value to buf at the specified offset. Supports up to 48 bits of accuracy. Behavior is undefined when value is anything other than an unsigned integer.&lt;/p&gt;
</description>
            </method>
            <method name="alloc" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding">
                <parameters>
                    <parameter name="size" type="Number"/>
                    <parameter name="fill" type="String|Buffer|Number"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Allocates a new Buffer of size bytes. If fill is undefined, the Buffer will be zero-filled.&lt;/p&gt;
</description>
            </method>
            <method name="allocUnsafe" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size">
                <parameters>
                    <parameter name="size" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Allocates a new non-zero-filled Buffer of size bytes. The size must be less than or equal to the value of buffer.kMaxLength. Otherwise, a RangeError is thrown. A zero-length Buffer will be created if size &amp;lt;= 0.&lt;/p&gt;
</description>
            </method>
            <method name="allocUnsafeSlow" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafeslow_size">
                <parameters>
                    <parameter name="size" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Allocates a new non-zero-filled and non-pooled Buffer of size bytes. The size must be less than or equal to the value of buffer.kMaxLength. Otherwise, a RangeError is thrown. A zero-length Buffer will be created if size &amp;lt;= 0.&lt;/p&gt;
</description>
            </method>
            <method name="byteLength" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_bytelength_string_encoding">
                <parameters>
                    <parameter name="string" type="Object"/>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Returns the actual byte length of a string. This is not the same as String.prototype.length since that returns the number of characters in a string.&lt;/p&gt;
</description>
            </method>
            <method name="compare" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_compare_buf1_buf2">
                <parameters>
                    <parameter name="buf1" type="Buffer"/>
                    <parameter name="buf2" type="Buffer"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
                <description>&lt;p&gt;Compares buf1 to buf2 typically for the purpose of sorting arrays of Buffer instances. This is equivalent to calling buf1.compare(buf2).&lt;/p&gt;
</description>
            </method>
            <method name="concat" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_concat_list_totallength">
                <parameters>
                    <parameter name="list" type="Object"/>
                    <parameter name="totalLength" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Returns a new Buffer which is the result of concatenating all the Buffer instances in the list together.&lt;/p&gt;
</description>
            </method>
            <method name="from" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding">
                <parameters>
                    <parameter name="source" type="Number[]|ArrayBuffer|Buffer|String"/>
                    <parameter name="byteOffsetOrEncoding" type="Number|String"/>
                    <parameter name="length" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Buffer"/>
                </return-types>
                <description>&lt;p&gt;Creates a new Buffer from existing array, ArrayBuffer, Buffer, or string.&lt;/p&gt;
</description>
            </method>
            <method name="isBuffer" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isbuffer_obj">
                <parameters>
                    <parameter name="obj" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if obj is a Buffer, false otherwise.&lt;/p&gt;
</description>
            </method>
            <method name="isEncoding" scope="instance" url="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_isencoding_encoding">
                <parameters>
                    <parameter name="encoding" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="bool"/>
                </return-types>
                <description>&lt;p&gt;Returns true if encoding contains a supported character encoding, or false otherwise.&lt;/p&gt;
</description>
            </method>
        </methods>
        <properties>
            <property name="length" url="https://nodejs.org/api/buffer.html#buffer_buf_length" type="Number" scope="instance">
                <description>&lt;p&gt;Returns the amount of memory allocated for buf in bytes. Note that this does not necessarily reflect the amount of &amp;quot;usable&amp;quot; data within buf.&lt;/p&gt;
</description>
            </property>
            <property name="poolSize" url="https://nodejs.org/api/buffer.html#buffer_class_property_buffer_poolsize" type="Number" scope="instance">
                <description>&lt;p&gt;This is the number of bytes used to determine the size of pre-allocated, internal Buffer instances used for pooling. This value may be modified.&lt;/p&gt;
</description>
            </property>
        </properties>
    </class>
    
    <class type="NodeRequire" superclass="None">
        <methods/>
        <properties>
            <property name="resolve" type="RequireResolve">
                <description></description>
            </property>
            <property name="cache" type="Object">
                <description></description>
            </property>
            <property name="extensions" type="NodeExtensions">
                <description></description>
            </property>
            <property name="main" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="RequireResolve" superclass="None">
        <methods>
            <method name="paths">
                <parameters>
                    <parameter name="request" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="None"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties/>
    </class>
    <class type="NodeExtensions" superclass="None">
        <methods/>
        <properties>
            <property name=".js" type="Function">
                <description></description>
            </property>
            <property name=".json" type="Function">
                <description></description>
            </property>
            <property name=".node" type="Function">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="NodeModule" superclass="None">
        <methods/>
        <properties>
            <property name="exports" type="Object">
                <description></description>
            </property>
            <property name="require" type="NodeRequireFunction">
                <description></description>
            </property>
            <property name="id" type="String">
                <description></description>
            </property>
            <property name="filename" type="String">
                <description></description>
            </property>
            <property name="loaded" type="Boolean">
                <description></description>
            </property>
            <property name="parent" type="None">
                <description></description>
            </property>
            <property name="children" type="None">
                <description></description>
            </property>
            <property name="paths" type="None">
                <description></description>
            </property>
        </properties>
    </class>
    <class type="Global">
        <methods>
            <method name="require">
                <parameters>
                    <parameter name="module" type="ModuleURIString|String"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
                <description></description>
            </method>
        </methods>
        <properties>
            <property name="require" type="NodeRequire" scope="instance">
                <description></description>
            </property>
            <property name="module" type="NodeModule" scope="instance">
                <description></description>
            </property>
        </properties>
    </class>
</javascript>
